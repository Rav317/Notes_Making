Yeah right we have discussed few datastructures like array and Ling lists howdata is stored in array what are thedifferent operations on array what islinked list or what are the differentoperations on linked list how data isstored in linked list right and now wewill see what is the stack datastructure so you can see it is a lineardata structure fine and seen array whatis their random access as possible youcan directly access any data in aconstant time in linked list what onlysequential access is possible rightwhat about stuck in stack only you cansay limited access is possible right oryou can say it is a ordered list what isthat it is an ordered list or you cansay it is a collection or you can say itis a container which is going to followa rule for insertion and deletion of thedata right and what is that rule or whatis that restriction you can say or whatis that principle right which that stackdata structure follow so that rule isinsertion and deletion is possible onlyfrom one end right this is applied onboth insertion and deletion insertionand deletion is possible from only oneend like you can take a real lifeexample suppose you have a CD standright like this you are going to put CDshere first CD then second third fourthfifth obviously like this you are goingto put suppose you want to insertanother CD in that case you have onlyone way to insert CD from the top onlyyou cannot insert CD here from thebottom you cannot insert from the leftor right the only way is from the toponly you can insert that CD right secondK says if you want to take out a CD fromthis series stand then what you will doonly one option you can take out fromthe top right suppose you want to takeoutin this city the first CD right so youdon't have any option the only option isfirst of all you will have to take outall the CDs which are placed above thisCD after that only you can take out thisCD right that is the restrictions oninsertion and deletion in stock fine soin this video we will see how logicallyyou are going to represent a stack whatare the introduction introductory partof stack some basic operations on stackwhat what are the meaning of thoseoperations as well as some applicationsof stack in next video we will see howto implement a stack right using arraysas well as using link inst so now likethis if you map this real-life stackobviously this is what a stack only oryou can say a stack of plates right oneplate is you have put one plate here ifyou want to play a place another platethen you will put on this plate thenthird and fourth and fifth like this youare going to place if you want to removea plate then first plate you will takeout first right so the principle is whatlast in first out you can say right thisis the last plate or you can say this isthe last CD you have put in the CD standand the last CD would be the first onethat you can take out so last in firstout leaf oh so the rule on which thisstack data structure works is what leavefor last in first out or you can sayfirst in last out this CD was first inbut if you want to take out this CD thenthis would be the last one you can takeout because for for taking out this CDoutside of the series 10 you how to takeout all the above CDs first of all rightso first any last out and if you willmap this real-life example of stack inthis with this stack then you can saythe logical representdatian of the stack is what we representstack something like this like this thisis what a stack you will represent thisit is a container which has only oneopen end you can insert data from hereyou can delete a data from here rightthere is no other way this is what astack logical representation of stuffthis is not actual representation ofstack right that we will discuss inlater we use rightand in stab insertion operation when youwill insert some data understand thatoperation is known as push right anddeletion operation is known as pop sotwo fundamental operations are there onthe stack one is push one is pop pushmeans inserting or putting a data intothe strap pop means taking out ordeleting the topmost data from the stackright two fundamental operations manymore operations are also there that ifyou are we will also discuss now seethis is the only and from where you aregoing to push and pop the data right sothis is known as top top of the steprightyou can insert a data and you can deletedata from top of the stack that end isknown as top from where you can insertyou can push and pop data right so nowwe will see some operations that areperformed on star data structure seefirst is push and in bracket you willwrite down that a data you want toinsert into stack C stack is what it isa collection of similar data type onlyit's not like that this is stack andhere the first data is suppose integerand after that I'm inserting a characterafter that again I am inserting to knowyou can only insert the data of similardata type either in teaser all the datashould be integer or character or floatsomething like this right see pushsecond operation is pop operationright here they don't pass any argumenthere why so because pop means always thetopmost element would be popped out fromthe step right so no need to passanything in this function these are twofundamental operation third operationmay be peak operation or somewhere it isalso known as top operation it meanswhat it is going to return the topmostelement of the stack without removingthat element from the stack see Bob willreturn the topmost element from thestack as well as it will remove thatelement from the stack see suppose thisis what I have stack and in this I havedata type 1 I have data 1 2 & 3 if youwrite down pop it means it will remove 3from the stack now this is the stepright and if on this stack you willperform peak operation or top operationit means it will return 3 but it willnot remove this from the step this isthe difference right fourth operationmay be is empty means it will true ifthe stack is empty there is known datain the list just in the stack rightotherwise it will return false sakeanother may be is full so this functionwill return true if this stack is fullotherwise it will return false see theseare not the only operation you canperform there are many more operationyou can perform on stack like you cannotperform search operation reverseoperation you can find out that minimumelement from the stack maximum valueelement from the stack right bad thingalso we will discuss in a later videosright these are some fundamentaloperations you can perform one stackfine now we will see the logicalrepresentation of stack as well as weare going to perform these operationsright so this is how we logicallyrepresent the step right not actually inthe memory this is just a logicalrepresentation right for yourunderstanding purpose nowobviously you want do you want to pushsome data in the stack right so you needto know the capacity of the stack or youcan say the size of the stack so youneed to allocate some memory to thestack right and how to fix that size howyou will get to know the size of thestack you can allocate the memory eitherusing static memory allocation ordynamic memory allocation there are twoways to implement stack static memoryallocation and dynamically you canimplement step static means using arraysyou can implement stack write dynamicmeans using linked lists you canimplement stack so these implementationswe will see in the next video with theproper with the help of an example pluscode right so now suppose I have takenthe size of the stack as 5 means thestack can store only five elementseither using by static memory locationor dynamic memory allocation right thatthing in detail we will discuss in nextvideo see suppose the capacity is here 5so you can insert here 5 elements onlyfineat starting at starting top is what topis equal to minus 1 fine 5 means you cansay you can insert 5 elements the indexwould be 0 first of all then 1 then 2then 3 then 4 from 0 to 4 right so here5 elements I can store this is thecapacity of the stack at starting top isminus 1 right minus 1 means somewherehere minus 1 hypothetically we assumethat here we have minus 1 index rightnow suppose in the empty stack you callthis pop operation what would happen popmeans the topmost element would beremoved but here we don't have anythingstack is empty in this case it is whatunder flow condition it will return whatthe stack is empty so this is what anunder flow condition you can say rightandnow suppose I'm calling push to writeactually implementation or loose also wewill see how to write down the code forpush and pop right here I am just givingyou the brief introduction push 2 minshere from the top one you will insertthis 2 right we have only one end sofirst of all what would happen top is -1so we will increment this top first ofall top plus plus it means top becomes 0now now here we have top and now youwill insert this to write again if youwill call push 3 again first of all topplus plusright now table becomes this one top ispointing to this one 1 and now you willinsert 3 here in the stack fine if youcall pop no need to pass any argumenthere why so because only the topmostelement would be removed from the stackyou cannot write here pop 2 means if youwant to remove this 2 you cannot see pop2 and this 2 would be removed no alwaysthis element would be removed right sopop 3 pop means the 3 would be removedfrom the stack and now see right now wewill do top minus minus means now againtop is 0Oh second again if you do pop in thatcase again though would be removed fromthe list or simply you can do top minusminus means top is now minus 1 right andif you will not remove this if you willnot take out this from the stack that isalso fine because this is now a garbagewe do not care what garbage value isthere in the stack because after that ifyou will again call push for then firstof all top plus plus means now topbecomes 0 minus 1 to 0here we will this too would beoverwritten and herefor would be storedright this thing also will discuss howto code push and pop operation fine nowsuppose I am going to push four timesone five six and seven one five six andseven again I am calling push eight nowthe stack is full Vegas capacity is onlyfive right so now it should return whatit is what an overflow condition we havediscussed what is under flow conditionnow here this is what overflow conditionif this dope is pointing to this maximumsize minus one the index is for maximumsize is five in that case it wouldreturn overflow condition you cannotinsert any data in the stack becausestack is full so this is what overflowcondition and now here if you will callis full function means it will returntrue if the stack is full and now thecondition is status full so it wouldreturn at this time is full functionwould return true right and when thereis nothing in the stack suppose we havepopped out all the data and after thatwe call is empty in that case it wouldreturn true because stack is empty howyou are going to code these function wewill see what so now what are theapplications of stack see the very basicapplication is if you want to reverse astring or in reverse a word then we willuse stack that is very simple suppose Iwant to reverse I have a string ABC andD so I want to reverse this I want toprint a DC B and a so simply what I cando I can push this into stack first ofall ABC and D and then pop out first ofall D would be popped out then C then Bthen e this is what we have reversed tothe string second application is forundo mechanism in text editor I guesseverybody have used this undo mechanismsuppose you have written something Ihave written ABCDE right in the texteditor in text editor andyou press ctrl-z the shortcut key forundo then you would be deleted then Dwould be deleted then C then B then athis mechanism is performed using stepin your text editors right thirdapplication maybe you can use it inrecursion or you can say in functioncall when you are going to call afunction then obviously something wouldbe returned some value would be returnlike and recursion means it is you cansay a chain or function call a functionis calling itself again and again rightso whenever that function would returnsomething then that values would bestored in stack how actually recursionwill work that also we will discuss whenwe will discuss recursion fourth may beto check the balance of the parenthesesparentheses means like this the compileruse stab for verifying the balance ofthe parentheses means for each openingparenthesis there is proper closingparenthesis at right place right supposehere is opening again here I have openedagain here I hope open so it means thereshould be three closing brackets rightso this balance would be checked usingstep this thing also we will discuss indetail right fourth application may bein fix to postfix or prefix conversionwhen you are going to convert theseexpressions from infix to postfix or infix to prefix in that case also startingto be used that thing also will discussentity right and as well as in manyalgorithm stack data structure is usedyou can say in topological sorting inDFS we are using staff in Tower of Hanoiproblem also we are going to use staffin tray traverser also we will use stepright so there are many applications ofstaff and sixth you can say for theevaluation of postfix expression we willuse step right that is also we'lldiscuss all the application we willdiscuss in detail this is just anintroductory video of this tag to getyou familiar with stack the logicalrepresentation of star how actually weare going to implement stack how we areactually going to code these operationswe will discuss in nextyou fine so I'll see in the next videotill then bye-bye take hi everyone welcome to nourishtechnologies this is cinemas so in thissession we are going to discuss about astack data structure what is a stockmeans this is an algorithm right sonothing but this is one abstract datatype or set of rules so what is the useof stack means just to store theinformation in some of the situations ifyou follow the rules of a stack so wecan access the information effectivelyso what are the applications and wherewe are using stack exactly so that wewill see later so first here now we willdiscuss so what is the stack and how toimplement a stack and finally we willdiscuss applications of a stack okay sofirst one so what is a stack means asimple and algorithm that works based ona rule called last in first out we cancall it as a leaf oh so based on a lastin first out rule a stack works so whatyou inserted last into the memory thatwill come out firstit is a simple rule so one best examplewhere we are placing the series sadistand so we are inserting right the seedis right so then the CD will move likethis and here it is this is a CD andthis is a next CD and this is a thirdstate see you inserted first secondthird so this is inserting so if youwant to pick out one CD from the CDstand then the third one will come firstit will come first so this is justdeleting or collecting the informationand this is inserting the information soa stack algorithm so we'll run a basedon the rule last in first out right howthe insertions and how the deletionsright every data structure right orright every stack should have aparticular amount of memory blockinitially so we can call it as acapacity of stack so what is thecapacities and how we will decide rightso either using dynamic memoryallocation we can decide or we can use astatic memory allocation also so firstwe will see a static memory allocationis nothing but a constant memoryallocation so what we will use in astatic memory allocation simply we areusing the concept of array we are usingthe concept of array so how see forexample how we are declaring an arraymeans in a our are the size is a 5 5 sowhenever we declare variable like thisit gets a memory allocation a block tostore five elements at some locationsuppose two zero four six two zero foureight five zero five two and five fourso this is memory allocation so now Iwant to implement a stack and of coursewrite a stack implementation also withthe help of arrays only arrays conceptjust rotate this memory allocation so byminus 90 degrees minus 90 observeinteger type elements we are storingwrite the name is a stack and of courseit is array only but the approach isdifferent stacked here it is thecapacity capacity suppose initialcapacity we are giving like this thesame memory allocation we are writing indifferent ways so this is now one twothree four five this is a base addressto zero four six two zero four eight twozero five zero two zero five two twozero five four here base address of theblock who will hold the array variableARR holds the base address of the blockto collect the information of the memoryblock in the same waya stack variable is an array variable isholding the base address of the block 20 4 6 2 0 4 6 this is what we calledstatic memory allocation how we canallocate the memory right to a stack isa fixed memory fixed memory so forexample if you want to implement a stackdynamically then we should use theconcept of we should use the concept ofwrite a malloc functionCal log function real log function andfree function we already discussed thedynamic memory allocation concept in a Clanguage right so now here it is forarrays so what are the functions we areusing in a steady Li B dot H means acatalog function and next one real logfunction so what is the use of a catalogfunction we can allocate the memorydynamically of course but with a fixedsize we cannot change if you want toincrease or decrease the size of arrayor size of memory block we should go fora real log function we should go forreal log function very simple how toallocate the memory observeso how to allocate the memorydynamically to stack so first we aredeclaring integer pointer variable butthe variable name is a stack stack in astatic memory allocation we are usingarray with of exercise but now here itis a pointer so only a stack get memoryallocation at some location at somelocation now it is ready to accept oneinteger array nothing but a memory blockaddress it is ready to hold how we areallocating the memory to this one how sothat is using a catalog function so whatis the size nothing but what is thecapacity capacity we have to pass seefor example the capacity is a 5 capacityequals to 5 capacity we are passing andnext one what is the size of eachelement that we are going to store inthe stack sizeof integer so that we arecollecting what catalog function will doa capacity into sizeof integercapacity is a 5 sizeof integer is a 2 isnothing but 10 bytes memory it willallocate a block 10 bytes memory it willallocate and the base address suppose 20 4 6 we should collect into stacks sothat it start pointing to this 1 here itis a stack we are collecting thatinformation into variable stack butstack is of type 1 is an integer pointertype but catalog function return type isa wide pointer we know that catalogfunction returns wide pointer this iswhat we called generic pointer this isalready we discussed clearly what is theprototype of a catalog function rightwhy it is returning wide pointer how totypecast a pointer all these thingsalready we discussed in a dynamic memoryallocation conexcept of a C language right so once gothrough that how memory will beallocated using a catalog function thisis just allocating a memory to thisstack with a fixed size here initialcapacity is a 5 so if I want to storethe sixth element then what will happenthen we should go for a real logfunction for that we have to write thelogic how to write the logic and allwe'll see okay so for simply this ismemory allocation dynamically to thestack right so we can implement a stackdata structure algorithm in two wayseither by using a static memoryallocation concept or by using dynamicmemory allocation concept static memoryallocation concept means we are usingarrays dynamic memory allocation conceptmeans we are using write the CL logfunction and real log function of coursewith the help of a pointers concept okayso this is just only creation answerwhat are the operations we can performright on a stack so once a stack isready once stack has been created sowhat are the operations we can performon a stack data what are the stackoperations what are the stack operationsso first one first one so creation of astack creation either dynamically orwith the static memory allocation secondone we can push the elements into thestack right we can push the elementsright so what is that pushing theelement a right nothing but insertion ofelements according to that algorithm soright as some of the words a terminologywe should understand but here it iswhenever we are calling push functionso whatever the element you want toinsert that we are passing suppose astack is an integer stackthat element we should pass what elementyou want to push and next one third onepop third one is popper but herewhenever we are calling a pop functionno need to pass anything any argument sowhy what is the reason because right inthis from the stack if you want to popany element it is always try to access alast element right so what you insert atthe element last so that will come outfirst the last element what is the topof the stack that will be collected thatwill be collected and next one fourthone Traverse function so what is aTraverse function just displaying allthe elements of the stack displaying allthe elements of the stack is nothing butTraverse function so these are the mainfunctions we are using in theimplementation of a stack so some morefunctions these are optional and anywaywe are implementing at the time of astack implementation is empty or not ifstack is empty or it contains elementsor not and next one sixth one is full ornot is full and next sixth onesohow seventh one how many elements arethere so what is the length of the stackI think but simply we can call it as asize also more clearly so what is thesize of the stack how many elements arepresent how many elements are present inthe stack so these many things so we areimplementing these many types right soimplementation of all these functionsjust writing logic for all thesefunctions is nothing but a stackimplementation once you implement allthese things then a stack is ready withthe help of that stack then we can storethe informationeffectively into every program intoevery programming application so that wecan process the information effectivelyso first for example so we are creatingthe stack with a size 5 we are creatingthe stack creating either if you want topush the elements or if you want to popthe elements that is possible only fromthe top of the stack any operation youcan perform with the help of element topelement only from the top only either weare inserting or deleting the elementsnothing but we will push or we will popso first of all for example here so weare calling push of element 10 so thenthe stack will be like this right itwill go like this from the top it willstay here and next if you want to push20 20 then this is the stack 10 nextelement here 20 and remaining nothingand next for example here so we justwant to pop pop means so which elementwill be popular the last in first out isa 20 will be deleted so then in thestack only 10 will be present 20 willpop willpower next for example here itis we are pushing 30just push 40 push 50 50 then a stackwill be like this 10 30 40 50 and nextfor example if you want to perform a popoperation so thenthen here it is at ten thirty forty hereit is fifty will come out it will pop sowhat you inserted last so that will comeout first so if you insert a fiveelements we cannot insert the sixthelement right in a static memoryallocation of course in a dynamic memoryallocations we will increase with thehelp of real log function and we areinserting anyway so these are justoperations on a stack how we areinserting the elements how we aredeleting the elements just we areperforming push operations and popoperations all these operations we canperform with the help of a variablecalled top because we should perform allthe operations on the stack from the toponly either you want to push or you wantto pop the elements okay soimplementation how to write the logic ofall these things all these functionsright so we will see in the next sessionright so for more videos so please login to nourish idea channel thank you Yeah right we have discussed few datastructures like array and Ling lists howdata is stored in array what are thedifferent operations on array what islinked list or what are the differentoperations on linked list how data isstored in linked list right and now wewill see what is the stack datastructure so you can see it is a lineardata structure fine and seen array whatis their random access as possible youcan directly access any data in aconstant time in linked list what onlysequential access is possible rightwhat about stuck in stack only you cansay limited access is possible right oryou can say it is a ordered list what isthat it is an ordered list or you cansay it is a collection or you can say itis a container which is going to followa rule for insertion and deletion of thedata right and what is that rule or whatis that restriction you can say or whatis that principle right which that stackdata structure follow so that rule isinsertion and deletion is possible onlyfrom one end right this is applied onboth insertion and deletion insertionand deletion is possible from only oneend like you can take a real lifeexample suppose you have a CD standright like this you are going to put CDshere first CD then second third fourthfifth obviously like this you are goingto put suppose you want to insertanother CD in that case you have onlyone way to insert CD from the top onlyyou cannot insert CD here from thebottom you cannot insert from the leftor right the only way is from the toponly you can insert that CD right secondK says if you want to take out a CD fromthis series stand then what you will doonly one option you can take out fromthe top right suppose you want to takeoutin this city the first CD right so youdon't have any option the only option isfirst of all you will have to take outall the CDs which are placed above thisCD after that only you can take out thisCD right that is the restrictions oninsertion and deletion in stock fine soin this video we will see how logicallyyou are going to represent a stack whatare the introduction introductory partof stack some basic operations on stackwhat what are the meaning of thoseoperations as well as some applicationsof stack in next video we will see howto implement a stack right using arraysas well as using link inst so now likethis if you map this real-life stackobviously this is what a stack only oryou can say a stack of plates right oneplate is you have put one plate here ifyou want to play a place another platethen you will put on this plate thenthird and fourth and fifth like this youare going to place if you want to removea plate then first plate you will takeout first right so the principle is whatlast in first out you can say right thisis the last plate or you can say this isthe last CD you have put in the CD standand the last CD would be the first onethat you can take out so last in firstout leaf oh so the rule on which thisstack data structure works is what leavefor last in first out or you can sayfirst in last out this CD was first inbut if you want to take out this CD thenthis would be the last one you can takeout because for for taking out this CDoutside of the series 10 you how to takeout all the above CDs first of all rightso first any last out and if you willmap this real-life example of stack inthis with this stack then you can saythe logical representdatian of the stack is what we representstack something like this like this thisis what a stack you will represent thisit is a container which has only oneopen end you can insert data from hereyou can delete a data from here rightthere is no other way this is what astack logical representation of stuffthis is not actual representation ofstack right that we will discuss inlater we use rightand in stab insertion operation when youwill insert some data understand thatoperation is known as push right anddeletion operation is known as pop sotwo fundamental operations are there onthe stack one is push one is pop pushmeans inserting or putting a data intothe strap pop means taking out ordeleting the topmost data from the stackright two fundamental operations manymore operations are also there that ifyou are we will also discuss now seethis is the only and from where you aregoing to push and pop the data right sothis is known as top top of the steprightyou can insert a data and you can deletedata from top of the stack that end isknown as top from where you can insertyou can push and pop data right so nowwe will see some operations that areperformed on star data structure seefirst is push and in bracket you willwrite down that a data you want toinsert into stack C stack is what it isa collection of similar data type onlyit's not like that this is stack andhere the first data is suppose integerand after that I'm inserting a characterafter that again I am inserting to knowyou can only insert the data of similardata type either in teaser all the datashould be integer or character or floatsomething like this right see pushsecond operation is pop operationright here they don't pass any argumenthere why so because pop means always thetopmost element would be popped out fromthe step right so no need to passanything in this function these are twofundamental operation third operationmay be peak operation or somewhere it isalso known as top operation it meanswhat it is going to return the topmostelement of the stack without removingthat element from the stack see Bob willreturn the topmost element from thestack as well as it will remove thatelement from the stack see suppose thisis what I have stack and in this I havedata type 1 I have data 1 2 & 3 if youwrite down pop it means it will remove 3from the stack now this is the stepright and if on this stack you willperform peak operation or top operationit means it will return 3 but it willnot remove this from the step this isthe difference right fourth operationmay be is empty means it will true ifthe stack is empty there is known datain the list just in the stack rightotherwise it will return false sakeanother may be is full so this functionwill return true if this stack is fullotherwise it will return false see theseare not the only operation you canperform there are many more operationyou can perform on stack like you cannotperform search operation reverseoperation you can find out that minimumelement from the stack maximum valueelement from the stack right bad thingalso we will discuss in a later videosright these are some fundamentaloperations you can perform one stackfine now we will see the logicalrepresentation of stack as well as weare going to perform these operationsright so this is how we logicallyrepresent the step right not actually inthe memory this is just a logicalrepresentation right for yourunderstanding purpose nowobviously you want do you want to pushsome data in the stack right so you needto know the capacity of the stack or youcan say the size of the stack so youneed to allocate some memory to thestack right and how to fix that size howyou will get to know the size of thestack you can allocate the memory eitherusing static memory allocation ordynamic memory allocation there are twoways to implement stack static memoryallocation and dynamically you canimplement step static means using arraysyou can implement stack write dynamicmeans using linked lists you canimplement stack so these implementationswe will see in the next video with theproper with the help of an example pluscode right so now suppose I have takenthe size of the stack as 5 means thestack can store only five elementseither using by static memory locationor dynamic memory allocation right thatthing in detail we will discuss in nextvideo see suppose the capacity is here 5so you can insert here 5 elements onlyfineat starting at starting top is what topis equal to minus 1 fine 5 means you cansay you can insert 5 elements the indexwould be 0 first of all then 1 then 2then 3 then 4 from 0 to 4 right so here5 elements I can store this is thecapacity of the stack at starting top isminus 1 right minus 1 means somewherehere minus 1 hypothetically we assumethat here we have minus 1 index rightnow suppose in the empty stack you callthis pop operation what would happen popmeans the topmost element would beremoved but here we don't have anythingstack is empty in this case it is whatunder flow condition it will return whatthe stack is empty so this is what anunder flow condition you can say rightandnow suppose I'm calling push to writeactually implementation or loose also wewill see how to write down the code forpush and pop right here I am just givingyou the brief introduction push 2 minshere from the top one you will insertthis 2 right we have only one end sofirst of all what would happen top is -1so we will increment this top first ofall top plus plus it means top becomes 0now now here we have top and now youwill insert this to write again if youwill call push 3 again first of all topplus plusright now table becomes this one top ispointing to this one 1 and now you willinsert 3 here in the stack fine if youcall pop no need to pass any argumenthere why so because only the topmostelement would be removed from the stackyou cannot write here pop 2 means if youwant to remove this 2 you cannot see pop2 and this 2 would be removed no alwaysthis element would be removed right sopop 3 pop means the 3 would be removedfrom the stack and now see right now wewill do top minus minus means now againtop is 0Oh second again if you do pop in thatcase again though would be removed fromthe list or simply you can do top minusminus means top is now minus 1 right andif you will not remove this if you willnot take out this from the stack that isalso fine because this is now a garbagewe do not care what garbage value isthere in the stack because after that ifyou will again call push for then firstof all top plus plus means now topbecomes 0 minus 1 to 0here we will this too would beoverwritten and herefor would be storedright this thing also will discuss howto code push and pop operation fine nowsuppose I am going to push four timesone five six and seven one five six andseven again I am calling push eight nowthe stack is full Vegas capacity is onlyfive right so now it should return whatit is what an overflow condition we havediscussed what is under flow conditionnow here this is what overflow conditionif this dope is pointing to this maximumsize minus one the index is for maximumsize is five in that case it wouldreturn overflow condition you cannotinsert any data in the stack becausestack is full so this is what overflowcondition and now here if you will callis full function means it will returntrue if the stack is full and now thecondition is status full so it wouldreturn at this time is full functionwould return true right and when thereis nothing in the stack suppose we havepopped out all the data and after thatwe call is empty in that case it wouldreturn true because stack is empty howyou are going to code these function wewill see what so now what are theapplications of stack see the very basicapplication is if you want to reverse astring or in reverse a word then we willuse stack that is very simple suppose Iwant to reverse I have a string ABC andD so I want to reverse this I want toprint a DC B and a so simply what I cando I can push this into stack first ofall ABC and D and then pop out first ofall D would be popped out then C then Bthen e this is what we have reversed tothe string second application is forundo mechanism in text editor I guesseverybody have used this undo mechanismsuppose you have written something Ihave written ABCDE right in the texteditor in text editor andyou press ctrl-z the shortcut key forundo then you would be deleted then Dwould be deleted then C then B then athis mechanism is performed using stepin your text editors right thirdapplication maybe you can use it inrecursion or you can say in functioncall when you are going to call afunction then obviously something wouldbe returned some value would be returnlike and recursion means it is you cansay a chain or function call a functionis calling itself again and again rightso whenever that function would returnsomething then that values would bestored in stack how actually recursionwill work that also we will discuss whenwe will discuss recursion fourth may beto check the balance of the parenthesesparentheses means like this the compileruse stab for verifying the balance ofthe parentheses means for each openingparenthesis there is proper closingparenthesis at right place right supposehere is opening again here I have openedagain here I hope open so it means thereshould be three closing brackets rightso this balance would be checked usingstep this thing also we will discuss indetail right fourth application may bein fix to postfix or prefix conversionwhen you are going to convert theseexpressions from infix to postfix or infix to prefix in that case also startingto be used that thing also will discussentity right and as well as in manyalgorithm stack data structure is usedyou can say in topological sorting inDFS we are using staff in Tower of Hanoiproblem also we are going to use staffin tray traverser also we will use stepright so there are many applications ofstaff and sixth you can say for theevaluation of postfix expression we willuse step right that is also we'lldiscuss all the application we willdiscuss in detail this is just anintroductory video of this tag to getyou familiar with stack the logicalrepresentation of star how actually weare going to implement stack how we areactually going to code these operationswe will discuss in nextyou fine so I'll see in the next videotill then bye-bye take ♪♪♪♪ I DON'T WANNA BE BROKE WHEN I D-I-E ♪♪ WANNA BE LIVIN' IT UP IN VIP ♪♪ TRYNA GET IN THE CLUB, THEY WANNA SEE ID ♪♪ WANT ME TO WEAR NICE SHOES AND A T-I-E ♪♪ I'VE BEEN WORKIN' AND GETTIN' BY ♪♪ BUT THAT AIN'T ENOUGH TO SATISFY ♪♪ 'CAUSE I GOT DREAMS FOR YOU AND I ♪♪ SO I GOT MONEY ON MY MIND ♪♪ SO IF YOU WANNA STACK IT UP, MAN, YOU GOTTA WORK FOR IT ♪♪ I-I-I-I-I-I ♪♪ AIN'T NOBODY GONNA BE DOIN' IT FOR YA ♪♪ I-I-I-I-I ♪♪ I GOT DREAMS AND I GOT TIME ♪♪ BUT THAT AIN'T ENOUGH TO GET ME BY ♪♪ SO I STACK IT UP, MAN, I GOTTA WORK FOR IT ♪♪ YEAH, I GOT MONEY ON MY MIND ♪♪ I-I, I-I ♪♪ I GOT MONEY ON MY MIND ♪♪ I-I, I-I ♪♪ I WANNA FLEX HARD LIKE D-O-E ♪♪ BUT RIGHT NOW MY CAR NEED THE M-O-T ♪♪ AND I CAN'T GIVE THE VALET NO T-I-P ♪♪ BUT LIKE HIM, I GOT DREAMS AND THEY'RE B-I-G ♪♪ TRIED TO BE A BETTER GUY ♪♪ BUT THAT BREAD ENOUGH TO SATISFY ♪♪ I GOT DREAMS FOR YOU AND I ♪♪ I GOT MONEY ON MY MIND ♪♪ SO IF YOU WANNA STACK IT UP, MAN, YOU GOTTA WORK FOR IT ♪♪ I-I-I-I-I-I ♪♪ AIN'T NOBODY GONNA BE DOIN' IT FOR YA ♪♪ I-I-I-I-I ♪♪ I GOT DREAMS AND I GOT TIME ♪♪ BUT THAT AIN'T ENOUGH TO GET ME BY ♪♪ SO I STACK IT UP, MAN, I GOTTA WORK FOR IT ♪♪ YEAH, I GOT MONEY ON MY MIND ♪♪ I-I, I-I ♪♪ I GOT MONEY ON MY MIND ♪♪ I-I, I-I ♪♪ ♪♪ YEAH, I KNOW SHIT DON'T COME FREE, YOU GOTTA WORK FOR IT (GOTTA WORK FOR IT) ♪♪ LAMBORGHINI URUS, BOUGHT IT WHEN I FIRST SAW IT (SKRRT, WHEN I FIRST SAW IT) ♪♪ SHE CAUGHT ME CREEPIN', I HAD TO BUY HER A PURSE FOR IT (PURSE FOR IT) ♪♪ I THINK IF I AIN'T HAVE MONEY, I'D BE THE WORST FOR HER ♪♪ AND IF I AIN'T HAVE MONEY, I WOULDA BEEN LOST HER ♪♪ THE LOUDEST ONES WAS THE BROKEST, I WAS A SHIT-TALKER ♪♪ THE LOUDEST ONES WAS THE BROKEST AND I WAS STRUGGLIN' (UH) ♪♪ GIRLS CALLED ME FRIEND, NOW THEY ON ME, THAT MONEY COMIN' IN (THAT MONEY COMIN' IN) ♪♪ SAINT LAURENT FIEND, I PUT IT IN LOUIS LUGGAGES (YEAH, YEAH) ♪♪ TOOK HER TO CELINE, BOUGHT HER A COUPLE LUGGAGES ♪♪ WASN'T ALWAYS SWEET, CAPRI SUNS FOR FIFTY CENTS (YEAH) ♪♪ NOW I JUST HATE TO REMINISCE (TO REMINISCE) ♪♪ SO IF YOU WANNA STACK IT UP, MAN, YOU GOTTA WORK FOR IT ♪♪ I-I-I-I-I-I ♪♪ AIN'T NOBODY GONNA BE DOIN' IT FOR YA ♪♪ I-I-I-I-I ♪♪ I GOT DREAMS AND I GOT TIME ♪♪ BUT THAT AIN'T ENOUGH TO GET ME BY ♪♪ SO I STACK IT UP, MAN, I GOTTA WORK FOR IT ♪♪ YEAH, I GOT MONEY ON MY MIND ♪♪ I-I, I-I ♪♪ I GOT MONEY ON MY MIND ♪♪ I-I, I-I ♪♪ I GOT MONEY ON MY MIND ♪ In this lesson we're going to introduce you to stack data structure.Data structures, as we know, are ways to store and organize data in computers.So far, in the series we have discussed some of the data structures.We have talked about arrays and linked lists.Now in this lesson we are going to talk about stacks and we are going to talkaboutstack as abstract data type orADT. When we talk about a data structure asabstract data type, we talk only about the featuresor operations available with the data structure.We do not go into implementation details. So basically we define the datastructured only as a mathematical or logical model.We'll go into implementation of stack in later lessons.In this lesson, we're going to talk only about stackADT. So we are only going to have a look at the logical viewof stack. Stack as a data structure in computer science is not very differentfrom stack as a way of organizing objects,in real world. Here are some examples of stack from real world:First figure is of a stack of dinner plates.Second figure is of a mathematical puzzle, calledtower of hanoi, where we have three rods or three pegs and multiple disksand the game is about moving a stack of discs,from one peg to another with this constraint that,a disc can not go on top of a smaller disc.Third figure is of a pack of Tennis balls.Stack basically is a collection with this property, thatan item in the stack must be inserted or removed,from the same end that we call the top of stack.In fact this is not just a property, this is a constraint or restriction.Only the top of a stack is accessible and any item has to be insertedor removed from the top. A stack is also called'last in first out' collection. Mostrecently added item in a stack has to go out first.In the first example, you will always pick up adinner plate from top of the stack and if you will have to puta plate back into the stack, you will always put it back ontop of the stack. You can argue, that I can slip out a platefrom in between without actually removing the plates on the top.So the constraint that I should take out a plate always from the topis not strictly enforced. For the sake of argument,this is fine. You can say this. In other two examples where we havediscs in a pag, and tennis balls in thisbox that can open only from one side, there is no way you can take out an itemfrom in between.Any insertion of removal has to happen fromtop.You can not slip out an item from in between. You can take out an item,but for that you will have to remove all the items on top of that item.Let's now formally define stack as an abstract data tape.A stack is a list or collection with the restriction that insertionand deletion can be performed only from oneend, that we call the top of stack. Let's now define the interface or operationsavailable withstack ADT. There are two fundamental operations available with a stack.An insertion is called a 'push' operation.'push' operation can insert or push some item'X' onto the stack. Another operation, second operation iscalled 'pop'. 'pop' is removing themost recent item from the stack, most recent element from the stack.'push' and 'pop' are the fundamental operations andthere can be few more. Typically there is one operation called'top', that simply returns the element at top of the stack.And there can be an operation to check wheathera stack is empty or not. So this operation willreturn true if the stack is empty, false otherwise.So 'push' is inserting an element on top of stackand 'pop' is removing an element from top of stack.We can 'push' or 'pop' only one element at a time.All these operations that have written here can be performedin constant time, or in other words their time complexityis O(1). Rememberan element that is pushed or inserted last on to a stack,is popped or removed first. So stack is called'last in first out' structure, what goes in last comes out first.'last in first out', in short is called 'LIFO'.Logically a stack is represented something like this:As a three sided figure, as a containeropen from one side. This is representation of anempty stack. Let's name this stack 's'. Let's say this figureis representing a stack of integers.Right now the stack is empty. I will perform push and pop operationsto insert and remove integers from the stack.I will first write down the operations here and then show youwhat will happen in the logical representation. Let's first performa 'push'. I want to 'push' number 2 on to the stack.The stack is empty right now, so we can not'pop' anything. After the 'push', stack will look something like this:There is only one integer in the stack, so of courseits on 'top'. Let's 'push' another integer.This time, I want to 'push' number 10.And now lets say we want to performa 'pop'. The integer at 'top' right now is10. With a 'pop', it will be removed from the stack.Let's do few more 'push'. I just pushed 7 and 5 onto the stack.At this stage, if I will call 'top' operation,it will return me number 5. 'IsEmpty'will return me false. At this stage,a 'pop' will remove 5 from the stack.As you can see the element, the integer which is coming last,is going out first, That's why we call stack 'last in first out' data structure.We can 'pop' till the stack gets empty.One more 'pop', and stack will be empty.So this pretty much is stack data structure. Now one obvious question canbewhat are the real scenarios where stackhelps us. Let's list down some of the applications of stack.Stack data structure is used for execution of function calls in a program.We have talked about this quite a bit in our lessons on dynamic memory allocationand linked lists.We can also say that stack is used for recursion, becauserecursion is also a chain of function calls. It's just that,all the calls are to the same function. To know more about this application, youcancheck the description of this video, for a link to 'MyCodeSchool'lesson on dynamic memory allocation.Another application of stack is we can use itto implement undo operation,in an editor. We can perform undo operation inany text editor or image editor. Right now, I'm pressing 'Ctrl Z',and as you can see some of the text that I have written, is getting cleared.You can implement this using a stack.Stack is used in a number of important algorithms,like for example a compiler verifies whetherparentheses in a source code are balanced or notusing Stack data structure. Corresponding toeach opening curly brace or opening parentheses in a source code, theremust bea closing parentheses at appropriate position.And if parentheses in a source code are not put properly, if they're not balanced,compiler should throw error and this check can be performed using a stack.We will discuss some of these problems in detail in coming lessons.This much is good for an introduction. In our next lesson we will discussimplementation of stack. This is it for this lesson.Thanks for watching!! hi students welcome back coming to thenext topic in the subject datastructures were stacks so stacked is oneof the important topic for storing thedata in memory a stack is an orderedcollection of homogeneous detail meanswhere the insertion and deletion takesplace at one end that is at the top andso we are just arranging the elements ina stack ok so this is the stack we arearranging the elements in a stack sothat the insertion and the deletiontakes place only at one and that is atall so if you want to delete the elementyou have to delete the topmost elementif you want to insert the element youhave to put it on the top of this stackso that is a definition of stack a stackis an ordered collection of homogeneousdata elements the stack is also calledas last in first out leaf oh whateverthe last you have put that has to betaken out first so that's what we callit as a leaf Oh last in first outit means the element which is insertedlast must be deleted first so that isthe meaning of leaf or the element whichis inserted last must be deleted firstthe examples for the stack or number ofplates in cafeteria so if you takewhatever the plates suppose in your homeyou are just arrange the plates okay ifyou are into the plates if you want toremove the take the plate work whichplate you will take the topmost plateyou will take after the next plate afterthat the next plate like this so this isa way of arranging the plates in a stackso in the same way in the memory also weare storing the data in the form ofstack okay you can arrange the data inthe form of stack and the anotherexample is stack of coins so justplacing the coins whenever the otheryour just a stack of coins so how youare going to take the coins thealmost coin you will take okay if youwant to put new coin you put it on thetop most so these are the examples ofthe stack number of plates that theyarranged in the cafeteria and this stackof coins now let us see what are thebasic operations that we can perform onthis time the basic cooperation swordinsertion deletion display so these arethe basic operation that we can performon this stack insertion means justputting the data on to the stackdeletion taking the data out of thistype display so whatever the data thatis present on the stack that you have tobe displayed so these are the basicoperations that we can perform on thestack so for insertion we use theterminology like push push means it'snothing but inserting we are pushing thethings means inserting the things oradding the elements into the stack itplaces an object on the top of thisstack so whenever we have seen the pushcommandit means the objects were placed on thetop of this stack pushing means justadding or inserting whereas pop meansdeleting or removing the terminologythat we used for deleting a delete anelement from the stack is a pop pop isdeleting or removing elements from thestack and it removes an object from thetop of this tab so removes object fromtop of this tank so that's why I call itas a leaf oh so place the object on topof stack and removes the object from topof this type and another operation thatwe can perform in the stack is a willcheck is empty is empty means it's justreports whether the stack is empty ornot and easeful it reports whether thestack exceeds limit or not meanswhenever the stack is full it checkswhether it is full or not so here youcan see the basic operations let's saythis is a stack okay it's just a memorylocation tag so first if you want to inpush an element that is I insert anelement ontostack you have to use push s comma a sis nothing but a stack in the stack weare placing element after that you wantto suppose the stack and is consistingof three elements so this here the stackwas full you are trying to push anotherelement if you want to push D element onto the stack so here it is there is noplace in the stack already the stack isfull so it indicates the stack overflowthe terminology you use if whenever thestack is full you call it as a stackoverflowwhenever you are trying to push anelement into the stack when the stack isfull that stack will be overflow and popmeans pop stack means just whatever thetop element that is there that ispopular that is removed so no need tomention which element you want to bepopped by default the topmost elementwill be palpable so that's why we hadwritten the syntax as pop stack okaysuppose the stack is empty still youwant you are trying to pop the elementson the stack but there is no elements onthe stack then it leads to stackunderflow stack underflow means wheneveryou are trying to remove the elementwhen which are not present in the stackor the if the stack is empty you aretrying to use the function Pau then itindicates stack underflow stack overflowmeans exceeds stack stack underflowmeans there are no elements on the stackand you are trying to remove remove theelement okay so let's see a simpleexample of the stackhow we are going to push the elementsand pop the elements onto the stackelements are inserted in the order oflet us take a five elements ABCD itrepresents the stack of five elements sojust five locations will be there so thestarting the top is equal to minus onemeans we are not it is underflow minusone indicates underflow there is noelements understandso first is i want to push element ontothe stack now the top becomes zerookay next push the element be now topbecomes one push see top to push the topthree okay and push a top ii so whateverthe elements that i had taken thatelements or placed in the stack now thestack is full if you want to try to pushanother element push f there is no placein the stack so it indicates theoverflow if you try to if you try toinsert insert the element then itindicates the overflow now stack is fullif you want to delete element he has tobe deleted first so up to here we haveused operation push for inserting theelement on to the stack if you want todelete the element from the stack youhave to use the pop operation so justmentioned pop don't write any argumentshere because the pop always deliverselement whatever the element that ispresent on the top of this stack sofirst it deletes e next it's d next Clike thatso whenever the top element is deletingthe top is decrementing 3 2 1 0 minus 1so minus 1 again it indicates underflowokay so this is how the elements areinserted and deleted in the stack byusing push and pop operations thank you [Music]hello friends welcome back to ourchannel so in the previous session wehave covered the data structure conceptthat is a linked list so in that we areseeing the two operations the insertionand deletion in all the three cases sofor signaling list double interest andcircle of interest so in today's sessionlet us see about another linear datastructure stacks so first point it is alinear data structure so stack is alinear data structure so in the datastructure means all the elements arearranged in a sequential manner soelements are arranged in sequentialright then it follows the last teamfirst out mechanismit follows L I have oak leaf oak that islast in first out mechanism so here thename itself indicates whatever theelements whatever the element insertedinto that stack and last that should bethe mood first so last in first outwhatever the element is inserted at thelast that should be removed first rightlast in first on the best example forthis tank is arranging the plates in atree platesin a tree or coins arranging the coinsarranging the coins or books so what areyou clearlyanything we can consider it as anexample right so because so considerthis plates arrange the clinks so if youconsider a tray and if you startinserting the platesso the first plate will be here thefirst plate he will be here and thesecond place will be on the above thefirst plate so the second plate will beplaced on the elbow of the first abilitythird plate will be inserted here fourthgrade will be inserted here one twothree right now it take insists of fourplates so if you want to remove theplate which plate should be removedfirstthe fourth plate should be remove firstwe can't remove the first plate thefourth plate should should be removedfirst that means whatever the elementwhich is inserted last because in thesefour plates what is the element which isinserted in the last that is fourthplate for so that should be out thatmeans that element should be reportfirst so see here these it is having twooperations mainly one is push operationanother one is pop operation push andpop two operations push operation meansinserting and admit inserting an imagepop operation meansdeleting an inmate right rightinserting an element into the stackvisiting a little bit from the stackthere is oh these two operations can beapplied for stack next here both theinsertion and the deletion can beperformed on only one side that is atthe top of the stack so if you want toinsert an element to the existing stackwe have to place the element at the topof the stack and if you want to deletethe element you have to delete theelement from the top of the stackso either insertion or the division bothoperations can be performed on only asingle set that is top so we can use ittup top is it top off step so where canwe perform both push and pop operationson the top of the stack both push it popand pop operations can be performedinitially initially then if there are noelements in the stack this top is equalto minus 1 if the top is equal to minus1 initialization right initial value ofthe top so if the top is minus 1 thatimplies the stack is empty no element ispresent in the stack and if you aretrying to insert an element into thestack first we have to obtain the topand then we have to insert the imagesimilarly if you want to delete theelement from the stack you have todelete the element from the stack and ifyou have to update the top right youhave to decrement the top right so nowthis stack can be implemented in twoways all right hereso implemented in two lists what aretheyfirst one using arrays second one usinglinker this right so two ways we canimplement this stack by using the arraysand linkedlistso in today's session we will see theoperations of push and pop so these willnot change okay the only theimplementation will be change but theeverything is same for both the cases ifyou are implementing stack using arraysthe same thing will be applied if youare implementing the stack usinglinkedlistthe same things will be applied right sothe only difference is implementationpart so in the address we have we needto take the maximum number of elementsprior to the insertion or deletion rightwe need we need to take the size of theend so coming to the linked list we neednot take the size of the atom firstbecause the size of the stack becausethen we will use the dynamic memoryallocation right here we are using thestatic memory right that means beforebefore starting the stack itself beforeinserting the elemental stack itself wehave to decide the size of the stackokay then let us see the push and popoperations of stack which is implementedby using hex so hope you understood thisone right so it's a linear datastructure it follows a little format themechanism and two operations will bethere push n pop right there are twomore concepts just trying to explain andthen we will go with the operations seeso by implementing the stack we need toverify two conditions there is lowerflow condition and under flow conditionso when implementing the stack eitherusing errors or a linkedlist we made tocheck these two conditions water flowcondition and under flow condition wherethis water flow condition will occurwhen you are trying to insert an elementinto the stack already which is havingthe maximum element then this water flowwill be occurred for example insteadconsists of finally means five elementsif you have time to insert sixth elementif you are trying to insert sixthelement into the stack which can holdonly five elements then this overflowcondition will be occurred right thatmeans this will be used in pushoperation this will be used in pushoperation that means we need to checkthe condition while performing the pushoperation so inserting an element to thestack which is alreadyhaving maximum inmates so this occurswhen we are inserting an element to thestack which is already having themaximum elements then I am a flowcondition and a flow condition means thereverse that means if you are trying todelete an element from the empty stackso there is there are no elements in thestack but still you are supposed toremove an element from the stack rightso then this condition will be occurredthat meansdeleting an element from the stackfrom the empty step simply we can writefrom the young P step then automaticallythis condition will be occurred underflow so that means this condition is tobe check that form operation in the pushoperation we have to check this one andthe form operation will have to checkthis one right now let us go with thedirect functions push and pop right soimplementation of a stackusing Harris so we will go with theHarris right so in this we need to givethe size of the stack before startingthe insertion right so static memoryallocation so we need to give the sizeof the let it be 10 face maximum 10elements can be inserted and initiallythe power is equal to minus 1 that meanslet us take here right so let usconsider here au is equal to minus 1 socoming to the push push operation firstwe need to breathe element because thisis a insertion push mix insertion soread an element so scanf % HD that isreally a numerator element right so weare reading an element so we need toinsert this element into the step so weneed to declare the stack also we needto declare stack on source tap it's anarea it's an array of size M stack is anarray of size iam 10 so in the pushoperation we need to check the overflowconditionso if top is equal to is equal to sizeminus 1 so here pop is equal to minus 1initially before inserting arrangementsize is 10 so sizes 10 means the indexvalues will be from 0 to 9 that meanssize minus 1 so for every insertion weneed to update the top of the step so ifthe top of the stack is equal to sizeminus 1 that that implies the completeelements are inserted into the stack thestack is full so if this condition istrue we can print lower float or simplywe can print stack is full yes yes yesthat means if this condition is filledthat means there is a vacancy in thestack to hold the amenthen we need to increment the top firstbecause initially top is minus 1 andafter inserting the element out will beat 0 so first we have to update the topso top press press so we need to updatethe top so then the top will be updatedto the next position then we have toinsert the element and the position sohere if you let us take the position upplus plus pump is equal to 0 so here itis top is equal to 0 now we need tostore the element in this position sothen stack off top is equal to any mainstack of top let my stack of 0 is equaltreatment so let it be 10 the 10 will beinserted here right so close the bracesso this is a simple push operationcoming to the second iteration right soagain if you if you apply this pushoperation again it will read an elementit will be 20 pump is equal to sizeminus 1 top is 0 is equal to is equal tolinefails again power plus plus no top isequal to 1 right stack of top stack of 1is equal to 20 so 20 will be insertedhere again if you again called the pushoperation 30so Tom means 1 1 is equal to is equal to9 again falseso again else condition a plus plusinitially now drop is equal to 1 powerplus plus means out is equal to 2 soobviously top stack of 2 is equal toelement 30 so 30 will be inserted hereok so you understood this one right soinitially first we have to check thepower flow condition if it varies thenwe have to increment the top and then wehave to insert the element into thestack and the only disadvantage of thisimplementation is before starting theimplementation we need to specify thesize of the stack so beyond that size anelement cannot be inserted into thestand that is the main topic ofimplementing the stacks using errorsright so coming to the linked list thenwe will use the dynamic memoryallocation so there is no restriction tothe size of the step right now so hopeyou understood this push operation nowwe will move with the pop operation seeafter insertion inserting the elementsthe pop is I send you to to write noprovision or piece deleting element sobefore deleting we need to check theunder flow condition that means whetherwe are supposed to trying to delete theelement from the empty stack or not sofor that we need to check the under flowcondition so if is equal to is equal tominus 1 so obviouslyif you are not inserting any elementthen the top is always initialized tominus one if you insert an elementautomatically the top must be getupdated so top will not be equal tominus 1 right so if a physical is equalto minus 1 we can say that pre thereunderflow on a phone so if it fails ifit fails that means else condition if itfails then we have to remove the elementwhich is available at the top right sohere we have to remove the 13 we cannotremove the 20 and 10 until you removethat 4:30 right so that's why yes whatis the element to be removed so elementis equal to stack off oh that means herethe element removing element is stack ofdoubt that will take off to step of twomeans thank you so that angle will beremoved and after removing the elementthey start to should be updated so top -- so automaticallytom is referred to he after applyingthis pop operation out will be 1 rightthat's all this is a simple popoperation oka simple pop operation again no tom isequal to 1 again repeat if you want toagain remove the pop I mean if you againapply the power operation then F isequal to minus 1 1 is equal to is equalto minus 1 false so else element is 1stack of 120 in the second thing if youwant to again apply this pop operation20 element will be deleted I thought - -no it will be 0 at 0 again if you applythis town if you call this pop operationnext do is you put is equal to minus 1again it is false so individualzero so event is equal to 10 and the top- - so it will be minus 1 nowautomatically the elements of the stackis see after playing the pot 3 times thetop is equal to minus 1 again if you areapplying the top I mean pop operationthe pop is equal to minus 1 that isminus 1 is equal to is equal to minus 1it's true because there is no elementavailable in the stack so that's why itwill be printedright so hope you understood this poweroperation also simple operationsfirst you have to delete an element andthen we have to reduce the top thatmeans update that decrement the top nexthow you display the elements of a stackdisplay function we will see the displayfunction also if stack contain fourelements so f is equal to 0 1 2 3 so fis equal to 3 now are visible to 3 nowright so display function how to displaythe element surface step simple we needto check whether it is an mtech stack ornot so if not equal to minus 1 if it isnot equal to minus 1 automatically thatimplies there is it I mean there areelements available in step then use afor loop for I is equal to top thatmeans 3 I greater than or equal to 0 youknow than or equal to 0 anything top isequal to 0 I - - I - - every time wehave to be given because we areassigning I with the top element here wecan print thea print printer percentage D step off Istack off i closeyes if this condition fails not equal tominus 1 it is equal to minus we cansimply write printer we can simply writeempty SCAP empty step okay let us saylet us trace itso initially here pop is equal to 3 nownaught is equal to 3 in the firstiteration two top three top not equal tominus one right top not equal to minusone so three not equal to minus 1/2 sofar I is equal to top I is equal tothree first iteration I greater than orequal to 0 so 3 greater than or equal to0 condition 2 then stack of white it sostack off three will be drink it that is40 will be printed next I minus minus myY is equal to 2 then again 2 greaterthan or equal to 0-2 then pre stack of 2which is 30 which is 30 and n Idisappointed now I is equal to 1 1greater than or equal to 0 you need toprint stack of 1 which is funding rightnext i DQ my ID is decremented now I isequal to 0 so 0 greater than or equal to0here we are using the is equal to alsoso that's why I'm still they conditionis true so stack is stack of 0that is ten will be printed again I - -is equal to minus 1 minus 1 greater thanor equal to 0 condition chains come outfrom the and it's the display functionright so hope you understood this onesimple logic for a push operation popand display operation right so soimplementing the stack using arrays wewill be having two operations push andpop in such for insertion push operationfor deletion pop operation so whileinserting an element into the standbefore we have to check the water flowcondition and why decrementing anelement from the stack we need to checkthe overflow underflow condition rightso these three operations so let us stophere so the main drawback of usingarrays is the static memory so before wehave to declare the size of the arrayand if you want to increase the size ofthe array it's not possible in here andunless you use the dynamic memoryallocation where we implement inlinkedlist right so I hope youunderstood this one so stack and theoperations of a stack and theimplementation of a stack using handsright if you are having any doubtsregarding this session feel free to postyour thoughts in the comment section sothat definitely I will try to clarifyall your thoughts and if you reallyunderstood my sessions like my sessionsshave my sessions with your friends anddon't forget to subscribe to our channelthanks for listening thank you very much I had a very long dayBotox joke unitOh[Music][Music]fiamma rocket engine ahOh[Music][Music][Music]Oh[Music][Music]Oh[Music][Music][Music]- the aliyeva rocket on[Music]omission occurred in Vasquez in thecommunity repair of a cakey Ricardacuriousity charger vinegar on the sunnycharge of Erika[Music][Applause] Hey what do I do?What do I do?Hey what do I do,Hey what do I do,He is wearing a Rolex like a masterHe is not a man but my sheer disasterHe is wearing a Rolex like a masterHe is not a man but my sheer disasterHe came close and stood next to meThe love got me intoxicatedIt all happened for the first timeWhat do I do?With a strangerWith a strangerWith a stranger, fell in love with a stranger... Hey what do I do?His black suit and his black car... What do I do?He hunts down with his songs... What do I do?Fell in love with a stranger... Hey what do I do?What do I do?What do I do?What do I do?What do I do?What do I speak about the styleWhat do I say about the styleAbout the fragrance of Coco ChanelWhat do I speak about the styleAbout the fragrance of Coco ChanelShe hides and steals my glancesNever leaves my side at allKeeps staring on and onWhat do I do?Hot beautiful woman,One hot beautiful woman she is... What do I do?Her black suit and her black bottoms... What do I do?She tells me love you openly... What do I do?Hot beautiful woman... What do I do?This boy steals hearts with his talksYou look like a Casanova to meYou too flirt with meMind you don’t you hurt meYour sugar-coated words and your spicy talksBut immensely beautiful... Hey what do I do?With a stranger,With a stranger,Fell in love with a stranger... Hey what do I do?Her black suit and her black bottoms... What do I do?He hunts down with his songs... What do I do?She tells me love you openly... What do I do?His black suit and his black car... What do I do? youyouyouyouyouyouyouyou welcome back aliens my name is lemonready and in this video we'll talk aboutthe stack implementation using Java nowwhen you say a stack basically stack isa class inside Java so if I simply saycontrol space it belongs to a packagedJava dot util so you can use all thefeatures of a stack here but then why touse are into the class when you cancreate your own so I don't want to usethe stack class which is in build I wantto get my own class so what I will do Iwill right click here on the package Iwould say new and I want to create myown class and that class name is calleda stack so I have my own class here andhere I will create object of stack Iwould say stack nums equal to new stacknow in this stack object or the Nam'sobject I want to perform certainoperations so when I say num start pushI want to push the element I can specifyany value here if I say 15 so the firstelement should be 15 and then I can Ican push multiple elements and then Imaybe I want to pop element which istaking out Dielman from the stack ormaybe I want to fetch element so when Isay stack basically it has certainfeatures right as we discussed in theorysession we can use push or we can usepop on we can use pip so we will beusing will be working on these methodsso let's start with the first one whichis push so in if you can see in ourstack we don't have any method here solet's create certain methods so thefirst method is push now to implementpush what I will do is I will say publicwide push now since we are adding thevalue we are not expecting any value solet's say push data so we have to send adata and it will add data there so nowyou can see if I go back now you canpush the element and there is no errorbut then what you will do with the pushto make it work first of all we need tocreate and add it right so we have tocreate an array and we have to alsospecify the size of the array so let'ssay if I say we have an added here andinitially we'll take an array of 5elements so that if you can work on 5elements you can work with a number ofelements so let's say if I have thefirst one then the second one then thirdone and fourth and fifth so we have this5 with elements here index number may be0 1 2 3 & 4now if you want to add the first elementas we are doing it here we are passing15 right so that 15 will go to the go toelement 0 so it's somewhere herewe'll be having that value which is 15but then we don't have added yet so evenbefore you push the element you need tocreate that array so let's do that Iwould say int and you will say stackequal to or stack it's an arraybasically so we'll say stack equal tonilint and the size of int is 5 you canmake it dynamic you can you can take theinput from the userwhat array size you want but time andlet's specify a by by ourselves so weare we have created the adding and nowwe can push the element but koshereisewhereso we'll say okay you have when you saypush you will assign the value to theaddress location 0 okay so that makessense we can simply say 0 over hereright so we can say stack of 0 and youcan assign the value whatever code datais coming it's so easy you can thatvalue which is 15 will be assigned tothe index value 0 it is that simple buthere's a twist the twist is what if I ifI want to add one more element so if Isay in nums so if I push another elementhere will say let's I want to pass maybe8 now we are passing two elements rightwe got we got 15 and we got 8 now whatwill happen is the moment you pass 8here the 8 will be the value 8 will beassigned to 0 again with the zerothlocation that's not what we want becauseif you if you don't this code the valueof 15 will will be replaced by 8 wedon't want that I want to assign valueto 1 that means we need to count it wehave to use we to use a variable whichwill count the number and maybe I willuse a variable here which is called astop and the initial value of tablewould be let say 0 we can simply specifytop here right in stuff using 0 we cansay top ok now when the first elementgetting inserted so when you insert 15that 15 will be inserted here at this atthe top location 0 right so we got 15here now if I send 808 is also the valueof table is still 0 that means afterdoing this thing we have just you haveto simply say plus plus so every timeyou push an element you just need toincrement the value of top so that whenyou pass 8 now 8 will be assigned toindex value 1 because when you pass 8the value of top at that point is 8so yeah so that is how you push theelement in the in the stack okay nownext point would be how will you fetchthe element maybe I want to pop theelement or even before let's push allthe element and let's say I want toprint it I want to print this tag soafter pushing two or three values let mejust pushed one more we have a stack ofsize five in that let's say we have onlythree values let's say this is fifteeneight and ten I want to print the entirestack so I will say num start show so itshould show the entire stack but theproblem is we don't have show method inthese tags so let's go there and say heyI want a show method here which willprint the entire stack now personalizehow do you print the entire stack it'svery simple actually you can take a loopand ask for loop here and you can sayint n colon tack that's an array and youcan print each value and you can printthat value with a space so I will say Nand then I will print a space so thatyou know when you print all the valuethey should be separated with us with aspace sounds cool let's go back and whatdo you think will it work let's try so Iwill right-click here and we'll say runas java application and it worked hereyou see that we got fifteen eight andten and regard zero zero so yes it isworking so stack is working when you saypush but how about pop I want to removethe elements now is it simple let's tryso when I say pop I will simply saypublic now pop will also fetch the valueso it will it will remove the value fromthe stack and it will also fetch thevalue so I would say int pop and thiswill not take any parameter now how willyou fetch the value now temporary we cansay int data is equal to okay first ofall let's declare that how do you fetcha data it's simple right we can say dataequal to the data is coming from stacknow the stuff property of stack is ifyou have three elements as we definehere we have three elements right wehave 15 8 and 10 now anyone use pop whatdo you think which element you will beadding and by default the value of 4 and3 is 0 because that's how a day works inJava the point here is when I say popwhich value will get so it is done withthe help of top so we have a topvariable here and whatever value we havefor top you will fetching that valuebecause you will always get last infirst out so the last element which Ihave added is 10so the top ref referring to 10 nowdislocation so it will give you 10 andthe way you do that is by simply sayinghe will say stack and he will say topnow you will get that data quite simplerightokay now they have we had to do one morething now once you say you are removingthis 10 we were making it 0 so I willremove I will make this element as 0 andhow do we do that it's very simple let'sgo back here and say stag off top isequal to 0 so we are making 0 so thatagain you can make it 0 you can make itnegative value for whatever you want andthen at the end we can say returned dataI hope you work now so let's run thiscode and you can see we got oh we havenot we are not saying pop so we'll saynumsdot pop now it will delete the last datarun and you can oh not working what'swrong what went wrong here okay so weare saying top top oh ok so we have todo one more thing see as you can seehere when I say push the top value sowhen I say push first time at the topwhen you become one second time tablevalue becomes 2/3 time table on youbecomes 3 that means it is referring tothis value wait to do - - we have todecrement the top before using it so wesay top - - is itlet's try so I will oh I'm not the oneprinting pop value so whatever pop I amgetting I should be printing it right soI would say system dot out dot println Ihope this will work but on this code ohit worked now it worked you can see thatwe are removing the value for stand fromthe stack and you got 0 here cool rightso that's how you use push and pop nowwhat else we can do we can alsoimplement peek here and how do we dothat so peek is very simple peek isalmost same as pop the only thing is inpeak you don't delete the element soI'll paste it here and I will say thisis peek ok you will not do - - becauseif you do - - it will it will decrementthe value but value of fetchingyou will be fetching the - one of it soit's a minus 1 and you will not deletethe element that's what you will bedoing that's itlet's peek for you after adding theafter adding value 8 I will peek I wouldsay nums dot peek if I run this code nowyou can see we got 8 so the last valuewhich I've inserted isand then I'm pushing 10 then I'm popping10 and you can see that's when the inthe stack we don't have 10 simple thisis how you use push peek and pop whatelse we can do here now we can implementcertain other methods as well exampleyou can get our size of the stack youcan get you can you can make thisdynamic instead of saying 5 whateversize defined by the user or very dynamicwhich is every time you add the elementeven if the initial size is 5 you canyou can change it so you can couldincrease the size on the go now how doyou do that that we'll see in theupcoming videos I hope you enjoyed thissession on stack how do we implementstack and it's quite simple right so letme know in the comments section of yourthoughts and do click on like button ifyou liked it thanks for watchingeveryone so welcome to another early morning burnpeak Express sorry from groggy stillwaking up so what we're gonna do todayis we're gonna review some grips we'regonna start by unboxing and taking alook at them and then we're gonna moveout to the trails and see how theyactually workso these are basically the cheapestbicycle grips that you can find onAmazon ship to your door $3.99 andthere's yeah plenty of Chinese writingon here you can see they have the littlerubber ends they just slide on to thehandlebars and I gotta be honest theydon't look half bad now here are thecheapest set of lock-on grips that youcan get on Amazon I'll tell you whatthey cost in a second when these wereavailable I paid four dollars and 86cents for them they are black lock-ongrips with metal bar ends but these lookalmost too good to be true then we haveninety dollar grips you are not gonnafind these grips for cheaper these wereon a reputable website and it they hadgood reviews you know you're in troublewhen there's a picture of like the crosssection of the grip on the box ourpatented shock-absorbing system suspendsyour grip completely eliminating contactwith the handlebar and on the diagramhere it shows that the grip is indeed alittle bit larger than the handle barand it's sort of suspended between it solet's see what the quality of thematerials here is about okay so we haveall of our parts here and there'sthere's a lot of them I'm actually alittle bit intimidated by what I'm gonnahave to do to assemble these we have asticker that's always a plus that's anice addition they include someinstructions this is gonna be a projectI gotta say the packaging is really goodit better be for 90 bucks it better bethe best packaging ever really nicelocking mechanisms and then we have thegrips Wowthese are really nice bar ends theconstruction and build quality and fitand finish of the grip is absolutelyperfect but I don't think we wereexpecting anything less for $90 itshould be so before we review any ofthese grips I want to show you guys justa normal set of grips everybodyrecognizes asset of ODI lock-on grips as reputablequality and a good price they havereally good bar ends that are that arestuck on they've got a good rubbercompound they lock into place so we canuse these for comparison we're not gonnabe reviewing them today because this iswhat I normally run lastly we have apotato now I'm not just trying to befunny or ironic I'm actually gonnademonstrate something but this potatothis is the end of your handlebarwithout a bar end all right that's whathappens to your body if you don't have abar end now if you have a bar end onthere I'm going to use equal force yeahyou're gonna get a bruise on the end ifyou don't have a bar end you're gonnaget core sample to every single time sobar ends are really really really reallyimportant right now we got to figure outhow the hell we're gonna get these outI've actually got an idea for thatalright so first let's remove my box ODIgrips loosen the clamp pull it off nowthese grips it's just rubber so you cantry to force it on but what I find is ifyou push from the end it sort of givesyou like a slinky effect where it sortof makes the grip wider as you compressit and give it the ability to just pushright on the handle bar but normally youget to a certain point and it won't pushon anymore it's just too gripped on thehandle bar now these ones it appears wecan just kind of twist and force onthat's not good you don't want a gripthat's gonna move and the the kind ofsofter gummy err grips like this youcan't just get them on like this and I'mgonna show you how a lot of people doget them on and you show you two waysactually the first way is with an aircompressor you can go into the end hereyou can go over here you shoot some airinand you can very easily push the gripright to the end I'm gonna clean thehandlebar a little bit with a papertowel not a rag because I don't want toget any sort of contaminants on it sowhat you do is you get a little bit ofrubbing alcohol inside the grip not toomuch and the grip simply slides on youcan sort of twist it mess with it and innot too much time the rubbing alcoholwill evaporate and your grip is good togo all right now these are on a bikelet's do the potato test okay kind ofwhat we expected alright so here we areon top of the flight deck to test thesegrips I'm going to do the same line eachtime as you can imagine it's beenraining lately so we have wet wood wehave some slick roots and I'm gonna beholding on for dear life on these threedollar grips here goes cheap grips[Music]all right so they held strong they I hadplenty of grip but if you look here evenafter that one relatively not thattechnical run there already sort oftwisting that's not good but for a kid'sbike a cruiser they're probably fine for$3.99 but I wouldn't put them on a highperformance mountain bike I did quite afew runs with these before and they kindof hurt it's almost like sandpaperbecause the rubber is so hard so I wouldsay you might just want more comfortablegrips and just spend like an extradollar for less than a cup of coffee inthe morning you can just have grips thatfeel better for months and months andmonths so what do you expect for threedollars so let's take these off andlet's put on the cheap lock onsso as a reminder these ones were underfive dollars appear to be not bad let'sdo the potato test yeah they seem to bepretty safe they fit a little tightthat's okay now you can see you can pushthem further than the handlebar if youwant to where as these ODI lock-on gripsthey have a hard stop at the end youcan't push him any further so we'regonna line them up with the end of thehandlebar that's where our grips gonnabe so I'm just gonna tighten them on youknow what's hilarious about these barends is that it actually displays thetorque rating one in 1.5 Newton metersof torque that's a really nice touchzito grip number two I'm so impressedthat they come with like machinedaluminum is not easy to get these inactually they feel really good I'm notgonna lie these aren't even a dollarmore than our cheapo grips and I'm gonnastop short of recommending these until Itake a trip down the trail so here weare once again at the top of the flightdeck and we're about to drop in with ouras far as I'm concerned best value gripsthere are lock-ons for under fivedollars let's see how they go[Music][Music]not bad they feel good they really dothey didn't move at all there's novisible wear on the grips they'reimpressive for the price one thing Iwill note about these grips in the firstrun they have these ribs across the gripand actually I have a set of deity gripson my dirt jumper which also have ribsbut the ones in the deity grips are at amuch higher frequency when you squeezethe grip it gives you a more sure gripwith this my hand is like almost movingto one side as the ribs flop over whichis kind of weird again not something youcan really complain about for a sub $5grip but it is notable like they're notideal grips this looks reallycomplicated I'm gonna have to get alittle more of this do this ice I wantto drink it right now and I turn mytongue and all right let's figure outhow to install these grips oh mygoodness what the frig is this so itlooks as though we just kind of tearthese off of here or cut these off ofhereI assume they gave us extra we'll cut abunch of these and put them aside I havegot to show this the pad please readentire document before installation youknow what I'm gonna do thatcheck clamp screws before you try it ohI can already tell this is gonna beuseless informationokay the grip will feel softer in alldirections as Tuning washers areinstalled from zero tuning washersmedium-firm one on each side so the moreof these nylon rings you add to the gripthe softer the grip feels oh I see thatgoes over it to hold everything in placegotcha it is very very hard to get theseon I don't know how I did it on theother side this is like the cush core ofgrips Oh glad I remember to put in thetuningsure could you imagine if we did allthat and forgot the tuning washer Ican't believe I just used the wordtuning washerI need another tuning washer I think Ican get another second out of that onelet's use the included wrenches Oh Nothere we go okay very carefully verycarefully it does slide on remarkablysmooth tighten the bar in first so thatwe can push the grip up against it thebar ends are really nice you can evensee once it's tight it still moves alittle bit because it's rubber holdingit in place and that's a nice touchthese aren't gonna come out it's likealmost a built in torque limiter andtorque the outer clamp screw to 1.7Newton meters they included a wrenchit's not a torque wrench so obviouslythey they assume that you are gonnatighten these down yourself let's figureout what that actually feels like withthe torque wrench I have my torquewrench set to 1.7 Newton meters so Iknow what 1.7 feels like because I can'tsay that I really know what 1.7 feelslike okay it's firmer than you mightthink so we're gonna tighten down theouter clamp first so we're gonna push it1.7 Newton meters of torque 1.7 Newtonmeters not the slightest bit more wow itmoves it really moves that suspensiontechnology whoa this is weirdyeah I'm gonna have to see if this is agimmick we're gonna put these on thebike before we put the screws in mmyou're damned if you do you're damned ifyou don't suck oh it's gonna be reallyhard for me not to hate these I'm gonnahave to like take a sip of coffee beforeI ride and like let the pain andsuffering of this installation subsidesure over tightening this affects thesuspension technology in some way so assoon as you start feeling that allen keyflex that's at 1.7 that is bizarre so itmoves it's very consistent and smoothit's not like it's creaking and grindingand stuff they obviously put a lot oftime and thoughtto it it also it looks expensive youknow like the end I can't wait to takethese out on the trail and see what thehell they're all about yeah you knowwhat I don't know if these are as safeas some of the other grips like to methe pinnacle of safety would be this theend on the ODI grips this smooth plasticthat goes all the way to the edge thislooks like if it really hits you itwould hurt more than the end of the ODIgrip okayfirst lap on the Rev grips[Music][Music]verdicts out on these I like them Idon't want to take them off just yethey look who decided to show up so gripthat that's pretty impressive you seehow when you move it back and forth whyis it wiggle is it meant to do that yeahthey're they're tuning washers in thereyou tell me there's tuning washes forthe grips these took me like 45 minutesto install it's like they purposely gaveyou whiskey grip I'm not gonna lie theyfeel really good I'm not gonna tell youwhat they cost until you take a run yeahyeah definitely get your helmet I don'tknow if I can go with these because I'mhaving this wrist problem and nowthere's like a jiggle where I can't justlike a lock in place what it is is itdoesn't let me skip seated do these havegood reviews is there any free ridersusing these are they like you know likeGuinness in style yeah it's weird forthe grip to move though look look seethis is the problem okay so these arecarbon bars right it's tight enough foryou I like death grip them sometimes andlike this is moving Plus that and likewhat oh the whole things moving oh looseI thought I tightened it down enough sothese whole grips came apart I really Itighten those down pretty goodI mean you were really gripping I meantrying to turn them just not reallyreally like I would be I would be thatrough with my regular bike like like Iwasn't doing anything oh look at that Ijust broke it I was like something'sweirdbut honestly what are you gonna do on adownhill run so I have another grip foryou to try real quick let's go in thegarage this is ridiculousoh no man is the average Joe gonna notmess up this installation what happenedto Kevinthat happened on a downhill run youcould dieeven if you had a shop you know withlike really meticulous bike mechanicsinstall this how am I gonna recommend isthey do feel pretty good but like you'renot safe man that's a good cease whatabout the actual grip bill just therubber part okay now we're gonna trythese so we got Kevin's slopestyle bikehere it's where I take his death gripsoff and we're gonna put these on and seehow they work as you can see these arepretty sweet we've got these metal barends and everything and these aredefinitely more of my style when I firstheard riding BMX this is the grip styleI had how all the time was thishe's feel better they feel locked inplace on these like when you grab aholdof that it still has some given itbecause it's so thick right I don't needany extra and I've never ridden thisbike here so I'm actually kind of scarednow but go fast don't crashoh yeah dude even keep it on slick tiresin one break it was way more comfortablethese grip because they weren't movingI'm Pro these grips anti the other gripsI'm not sure how much these grips wereoh man the other ones are how muchthat's wildthis is these are less than five bucksand I would use these any day of theweek over $90 ones sweet doesn't mean Igot new grips now let's go through eachgrip and I'll give you my thoughts sothe cheap ones these are not worthbuying they're really hard they'rereally brittle bit difficult to installand the fact of the matter is for a tinytiny bit more you could have the gripsthat are now on Kevin's bike which arebelow $5 shipped and they we all agreethey feel great so to me it's it's notthat these are bad for the price is thatyou could do so much better for under $1more those are the grips they get theyare hands-down the best value the Zito'sthey should be called the hands downbecause those are hands down the bestgrips you can get for $5 as for theseguys are they good are they well thoughtout I don't know it's hard to tell theydid have a pretty good feeling if you'rejust riding some light XE or somethingand you want a little more activesuspension technology or whatever yeahbe my guess if you got money to burnI torque these down I put them backtogether maybe I didn't have them tightenoughI don't know they don't seem like likeeven if you were really violent withthem they don't seem like they wouldcome apart so let's chalk that up to aninstallation error I really want to givethem the benefit of the doubt but thefact of the matter is if a normal set oftried and true lock-on grips come alittle bit loose during your downhillrace run you go and you pull off to theside and you tighten them with thesethey start disassembling themselves asparts of the grip start coming out andthat's terrifying I'm gonna put my ODIgrips back on I'm sorry it's just itthat scared me a little bit too muchalright today is four days later and ofcourse it's 5 o'clock in the morninglast night we posted this video onpatreon and got a lot offeedback from people who have the revgrips now I went back to theinstallation instructions and theyseemed really really concerned withmaking sure those clamps are tight theyeven said you should put some frictionpaste in there the company seems to beaware that if all this isn't reallypressed together you're gonna haveproblems I also got a lot of feedbackfrom patrons that just makes meintrigued enough to give these anothertry they really helped with fatigue whenyou have to deal with breaking boatsI run rev grips also to help with armpop I switched from fat paws due to myhands going them and they have helpedyou will have to pry them from my colddead hands I finally gave in to thecrazy price of the Rev grips and I'mcompletely happy with it I bought andstill use the Rev ripp I have run therev drips for eight months now Who am Ito jump to conclusions I think thesedeserve a long-term review so I'm gonnakeep the rev grips on my heart ale andI'm gonna take it to Sedona next weekI'm gonna ride them there on some prettygnarly stuff and then I'm gonna takethem back here and continue to ride themand give you my long-term opinion butfor now my opinion is they feel reallygood but they're complex and there's alot that can go wrong and that scares mea little bit so time will tell alrightjump back to four days ago let me knowin the comments did you think I was fairto the Rev grip did I give them enoughof the benefit of the doubt and whichgrips would you buy you haven't noticedthis isn't the normal set spike hackschannel this is burn peak Express is oursecond channel we do content like thisso if you liked it make sure yousubscribe and thanks for riding with ustoday I'll see you next time we're gonnaneed a thumbnail[Applause][Music]just thumbnail perfection[Music][Music] come on boo - I thought you two quicheoh come on boo - I thought you - Kishashe looks Showa : considered significantmy Carmela why are you so cold and palejust like the moonlight we both knowthere is no end for usnice night out year after year hmm sucha tender Lambeth moon tonightwe both know there is no end for usnight and night out year after yearliving forever is not a blessing but acursehmm such a tender lambent moon tonightfear Rises yet love stays still defender lambent moon tonightwhy are you so called it just like themoonlight be arises so cold and pale isthe moonlight diuretic ramelaI embrace it my Carmillawhy are you so cold and pale just likethe moonlight so cold and pale distilmoonlight and my Carmelawe both know there is no end for usfear Rises yet love stay still livingforever is not a blessing but a curseour turret has been destroyedhmm such a tender lambent moon tonightso cold[Music]do you fear redhmm such a tender tonight do you fearred I embrace itfear Rises yet love stays stillliving forever is not a blessing but acurse semillajob why are you so clubbing pain justlikefeel the embraceliving forever is not a blessing whatoccurred[Applause]night-in night-out year after year weboth know there is no end for us[Music]arises yet love stay stillliving forever is not a blessing butoccurblood or floodfear Rises yet loves[Music] guys if you want to follow my dailyadventures whether it's with big pythonslike this or whatever's going on in mylife make sure to tune in every day ofthe week on my daily blog it says it'sdown in the description this snake isreally heavy you can follow me over atBrian Bartok again daily vlogs don'tmiss a day this is baby TV I'm hearingFountain Valley California yep my buddyJay Brewers plays prehistoric pets andthe reptile zoo and I'm here for onereason and one reason only and that's tosee some of the largest snakes incaptivity and this is certainly theplace to do it now this is a beautifulaltar ivory what I'm going to be honestwith you this guy is a little puppycompared to the ones that were about tosee it's gonna be amazingwe're talking about snakes that are afew hundred pounds and we're gonna showthem to you guys but first I'm gonnameet up with Jay and we're gonna look atwhat these giant snakes are as they'rehatching just little guys and then laterin the show you can be blown away by howlarge these pythons are[Music]so Jay what is going on we got babieshatched okay I was I wanted to get tothat because you'll hear the big snakeguy that is my big snake this is how itall begins exactly that's what I wantedto start with you guys is to really showthat these big snakes have to start assmall snakes as baby snakes but they'restill really impressive and it's reallyfortunate that we ended up showing upright as a whole clutch while a couplein this clutch start hatching thirtyminutes ago these were not action 30minutes guys so see the snake rightthere that snake is less than 30 minutesold it's literally as a matter of factif you see this bubble right herethat's actually maybe the first breaththat a snake took right there juststarting to breathe it you can actuallysee you can see this one's trying to tryin the hatch this one here is trying tohatch so we're gonna have to rescue themso we don't want to be drowning or dyingso let's back up for a second so thatpeople that aren't familiar with snakeshave an idea these are obviously Pythoneggs for right now so you guys know andretakes I mean they're pretty large eggsfor snakes I mean this yeah I mean theseare these are me these look like amiddle sized eggs sometimes they'rebigger it depends on how much moisturethey they get to take in of course theystart out smaller and they grow that'swhy they're yeah and at the end theystart to expel some of the fluids nowthese are our mainland's right these aremain ones okay so the mainland's aregonna incubate a lot longer right uh nota lot under the the dwarf stuff goeslike 74 to 76 days this goes these golike 76 to 82 that's not that farsometimes some truth is sometimes it'snot all about it it's not but yeah butdefinitely dwarf stuff has a tendency ofbeing a little bit earlier than the butnevertheless even retake eggs are muchlonger than say ball python eggs orcorrect for me they're not you're notyou're gonna we're gonna have to 60-dayreal fish so think about this guys we'retalking about almost 80 days ofincubation and we happen to be herereally easily over 80 days usually over80 daysdo the rap on this one but I think we'vebeen getting back down to the 8080 today rangethis is 1014 10+2 bit early so that'sgood so that means this one hats at 82days 82 days so 82 days these guys havebeen sitting in this tub waiting for youso anyways Jay this is amazing and Ithink that baby snakes are great andawesome but I'm here to see some amazinglarge but I mean these guys aren't herein order to see the maze and large theamazing large ones we're gonna have toget out something in between don't wekind of build that for the grand finalethis guy right here alright just blow mymind huh okay whatever you want to dookay what do you guys say we're in forthis right whatever Jeff I knowsomething cool I'm gonna meet you guysout there so what do we have here Jayfirst off I gotta tell you you know Iknow you're big snake guy these aren'tthat impressive as far as nothing butcolor oh I love them okayand you tell me what they got okay wellwe got right here is actually this istechnically one of the world's firstthis is a motley this is actually asuper motley golden child okay it's kindof cool yes like a new per block yeahit's actually it's actually less blackthan the suit than the motley goldenright it's still cool it's you assumedyou'd think that I mean it's cute yeahthen the motley gold and the supermodelhe brings a little bit lighter to itright which is but the super motleymakes a lot of neat snakes and this iswhat I think it's kind of cool-lookingnow this is this one hey guys this is Ithink that this is probably the mostpopular snake at least retic in theworld everyone that knows refix has seenthis naked probably liked it onInstagram so what tell me what this isthis is actually one that we thought wasa motley golden we still don't know forsure it is that the only way we'll knowis if we breed it right but it got thesecool dots on the side so we assumed thatit had to be a golden child because itonly because it has a dots and it'sright cleaned off but it is super darkit's very cool-looking and I got so nowthis dark isbut yes we credible but regardless andthese are really beautiful snakes enoughand you know what I think they're coolbut jii you know I think that we need aslightly larger snake and I think thatwe might have one coming oh we gotanother incoming hair matter fair I'mgonna hold on to these two okay okaylooks like they're gonna hold on to youyeah see that's one thing that's niceabout Rea ticks is they like to getsnugged up now those who use it on intothe darker colors yeah and any of thebigger snakes we figured that we'llstart off with a little bit of what wecall leucistic and then of course ablack eyed leucistic it's a verybeautiful snake the funny thing is youmight see it change color where we haveit out because it blushes it's a itspigment so you know then that it's evenat this size it actually turns itblushes like a nice snake gets anyhigher on my leg I'm going to startflushing cream but you can actually seeright now that's really amazing done andthe white the white retakes have reallygotten stronger over the years you'verural it depends on the genetics rightand so what we figured out is that theat the the ivory the ivory the ivoriesare it's basically in long story thenegev long story short there's a couplelines of blue sistex that come fromPlatinum's and if you bri plot in theplaten and you run a risk of makinglogistics that are we had a week yeahcertainly seems like a super strongtitanium yeah yeah we put some titaniumin it again these snakes are reticulatedpythons of course and it's really thelong way I got a big one for you I'veheard that I don't know and then youbring these little little guys out butthe truth is is that reticulated pythonsare really the longestwhoa that was a close one didn't want todrop this guy there the longest snakereally in the world you know of coursepeople always say anacondas are thelargest snake but they don't get nearlyas long as reticulated pythons they arevery heavy body but some reticulatedpython probably rival you know anacondasas far as girth as well and certainlyweight when you buy I mean absolutelysome of us you know especially gettingone in captivity it's got a good foodsupply obviously controlled food supplyyou know and they start getting intoretakes are funny like you see thissnake isn't that big but you see it'sactually just hitting the size whereit's kind of gain weight okay you don'tever do where I'm okay I'm not gonna diethree six are constrictors and it doeshave a pretty good hold on me right nowbut they're not killers guys people haveto understand that these snakes don'twant to kill anyoneit's just using me as a tree it'sbasically holding on Jay said thisearlier today that we use our hands toanchor these snakes use their body toanchor so right now it's just anchoringout to jail guess what now he's gonnait's gonna get a little bit tighter onme for sure but uh I tell you what thisisn't bad I wouldn't want some of thebig big snakes around my neck as muchnot that they wanna hurt me but they'rejust so powerful that even with themjust holding I could literally almostchoke me out so I'm gonna get a littlehelp from Jay and then we're gonna moveon to something slightly largerall right so Jay this doesn't lookthey're much bigger to me oh man are youstill in that big kick I'm here it'severybody all about size I'm gonna getit I am here to feed big snakes butdon't get me wrong this is really coolso all right go aheadI will go over give me your spiel onthis one before the audience is likewhere the deaths I can find that in mybackyard gardeners I think so yeah thisis like you guys wouldn't think this isbig would you a really big snake butregardless so this is uh a golden mochino mochi no and this is the only welvenchild this is the first this was thefirst one produced we produced a few ofthem and we have a female that's biggerbut this one here's one we grabbed thisguy's killing them and I keep promisingyou guys big snakes and I keep gettingthese guys know but hey is thatbeautiful or what guys up if I didn'tshare this with you I wouldn't yellasleep tonight no I mean it really isbeautiful snake and the thing that Jayis so passionate aboutand also known for is really the colorcombinations of reticulated pythons Imean legitimately I don't know how manyhundreds of different colors he had butit's pretty impressive to see this tookthis long you gotta see Jim Jim sold nowhe can barely walklook at that now this is again there's areally gorgeous snake and again it's nota really big snake but I promise youreally stuck on this big thing I can't Icame to California it's good to see thebiggest pythons around but I'm enjoyingthe smaller stuff too I really I meanand this thing is ridiculously beautifulso what is this so this right here is aphanom platinum Sunfire tiger headalbino is very pretty snake it might bebetter to just say it's a really prettysnake okay really a pretty pretty snagBowl and it's a little bit fired up towhat happens sometimes these guys wouldget along it's stress it don't strikewater they'll drink water and they getkind of excited and that kind of happensso I'm gonna take a little bit of apresent home with me God but that Godactually see he ate a rat which is righthere yeah how do they eat they drinkthey drink and so he just he just letyou have some of us who's just sharingthis drink no it's beautiful so oftenalright guys as promised we're moving onto a big snake right now so guys I'mtelling you what if Jay comes out herewith another small snake there's gonnabe a fight I'm here to see the bigsnakes oh all right yeah so now this iswhat I'm talking about right here thisis a warm up then have you thought thiswas a big snake look this is the warm upit is so heavy I can't even sit up thenpeople don't realize now any of thesethings really are ice until like I saidI came out to California for this thereyou go and this is what I've come outhere for is to see something this sizeand even larger you're saying this isjust my warmup you know when you go tothe gym you got to start if you startright off with the big stuff you can ofthings so that we're turning themGropius I can hardly get there you go soideait's amazing it's such a cool snake sotell me what is this first off this isthis is actually a titanium platinumtiger that's like titanium platinumbehavior okay so so Jay tell me likewhat is it what is it with the bigsnakes with you I mean what started yourpassion with them you know I don't knowto be honest I've always when I wasreally young I actually don't ask me howthis happened when I was 13 I had a Ihad about a 15 16 foot reticulatedpython don't follow Jay he's geneticallyI was good to my dad my dad was 67 I wasadopted he passed away actually shortlyafter and he let me do anythingI mean anything and I would never everever recommend it but somehow I got solucky was a team of snake on the earthoh my god well and that's funny becausethat's the same kind of story that Ibefore at 15 I got a Burmese python andin it it's like now I have this lifelongpassion for the large snakes but but Inever really yeah I didn't take it tothe level that you have I mean whereit's just like you just pioneered thiswhole reticulated python thing I meanthere's other people doing clock sowe're not on the level that you areinspired I was inspired by a lot ofpeople to be quite honest I mean it'slike a paint job on every differentsnake I get it do you know obviously wedon't do genetically like cheating rightyou know I mean I don't know if I'd callit cheating but we don't work withmicroscopes or we just literally justfind the snake in the red jeans workingour way out and a little dab of this alittle dab of that you guys just to getan idea I mean this snake is I don'tknow what does this make maybe 150 I'dsay 170 170 but you gotta rememberthat's a hundred where I weigh 175it's almost as heavy as I he'll fix thatAmericabut you just can't understand thefeeling of having a snake like this justlaying on you I mean that weight isunbelievable and literally I'm notkidding when I was laying down and itwas on top of my chest I couldn't sit upthat's how that's how much weight injust math exam that's all rightmuscle one big muscle with a bunch ofribs I mean that space when we thinkabout this thing in a whilea wild reticulated python this sizecompete of wild or of 200 or 40 poundsprobably something though that's mindboggling when you think about how stronga borås you know I tell you it justsnakes like this to me I don't care whoyou are when you see something I mean ifyou're afraid of snakes you're gonnalook at this and be afraidobviously but you're still gonna beinquisitive you're gonna be curiousabout what it's like and to me the bigsnakes just do that it's incrediblepeople love them and it's always amazingwatching people that are scared spitlessturn into a snake loverten minutes later exactly cuz all theirfears are erased and again it just goesback to what I was saying is that thisgets uterus and you want to know moreand I mean gosh I don't know just thinkof it snake I mean it's almost crazy andprehistoric in a way you know prettysort I mean to think about a reptilethat can get 300 pounds and 20 somethingspeed is just absolutely incredible sono matter who you are when you see asnake this size you're gonna be what isup with that even if you're afraid youwant to know more about that animal andto me that's what makes these thingscool and that's why I came to Californiais to see animals like this and to getthe experience that Jay has given meright now and I tell you what he says hehas even a bigger one in store for me sowhat you guys want to see what you havelet's do it okay guys I promise you thebiggest snake the biggest snake is aboutto come this is gonna be insaneOh crazy like crazy night I'm so downbro oh I was opposing right there forthe thumbnail that's what them I knew itokay so listen guys I've seen somepretty big snakes ever seen some reallybeautiful snakes now Jays in the backover there and he's guaranteeing me thenI'm gonna see one of the largest snakesmay be in captivity may be the largestsnake in captivity we're talking about amonster huge awesome snake so first letme down a little bit with the size thingso let's hope he doesn't let me downthis time I think Jays actually camethrough for me this Isis big hoppersnake guys oh my gosh now that is onehuge snake oh ohhow big do you think this snake is Ithink she's about 270 270 pounds guysyou better be more I don't know thething is at 270 pounds of muscle it'sjust so heavy and that is I'm just a lotof them Kurt do you know there you gothat gives you nights dude look at thegirth on this look and look it's not alittle bit upset yeah she's just kind ofstruck at me she's probably literallyputting her mouth back and see seebecause he's a really pain but she wasdead asleep sit down with her mouth justlike totally sleeping you know she'sgood now a little cranky but would beokay so do you think that there'sa bigger snake out there I am this closeto the dam I have one snake that'sactually bigger but she's in blue thisis 270 pounds in how many feet 20 to 22feet long out the stretcher a little bithuh 22 feet long 270 pounds jamei haveone that's a little bit bigger but Ithink that he delivered on this oneright here for the fact that this isactually if not the largest snake closeto the water she's actually she's thatyou know what the truth is depending onwho's doing what on the next couplemonths we'll determine who's the biggestone so this girl just a handful of mealdinner could potentially be the longestsnake largest snake in captivity so guysthat is pretty amazing she gets a littlebit tense you definitely don't want tobe on the business end but just take alook at the girth of that animal I meanjust look at here I'm gonna lay it onand I'm only oh look at this Iabsolutely crazy guys just take a lookat the length of that animal and just ohwhat a beautiful thing - so what morphis this Jake this is a central Tigertitanium a citron tiger oh man she'sheavythat is one beautiful snake and got somecrazy size to her sounds awesomeso guys I hope that I deliver to youtravelled all the way here to Californiato visit my buddy here J at prehistoricpets you can check his youtube channelout on the dream these check his youtubechannel out link is in the descriptionguys this is awesome but I don't knowyou guys may want to cuddle up with yourpuppies or whatever it isto me this is living the dream that's ahashtag the J always uses so guys it'salways a blast coming here and as alwaysI'm facebooking and tweeting my waythrough things you can follow me over asnakebites TVon Instagram at night sighs sighs TV youcould follow J at Frias her pets comenext week you can walk in snake bites [Music][Music][Applause][Music][Music][Music][Music][Applause][Music][Music][Music][Music][Music][Music][Music][Music][Applause][Music][Music]Oh[Music][Music][Music][Music][Applause][Music][Applause][Music][Applause][Music][Applause][Music][Music][Music][Music][Music][Music][Music][Music][Music][Applause][Music][Music][Music][Music][Music][Applause] ♪♪♪♪ HEY NATE HOW'S LIFE? ♪♪ I DON'T KNOW IT'S ALRIGHT ♪♪ I'VE BEEN DEALIN WITH SOME THINGS LIKE EVERY HUMAN BEING ♪♪ AND REALLY DIDN'T SLEEP MUCH LAST NIGHT ♪♪ I'M SORRY ♪♪ THAT'S FINE ♪♪ I JUST THINK I NEED A LITTLE ME TIME ♪♪ I JUST THINK I NEED A LITTLE FREE TIME ♪♪ LITTLE BREAK FROM THE SHOWS AND THE BUS RIDES ♪♪ LAST YEAR I HAD A BREAKDOWN ♪♪ THOUGHTS TELLIN ME I'M LOST GETTIN TOO LOUD ♪♪ HAD TO SEE A THERAPIST THEN I FOUND OUT ♪♪ SOMETHIN FUNNY'S GOING ON UP IN MY HOUSE ♪♪ YEAH STARTED THINKIN MAYBE I SHOULD MOVE OUT ♪♪ YOU KNOW PACK MY CART TAKE A NEW ROUTE ♪♪ CLEAN UP MY YARD GET THE NOOSE OUT ♪♪ HANG UP MY HEART LET IT AIR OUT ♪♪ I'VE BEEN SEARCHIN ♪♪ WHAT DOES THAT MEAN NATE? I'VE BEEN LEARNIN ♪♪ GRABBIN MY KEEPSAKES ♪♪ LEAVIN MY BURDENS ♪♪ WELL I BROUGHT A FEW WITH ME I'M NOT PERFECT ♪♪ LOOKIN AT THE VIEW LIKE THIS CONCERNS ME ♪♪ PICKIN UP THE CUES RIGHT? I'M QUITE NERVOUS ♪♪ HATE IT WHEN I LOSE SIGHT LIFE GETS BLURRY ♪♪ AND THINGS MIGHT HURT ME ♪♪ IT'S PROLLY GONNA BE A LONG JOURNEY BUT HEY!!! ♪♪ IT'S WORTH IT THOUGH ♪♪ COLD WORLD OUT THERE KIDS GRAB YOUR COATS ♪♪ BEEN A MINUTE I KNOW NOW I'M BACK TO ROAM ♪♪ LOOKING FOR THE ANTIDOTE ♪♪ TO CRACK THE CODE ♪♪ PRETTY VIVID I ADMIT IT I'M IN CLASSIC MODE ♪♪ DON'T NEED PITY GIVIN TO ME, BUT I CAN'T CONDONE ♪♪ TALKIN DOWN TO ME I'MMA HAVE TO CRACK YOUR NOSE ♪♪ FOR CRACKIN JOKES ♪♪ I'M LOOKIN FOR THE MAP TO HOPE ♪♪ YOU SEEN IT? ♪♪ BEEN MAKIN A WHOLE LOT OF CHANGES ♪♪ WROTE A SONG ABOUT THAT YOU SHOULD PLAY IT ♪♪ I GET SCARED WHEN I WALK ON THESE STAGES ♪♪ I LOOK AT THE CROWD AND SEE SO MANY FACES ♪♪ YEAH ♪♪ THAT'S WHEN I START TO GET ANXIOUS ♪♪ THAT'S WHEN MY THOUGHTS CAN BE DANGEROUS ♪♪ THAT'S WHEN I PUT ON MY MAKEUP ♪♪ AND DROWN IN SELF-HATRED FORGET WHAT I'M SAYIN AN ... ♪♪ WHERE THE BEAT GO? ♪♪ OHH ♪♪ AIN'T THAT SOMETHIN ♪♪ DRUMS CAME IN YOU AIN'T SEE THAT COMIN ♪♪ HANDS ON MY HEAD CAN'T TELL ME NOTHIN ♪♪ GOTTA TASTE OF THE FAME HAD TO PUMP MY STOMACH ♪♪ THROW IT BACK UP LIKE I DON'T WANT IT ♪♪ WIPE MY FACE CLEAN OFF MY VOMIT ♪♪ OCD TRYNA PUSH MY BUTTONS ♪♪ I SAID DON'T TOUCH IT ♪♪ NOW Y'ALL DONE IT ♪♪ I CAN BE CRITICAL ♪♪ NEVER TYPICAL ♪♪ INTRICATE WITH EVERY SYLLABLE ♪♪ I'M A CRIMINAL ♪♪ INTIMATE BUT NEVER POLITICAL ♪♪ PRETTY VISUAL ♪♪ EVEN IF YOU HATE IT I MAKE YOU FEEL LIKE YOU'RE IN IT THOUGH ♪♪ YOU CALL ME WHAT YOU WANNA BUT NEVER CALL ME FORGETTABLE ♪♪ LEAVE YOU DEEP IN THOUGHT I COULD NEVER SWIM IN THE KIDDY POOL ♪♪ WAY THAT I BE THINKIN IS CINEMATIC ITS BEAUTIFUL ♪♪ MAN I DON'T KNOW IF I'M MAKIN MOVIES OR MUSIC VIDEOS ♪♪ THE SALES CAN RISE ♪♪ DOESN'T MEAN MUCH THOUGH WHEN YOUR HEALTH DECLINES ♪♪ SEE WE'VE ALL GOT SOMETHIN THAT WE'VE TRAPPED INSIDE ♪♪ THAT WE TRY TO SUFFOCATE YOU KNOW HOPING IT DIES ♪♪ TRY TO HOLD IT UNDER WATER, BUT IT ALWAYS SURVIVES ♪♪ THEN IT COMES UP OUT OF NOWHERE LIKE AN EVIL SURPRISE ♪♪ THEN IT HOVERS OVER YOU TO TELL YOU MILLIONS OF LIES ♪♪ YOU DON'T RELATE TO THAT MUST NOT BE AS CRAZY I AM ♪♪ THE POINT I'M MAKIN IS THE MIND IS A POWERFUL PLACE ♪♪ AND WHAT YOU FEED IT CAN AFFECT YOU IN A POWERFUL WAY ♪♪ IT'S PRETTY COOL RIGHT? YEAH, BUT IT'S NOT ALWAYS SAFE ♪♪ JUST HANG WITH ME THIS WILL ONLY TAKE A MOMENT OK ♪♪ JUST THINK ABOUT IT FOR A SECOND IF YOU LOOK AT YOUR FACE ♪♪ EVERY DAY WHEN YOU GET UP AND THINK YOU'LL NEVER BE GREAT ♪♪ YOU'LL NEVER BE GREAT ♪♪ NOT BECAUSE YOU'RE NOT BUT THE HATE ♪♪ WILL ALWAYS FIND A WAY TO CUT YOU UP AND MURDER YOUR FAITH ♪♪ (WHOO) ♪♪ I BEEN DEVELOPIN ♪♪ TAKE A LOOK AT THE BENEFITS ♪♪ NOTHIN TO MEDDLE WITH ♪♪ I COULD NEVER BE DELICATE ♪♪ AM I EVEN RELEVANT ♪♪ THAT DEPENDS HOW YOU MEASURE IT ♪♪ TAKE A MEASUREMENT ♪♪ THEN BAG IT UP AND GIVE ME THE EVIDENCE ♪♪ PRETTY EVIDENT ♪♪ DEPENDABLE ♪♪ CAN NEVER BE TENTATIVE ♪♪ I'M A GENTLEMAN ♪♪ DEPENDING ON IF I THINK YOUR GENUINE ♪♪ PRETTY ELEGANT ♪♪ BUT NOT AFRAID TO TELL YOU TO GET A GRIP ♪♪ PROPER ETIQUETTE ♪♪ I KEEP IT TO MYSELF WHEN I CELEBRATE ♪♪ IT'S THAT TIME AGAIN ♪♪ BETTER GRAB YOUR BALLOONS AND INVITE YOUR FRIENDS ♪♪ SEATBELTS BACK ON YEAH STRAP 'EM IN ♪♪ LOOK AT ME EVERYBODY I'M SMILIN BIG ♪♪ ON A ROAD RIGHT NOW THAT I CAN'T PREDICT ♪♪ TELL ME TONE THAT DOWN, BUT I CAN'T RESIST ♪♪ Y'ALL KNOW THAT SOUND BETTER RAISE YOUR FIST ♪♪ THE SEARCH BEGINS ♪♪ I'M BACK SO ENJOY THE TRIP ♪♪♪♪ in this video we are going to talk aboutqueues in data structure see what is thedata structure it is a way of storingand organizing the data right we havediscussed few data structures likearrays linked lists and stacks in thisvideo we will see what is U so Q is whatit is a linear data structure you cansee or you can say Q is an abstract datatype in this video we will discuss Q asan abstract data type ADT means when Isay edit E it means we are going todefine we are going to see the featuresor operations of Q we will not go indetail implementation right see we canimplement Q's using arrays linked listsas well as using stack thatimplementation we will discuss in nextvideo in this video we will see what isQ and what are different operationsperformed on Q fundamental operationsfine as well as we will see someapplications of Q's so let us understandthis concept with a real-life scenariofirst of all right let us suppose thereis a ticket counter fine that's a movieticket counter you can consider rightand now there is no one there in thequeue or in the line fine first of allsuppose you go and you stand there andafter that second third fourth fifthfive persons are there so obviously youif you are the first then you will getthe ticket first then you will go afterthat second person then third and fourthand then fifth and suppose before youthere are five persons and after thatyou reach there so you have you willhave to stand at sixth position rightand you will get ticket after be afteryou know these five persons fineso here the simple funda is whatfirst-in first-out or you can say firstcome first so the person who is first inthe row will get the ticket first rightso now in the queue this funda is knownas first in first out FIFO so Q isbasically what it is a structureit is an ordered list as stack we havediscussed staff is an ordered list thatfollow the principle of Li for last infirst out queue is an collection orqueue is an ordered list which followwhat principle first-in first-outright now what is that principle see youcan say Q is a structure that is goingto follow some restrictions on insertionand deletion operation fine or that isgoing to follow a rule that is going tofollow a principle and what is that ruleinsertion and deletion in case of queueinsertion would be performed from oneend right and the name of that and thatend is known as rear or till right anddeletion would be performed from anotherend and that end is known as head or youcan say friend right in queue if you saymore technically then we will use a rearend front not head and pain and ratherthan insertion insertion means adding adata in the queue fineso the technical name in the for in inthis in the context of queue it is knownas in queue right and deletion is knownas DQ by and in stab this insertion anddeletion is not known as push and popfineso NQ operation should be performed fromone end and DQ operation would beperformed from another end right so wewill see the logical representation ofqueue if you logically represent thequeue it means it will have two ends toopen it right in stab we have only oneend one opponent like and queue would berepresented something like thisit is having two and one is this one isthis right suppose I am taking this endis rear right and this is what friendobviously when you are going toimplement this cue you will have to takefront and rear two variables like thatis must so insertion or you can see NQoperation would be performed from rearfrom here we can insert data in the cubeand if you want to delete data from thequeue it means from the front we can DQwe can delete data right so this is whata logical representation of a queue finesuppose and queue I have right now twoelements two and three at some point oftime right so at that time this frontvariable would be pointing to here andthe rear variable would be pointing tohere right and the index is suppose zeroand one at some point of time we aresuppose we are implementing the skewusing array and at some point of pointof time p.m. only two elements in thatqueue and index is zero and one so frontis zero and rear is one now in this caseif you want to insert third element fromwhere we can insert from this end onlyso what you need to do if suppose thesize of this do we have taken five wecan insert five element the capacity isfive right so now first of all you willincrement this rear right so now rearplus plus that is real would be pointingto this node and now you can insertanother it suppose I have inserted fiveright and if you want to delete thenfrom here only you can delete right sofirst in first out firstly we haveinserted two and that is the firstelement you can delete if suppose youwant tolater this five you cannot directlydelete this five first of all you willhave to delete this two from the queuethen three from that you after that onlyyou can delete this 5 right so it isthat is why it is no it is known as itwill follow FIFO principal love first-infirst-outor you can say last in last out last inlast out somewhere it is also writtenlike this that the same thing lastinteger that is in queued in this 2 is 5and that would be the last element youcan remove so last in last out this is Qso now we will see some operation thatcan be performed on a Q so you candefine Q as it is a ordered list or youcan say it is a collection in whichinsertion can be performed from one endthat is from rear end and a deletion canbe performed from another end that isfrom front end of the queue fine and itis going to follow it is a structure youcan say that is going to follow the FIFOrules that is first-in first-outright so now we will see some operationthat can be performed on Q so twooperation we have discussed that isfirst is n 2 and that is the second isDQ right these are two fundamentaloperations and Q and D Q n 2 meansinserting or adding a data in the q DQms deleting a data from the queuesee here in NQ I'm passing to as anargument because I want to suppose Iwant to insert 2 in the queue then I canpass this in the NQ in DQ no need topass anything because always the elementwould be DQ'd from the front so theelement which is at the front index ofthe queue that would be deleted right sono need to pass anything third may befriend or you can say peek in stack itwas top it means the motto of thisoperator operation is what it is goingto tell you what does the element at thefront of the queue right we will seewhat is the element at the front of thequeue without removing thatfrom the queue or without deterring thatelement from the queue right now isqueue full you can check by is fullfunction it is it will return true ifthe queue is full it will otherwise itwill return phones is empty same we havediscussed in stack if the queue is emptythen it could return true otherwise itwill return false right now see thelogical representation of you so this isthe logical representation of queue fineany end you can take front or rear butyou have to take care of that thingdeletion from front and insertion fromrear right so here I am taking this iswhat front and this is what rear I willinsert always from here delete from hereyou can take front this side rear thisside as you wish but insertion anddeletion would be according to the ruleonly fine now if you want to insert somedata here obviously you need to specifythe size of this queue suppose thecapacity of queue is fine you can saysize I am taking is 5 how will take thesize 5 Huggle implement this throughthat thing we will discuss in next videoso it means I can insert 5 element inthis queue right here I have 3 this endand index is 0 1 2 3 & 4 so initiallythere is nothing in the queue right inthat case what we will do both friendfront end this rear would point to minus1 hypothetically we assume that there isa minus 1 index and these are pointingto minus 1 it means queue is empty rightthat is the signal if this is minus 1 itmeans Q is impeding now I want toinclude 2 now what would happen seefriend is minus 1 rear is also minus 1obviously we will increase front andrear both so front plus plus and rearplus plus also right so now front isalso pointing to here and at this pointof time rear is also pointing to hereat the zero and now we can insert heretoo right now suppose again I want to NQthreeI have hold again function and Q andsuppose ten I want to insert in thatcase what will happensee friend will always point to thisnode the front one the front element wewill not move this front for insertingthe data inserting would be always fromthe rear part so the real variable weare going to move so first of all youwill increase the rear rear plus plusmeans now rear is pointing to here andnow here I can insert ten again supposeI am calling NQ minus 1 again what wewill not touch this front we will movethis rear insertion from drear only thatthing you have to take care rear plusplus means rear would point here and nowhere I can insert minus 1 say at thispoint of time front is 0 and rear is now- right now suppose I am calling DQfunction no need to pass anythingbecause always the data would be deletedfrom front now when you can touch thisfront now we will not touch this rear inDQ we will touch this friend right sonow suppose you want to print the datayou have DQ'd so you can write downprintf the data you have DQ'd is fromthe queue you can print this value andafter that what you will do you will dofront plus plus right so now front ispointing to here front is one rear istwo or in DQ simply you will write frontplus plus that is also fine because nowthis is not a part of queue the part ofqueue is only two elements whateverbetween front and rear that is part ofyou this is now a garbage value and wedon't care what the garbage value lieshere in future if you will access thisselling and usually if you will writehere something that this value would beoverwritten that is fine fine nowsuppose I am calling NQ function 3 timesso now NQ 0 means from rerai I will knowtouch this front from rear I'm whereonly I can insert a year plus plus ayear would be pointing to here and hereI can insert a 0 into one rear plus plushere I can insert one into five thenrear plus plus but what we have the sizetill here onlyso if rear is what rear is equal to fourit means rear is equal to this maximumsize minus one index is 4 now maximumsize is five in that case you will printwe cannot insert any data you means youcan say all flow condition this is allflow condition right so this will printwhat overflow condition this is an hourof overflow condition right and what isunder flow condition suppose you want toDQ and there is nothing in this listright both front and rear are minus onein that case what that is done underflow condition that is to is empathyright now suppose before calling this DQfunction I am calling peak functionafter this NQ but you can say front soit will return what front value is now nbecause C Q is between from front torear that is here to here this is whatgarbage value so I rub this one this isgarbage value right so now this willreturn 10 after that suppose you arecalling DQ function continuously threetimes what would happen first of all DQit means front plus plus front footpoint here again DQ front plus plus AG +DQ front plus plus right means front andrear both are pointing to here now thisis what a garbage value this is not acure suppose I am removing these valuefrom here from these cell because youcan have override these values right nowas you can see both front and rear arepointing to hair both are at same indexso in de you can write down onecondition you can check that conditionalso if front and rear is different isequal to is equal to read in that casewhat it means only one element is therein the queue so what you can do afterremoving this what will what wouldhappen friend and driller is equal tominus one you can set front and rear isequal to minus one because this is thewe have set for em ptq right or if wewill not do this thing then simply sameprocessor front plus plus right frontplus plus means front foot point to herethat is five friend becomes fiveso another condition of checking the inparticular is what if front is greaterthan this rear because rear is stillfour front is five right in that case itmeans Q is empathy friend plus plusmeans we have deleted this Q right sodelete this element from the queue so itmeans Q is empathyso when friend becomes greater than weare then also it is empathy so we aregoing to see how to write down thesecondition in next videofine now suppose if you talk about thetime complexity then in that case theseoperations would take order of one onlybecause we are not going to write anyloops or anything for performing theseoperations so it would take order of oneonly right constraint time now supposeat some point of time both friend andBria are pointing to this nodeit means Q is having only one data thisthis this this these four cells areempty right and now if you call NQ inthat case it would return what Q is fullthat is the drawback why it will returnQ is full because see see here near iswhat pointing to for or ear is for thatis maximum size minus one and that iscondition of what or flow conditionmeans the Q is full now it will show youQ is full right but see these spaces arefree but we cannot insert here this iswhat wastage of the space so this is adrawback of this Q we have a solution ofthis cube that is the circular queuethat also I will discuss later fineso but this is now a drawback you havespace but you cannot insert here dataright now we will see some applicationsof Q so the most common application ofthis queue data structure is what it isused where you want to you know servethe request on a single shared resourcesuppose you have a single resource andthat is sharedlet us take you you can take an exampleof printer suppose you have one printerand that is shareable fine so what wouldhappen it's not like that suppose thereare five pcs and these five pieces aresharing one printer it's not like thatit will give command and this will printand at the same time it will print itwill give command and it will printright what this printer will do supposethis this has given some command toprint a date and now the printer isprinting now at the same time computerthis tree it has given command to thisprinter then what would happen theprinter is busy 'no so what printer willdo it will obviously it will have aprogram so that request would be storedin queue after that suppose this printerwould give the request so it would storehere after that this this would storehere so it will in the memory in theprinter memory it will what make a queueof all the requests right first of allit will print whatever the request ithas even then it will fulfill requestsof three then two like this right andqueues are also used in real lifescenario like you can take an example ofa new oil in customer care thensometimes they tell you that they tellyou to hold on for a few minutes becausetheir representative is not free so whatthey do they use queues to put thepeople on hold right until theirrepresentative are free finenext you can take an example ofprocessor see you have only oneprocessor CPU you can see right so theprocesses would be placed in queue inoperating system I guess we havediscussed many times when we werediscussing the concept of operatingsystem then you can check out in theplaylist there are ready queue there arewaiting queue fine so the processeswould be put in the queue and as soon asprocessor gets free it will take fromthe queue it will take the processesfrom the queue one by one right so allthe processes are also put in the queueright because processor is what it is ashareable resource any process all theprocesses can share this processorbut obviously we cannot execute all theprocesses at the same time so you haveto put those processes and waiting oryou can say those processes are put inqueues right so these are some examplethese are some applications of queuedata structure and there are many moreapplications of youth' we will discussall these one-by-one in later videos soin next video basically we will discusshow to implement queue using arrays andthen using linked lists and then usingstacks fine so I'll send the next videotill then bye bye take care hi everyone welcome to nourishtechnologies this is inverse so today weare going to discuss about queue datastructure so what is the Q so Q is analgorithm Q is an algorithm and simplythis is a data structure first one it isalgorithm second one it is datastructure to arrange the data in aparticular format and third one it is alinear data structure nothing butarrangement of elements in a linear formone after another and next one next oneit follows a rule nothing but thecomplete inflammation of a queue basedon a simple rule that is first in firstoutFIFO first in first out right here it ishow we can implement the queue right toimplement the queue we can use eitherstatic arrays or a dynamic arrays we canimplement using static arrays or we canuse a dynamic arrays a static arraysmeans what is a fixed in size fix it insize and here it is the size variesautomatically the size varies depends onthe number of elements storing the sizewill increase and if you want to deletesome of the elements the size willdecrease automatically okay so this is Qimplementation with the help of a staticarrays we can implement and with thehelp of a dynamic arrays we canimplement so how the Q structure will beand so what all the operations we canperform on the q see for example so thisis the Q structure this is the Qhere here we can store the elements thisis simply so we can call it as a cueright so how ask you will be created forexample a static declaration simply inteaser here it is a cue and the size wehave given five so five locations willbe created five locations and here it isso what all the operations we canperform on the cue first one we caninsert element second one we can deleteelement and next one we can display allthe elements in the queue displayelements in the queue and all theseoperations we can perform how means whatinsertion operations deletion operationshow we can insert an element into thequeue and how can we delete an elementfrom the queue simple insertions fromwhere from rail here it is we can insertthe elements and how can we delete theelements deletion from the front sothese variables are mandatory thesevariables are mandatory whenever we areperforming operations right in a queueimplementation of a queue in thatprogram we must use a front variable andrare variable to perform all theoperations on the queue okay so how toinsert the element and how to delete theelement observe friend always shouldpoint into the first location we cannotmove the front value front alwayspointing to the first location that is afixed memory location and next one whereinitially rare is also pointing to theforelocations are wiser because no elementsin this queue no elements so front ispointing to zero and the rare is alsopointing to zero friend value zero andrare value is also zero suppose if youwant to insert an element we need toinsert in the rare position only what isa rare position zero right if you wantto insert use the rare variable if youwant to delete use the front variable sohere rare variable I am using I amstoring the element supposed 10 nothingbut we are inserting like this and itwill travel and it will stay here nextafter insertion now rare position willchange rare position shift to hearnothing but rare value is a one rarevalue is a one next one next wheneveryou insert the element here it is a 2020 after insertion of 20 now rare stoppointing to second one rare is pointingto the next location rare value is a twonext we are inserting like this 30 weare inserting it stop pointing it willbecome three and it pointing to this onenext we are inserting 40 it stoppointing rare value become 4 it ispointing to this one next we areinserting 50 then it stop pointing rareis pointing to the outside locationwhere value 5 rare value 5 so nowwhenever we are trying to insert a newelement into the queue right it willgive 1 error messagewhat is that q is already full q isalready full because here it is a allthe five elements inserted into a queuethe size is a 5 so sixth element youcannot store then what operation we haveto perform means either you go fordisplay or you can go for delayan operation right here it is the friendif you want to delete it then we shoulddelete this onedelete generally the people saying afterdeletion of a first element front weshould move to this next location thatis completely wrongsuppose if you move the front locationdirectly to next next next finally itwill reach that end that is not possiblethink generally for example in your cueline here it is a ticket counter isthere just consider ticket counterso first person got the ticket and theperson come out of the queue line thenremaining people will move in the sameway or remaining all the elements weshould shift that is the processdeletion of a front element is nothingbut we need to shift all the elements inthe queue line right we need to shiftthen automatically the rail also righthere it is 20 come to here 30 come tohere 40 here 50 here now now the rail ispointing and of course 50 will be hereonlynext the rear is pointing to 4 red ispointing to 4 is now pointing to thisone because we have to decrease the rarevalue because we are deleting oneelement from the queue so automaticallya location will become empty there youcan store the new value we already knowthat it is impossible to delete the datawhich is inside the memory location whatwe can do only we can overwrite theinformation so that is why here it isthese elements are overridden but stillin this location 50 is there then whatwe should do next suppose if you want toinsert another element that we areinserting in the rare position by thetime 50 will be replaced with to someother value 60 that is replacing theinformation you can't delete theinformation which is ininside the queue not only inside thequeue inside the memory location in anyprogramming language we know that basicsright here it isnow the rare is always again pointing tothat next node like that so like thatsuppose if you are deleting continuously20 we are deleting then we're become 430we are deleting we're become 340 we aredeleting rare become 250 we are deletingwe're become 160 we are deleting we'rebecome zero rare becomes zero nothingbut all the elements we inserted all theelements we deleted now front value iszero and rare value is zero what is themeaning whenever front and rear both areequals two zeros that is what we calledqueue is empty no elements in thebeginning also whenever you created thenode by that time no elements wereinserted so by the time also initiallyfront is pointing to the first locationrare is pointing to the first locationwhenever both the values are same thatwe can call it as it clearly right frontand rear equals zero means queue isempty queue is empty so this is how weare inserting the elements and how weare deleting the elements how we arechecking queue is full or not how we arechecking queue is empty or not right allthese things okay so this is all about atheoretical concept of a queueimplementation okay in the next sessionwe will see how to implementprogrammatically this queue thank youfor watching for more videos pleasesubscribe to narration 80 channelyou in this video we are going to talk aboutqueues in data structure see what is thedata structure it is a way of storingand organizing the data right we havediscussed few data structures likearrays linked lists and stacks in thisvideo we will see what is U so Q is whatit is a linear data structure you cansee or you can say Q is an abstract datatype in this video we will discuss Q asan abstract data type ADT means when Isay edit E it means we are going todefine we are going to see the featuresor operations of Q we will not go indetail implementation right see we canimplement Q's using arrays linked listsas well as using stack thatimplementation we will discuss in nextvideo in this video we will see what isQ and what are different operationsperformed on Q fundamental operationsfine as well as we will see someapplications of Q's so let us understandthis concept with a real-life scenariofirst of all right let us suppose thereis a ticket counter fine that's a movieticket counter you can consider rightand now there is no one there in thequeue or in the line fine first of allsuppose you go and you stand there andafter that second third fourth fifthfive persons are there so obviously youif you are the first then you will getthe ticket first then you will go afterthat second person then third and fourthand then fifth and suppose before youthere are five persons and after thatyou reach there so you have you willhave to stand at sixth position rightand you will get ticket after be afteryou know these five persons fineso here the simple funda is whatfirst-in first-out or you can say firstcome first so the person who is first inthe row will get the ticket first rightso now in the queue this funda is knownas first in first out FIFO so Q isbasically what it is a structureit is an ordered list as stack we havediscussed staff is an ordered list thatfollow the principle of Li for last infirst out queue is an collection orqueue is an ordered list which followwhat principle first-in first-outright now what is that principle see youcan say Q is a structure that is goingto follow some restrictions on insertionand deletion operation fine or that isgoing to follow a rule that is going tofollow a principle and what is that ruleinsertion and deletion in case of queueinsertion would be performed from oneend right and the name of that and thatend is known as rear or till right anddeletion would be performed from anotherend and that end is known as head or youcan say friend right in queue if you saymore technically then we will use a rearend front not head and pain and ratherthan insertion insertion means adding adata in the queue fineso the technical name in the for in inthis in the context of queue it is knownas in queue right and deletion is knownas DQ by and in stab this insertion anddeletion is not known as push and popfineso NQ operation should be performed fromone end and DQ operation would beperformed from another end right so wewill see the logical representation ofqueue if you logically represent thequeue it means it will have two ends toopen it right in stab we have only oneend one opponent like and queue would berepresented something like thisit is having two and one is this one isthis right suppose I am taking this endis rear right and this is what friendobviously when you are going toimplement this cue you will have to takefront and rear two variables like thatis must so insertion or you can see NQoperation would be performed from rearfrom here we can insert data in the cubeand if you want to delete data from thequeue it means from the front we can DQwe can delete data right so this is whata logical representation of a queue finesuppose and queue I have right now twoelements two and three at some point oftime right so at that time this frontvariable would be pointing to here andthe rear variable would be pointing tohere right and the index is suppose zeroand one at some point of time we aresuppose we are implementing the skewusing array and at some point of pointof time p.m. only two elements in thatqueue and index is zero and one so frontis zero and rear is one now in this caseif you want to insert third element fromwhere we can insert from this end onlyso what you need to do if suppose thesize of this do we have taken five wecan insert five element the capacity isfive right so now first of all you willincrement this rear right so now rearplus plus that is real would be pointingto this node and now you can insertanother it suppose I have inserted fiveright and if you want to delete thenfrom here only you can delete right sofirst in first out firstly we haveinserted two and that is the firstelement you can delete if suppose youwant tolater this five you cannot directlydelete this five first of all you willhave to delete this two from the queuethen three from that you after that onlyyou can delete this 5 right so it isthat is why it is no it is known as itwill follow FIFO principal love first-infirst-outor you can say last in last out last inlast out somewhere it is also writtenlike this that the same thing lastinteger that is in queued in this 2 is 5and that would be the last element youcan remove so last in last out this is Qso now we will see some operation thatcan be performed on a Q so you candefine Q as it is a ordered list or youcan say it is a collection in whichinsertion can be performed from one endthat is from rear end and a deletion canbe performed from another end that isfrom front end of the queue fine and itis going to follow it is a structure youcan say that is going to follow the FIFOrules that is first-in first-outright so now we will see some operationthat can be performed on Q so twooperation we have discussed that isfirst is n 2 and that is the second isDQ right these are two fundamentaloperations and Q and D Q n 2 meansinserting or adding a data in the q DQms deleting a data from the queuesee here in NQ I'm passing to as anargument because I want to suppose Iwant to insert 2 in the queue then I canpass this in the NQ in DQ no need topass anything because always the elementwould be DQ'd from the front so theelement which is at the front index ofthe queue that would be deleted right sono need to pass anything third may befriend or you can say peek in stack itwas top it means the motto of thisoperator operation is what it is goingto tell you what does the element at thefront of the queue right we will seewhat is the element at the front of thequeue without removing thatfrom the queue or without deterring thatelement from the queue right now isqueue full you can check by is fullfunction it is it will return true ifthe queue is full it will otherwise itwill return phones is empty same we havediscussed in stack if the queue is emptythen it could return true otherwise itwill return false right now see thelogical representation of you so this isthe logical representation of queue fineany end you can take front or rear butyou have to take care of that thingdeletion from front and insertion fromrear right so here I am taking this iswhat front and this is what rear I willinsert always from here delete from hereyou can take front this side rear thisside as you wish but insertion anddeletion would be according to the ruleonly fine now if you want to insert somedata here obviously you need to specifythe size of this queue suppose thecapacity of queue is fine you can saysize I am taking is 5 how will take thesize 5 Huggle implement this throughthat thing we will discuss in next videoso it means I can insert 5 element inthis queue right here I have 3 this endand index is 0 1 2 3 & 4 so initiallythere is nothing in the queue right inthat case what we will do both friendfront end this rear would point to minus1 hypothetically we assume that there isa minus 1 index and these are pointingto minus 1 it means queue is empty rightthat is the signal if this is minus 1 itmeans Q is impeding now I want toinclude 2 now what would happen seefriend is minus 1 rear is also minus 1obviously we will increase front andrear both so front plus plus and rearplus plus also right so now front isalso pointing to here and at this pointof time rear is also pointing to hereat the zero and now we can insert heretoo right now suppose again I want to NQthreeI have hold again function and Q andsuppose ten I want to insert in thatcase what will happensee friend will always point to thisnode the front one the front element wewill not move this front for insertingthe data inserting would be always fromthe rear part so the real variable weare going to move so first of all youwill increase the rear rear plus plusmeans now rear is pointing to here andnow here I can insert ten again supposeI am calling NQ minus 1 again what wewill not touch this front we will movethis rear insertion from drear only thatthing you have to take care rear plusplus means rear would point here and nowhere I can insert minus 1 say at thispoint of time front is 0 and rear is now- right now suppose I am calling DQfunction no need to pass anythingbecause always the data would be deletedfrom front now when you can touch thisfront now we will not touch this rear inDQ we will touch this friend right sonow suppose you want to print the datayou have DQ'd so you can write downprintf the data you have DQ'd is fromthe queue you can print this value andafter that what you will do you will dofront plus plus right so now front ispointing to here front is one rear istwo or in DQ simply you will write frontplus plus that is also fine because nowthis is not a part of queue the part ofqueue is only two elements whateverbetween front and rear that is part ofyou this is now a garbage value and wedon't care what the garbage value lieshere in future if you will access thisselling and usually if you will writehere something that this value would beoverwritten that is fine fine nowsuppose I am calling NQ function 3 timesso now NQ 0 means from rerai I will knowtouch this front from rear I'm whereonly I can insert a year plus plus ayear would be pointing to here and hereI can insert a 0 into one rear plus plushere I can insert one into five thenrear plus plus but what we have the sizetill here onlyso if rear is what rear is equal to fourit means rear is equal to this maximumsize minus one index is 4 now maximumsize is five in that case you will printwe cannot insert any data you means youcan say all flow condition this is allflow condition right so this will printwhat overflow condition this is an hourof overflow condition right and what isunder flow condition suppose you want toDQ and there is nothing in this listright both front and rear are minus onein that case what that is done underflow condition that is to is empathyright now suppose before calling this DQfunction I am calling peak functionafter this NQ but you can say front soit will return what front value is now nbecause C Q is between from front torear that is here to here this is whatgarbage value so I rub this one this isgarbage value right so now this willreturn 10 after that suppose you arecalling DQ function continuously threetimes what would happen first of all DQit means front plus plus front footpoint here again DQ front plus plus AG +DQ front plus plus right means front andrear both are pointing to here now thisis what a garbage value this is not acure suppose I am removing these valuefrom here from these cell because youcan have override these values right nowas you can see both front and rear arepointing to hair both are at same indexso in de you can write down onecondition you can check that conditionalso if front and rear is different isequal to is equal to read in that casewhat it means only one element is therein the queue so what you can do afterremoving this what will what wouldhappen friend and driller is equal tominus one you can set front and rear isequal to minus one because this is thewe have set for em ptq right or if wewill not do this thing then simply sameprocessor front plus plus right frontplus plus means front foot point to herethat is five friend becomes fiveso another condition of checking the inparticular is what if front is greaterthan this rear because rear is stillfour front is five right in that case itmeans Q is empathy friend plus plusmeans we have deleted this Q right sodelete this element from the queue so itmeans Q is empathyso when friend becomes greater than weare then also it is empathy so we aregoing to see how to write down thesecondition in next videofine now suppose if you talk about thetime complexity then in that case theseoperations would take order of one onlybecause we are not going to write anyloops or anything for performing theseoperations so it would take order of oneonly right constraint time now supposeat some point of time both friend andBria are pointing to this nodeit means Q is having only one data thisthis this this these four cells areempty right and now if you call NQ inthat case it would return what Q is fullthat is the drawback why it will returnQ is full because see see here near iswhat pointing to for or ear is for thatis maximum size minus one and that iscondition of what or flow conditionmeans the Q is full now it will show youQ is full right but see these spaces arefree but we cannot insert here this iswhat wastage of the space so this is adrawback of this Q we have a solution ofthis cube that is the circular queuethat also I will discuss later fineso but this is now a drawback you havespace but you cannot insert here dataright now we will see some applicationsof Q so the most common application ofthis queue data structure is what it isused where you want to you know servethe request on a single shared resourcesuppose you have a single resource andthat is sharedlet us take you you can take an exampleof printer suppose you have one printerand that is shareable fine so what wouldhappen it's not like that suppose thereare five pcs and these five pieces aresharing one printer it's not like thatit will give command and this will printand at the same time it will print itwill give command and it will printright what this printer will do supposethis this has given some command toprint a date and now the printer isprinting now at the same time computerthis tree it has given command to thisprinter then what would happen theprinter is busy 'no so what printer willdo it will obviously it will have aprogram so that request would be storedin queue after that suppose this printerwould give the request so it would storehere after that this this would storehere so it will in the memory in theprinter memory it will what make a queueof all the requests right first of allit will print whatever the request ithas even then it will fulfill requestsof three then two like this right andqueues are also used in real lifescenario like you can take an example ofa new oil in customer care thensometimes they tell you that they tellyou to hold on for a few minutes becausetheir representative is not free so whatthey do they use queues to put thepeople on hold right until theirrepresentative are free finenext you can take an example ofprocessor see you have only oneprocessor CPU you can see right so theprocesses would be placed in queue inoperating system I guess we havediscussed many times when we werediscussing the concept of operatingsystem then you can check out in theplaylist there are ready queue there arewaiting queue fine so the processeswould be put in the queue and as soon asprocessor gets free it will take fromthe queue it will take the processesfrom the queue one by one right so allthe processes are also put in the queueright because processor is what it is ashareable resource any process all theprocesses can share this processorbut obviously we cannot execute all theprocesses at the same time so you haveto put those processes and waiting oryou can say those processes are put inqueues right so these are some examplethese are some applications of queuedata structure and there are many moreapplications of youth' we will discussall these one-by-one in later videos soin next video basically we will discusshow to implement queue using arrays andthen using linked lists and then usingstacks fine so I'll send the next videotill then bye bye take care Hello, busy people!Hit the bell iconand never miss any update from me.Yours truly, Mahatalli.Excuse me! Can I have your pen? - I'm using it right now.Is your name Siri? - Yes. - Nice name.Thanks. - Once you are done writing..It is getting late. Sir, can I have your pen?I hate coming to banks. So many customers?There are 6 in this line and 3 in this line. So, this is better.Now, this is better. Teller didn't arrive yet? - He'll be here soon.Where is the teller? - He'll be here soon. Keep waiting.We've been waiting for 15 minutes. - Like I said, he'll be back.What the hell is this? - 'Who the hell are you?'Such delay! Excuse me. - Yes?I don't have a pen on me. Do you mind keeping my place?I'll just step out, buy a pen and come back. Please, keep my place till then.'I should've stood in the other queue. I should've atleast brought my headsets.'When will the teller arrive?This episode was amazing. Wonder what would happen in the next episode.Next episode? It means I've been standing here for 20 minutes.Excuse me, the teller has been gone for 20 minutes! - Is this your first time to this bank?Yeah! - Be patient. Don't get so worked up.How I wish I'd have come later!But it'll get even more crowded later. This is so irritating.Don't get irritated. Be patient. The teller will be here soon.Hello, all! - Finally!First things first, the puja.If you've got rituals to do, you better come early.Now he is performing a puja? - I wish this idiot atleast gives us the Prasad.You think this is a temple to perform a puja? What an irresponsible banker he is!Be patient, ma'am.I didn't wait this eagerly even for Prabhas's entry in Bahubali.Please, see to it that the day goes well.Why this delay again? - Take this and get out.Sir, I'm so sorry. I didn't mean to hurt you. - Can't you see I'm working on your problem? Keep calm.Finally! Thank God! Only five more to go.Thank God! Only two more to go. - No, five more to go.I meant, only two more episodes in the season. - I see. Game of Thrones?I'm a huge fan! Which season are you in?Season 7. - Season 8 is out. I'm not finding time to watch it.Neither do I find time to watch. I watch whenever I wait in bank queues.When did you watch the previous 6 seasons? - While standing in bank queues.Excuse me! Could you please hurry up! - I am. Let me deposit my money.How much more money would he deposit here, like this were the Swiss Bank.Four more to go. Only four more to go!Still four more to go?Excuse me, why is he taking so long? - You'd now when it is your turn.Guys, hurry up!What is with this unruly behaviour? You see that? Maintain queue.No, it wasn't me. Be patient. - Can't you guys hurry up?You've been waiting only for 10 minutes. I've been waiting here for like 10 hours.You, Sotari. That teller is also a Sotari. - Push forward.Hey, you in dark blue, be patient. - Mind your damn business.Could you please hurry up. - Be patient.Please, excuse me. I'm in a hurry. - So are we.I'm stuck in an emergency situation. - Calm down. Be patien.. - Yeah, fine.What an irresponsible citizen! - He isn't patient, atleast you be patient.Sir, please process my form. It is an emergency.Sir, please type the data quickly. Please, sir, hurry up. Faster.Sir, hurry up! Please.. - I am, take it easy.Is it done? - Yes. - Thank you, sir.'This is how you should avoid the queues. Bunch of fools you all are.'Get out now. - You guys spend your lifetimes in queues.We've been waiting for hours, but he got his work done in a jiffy. How?Didn't you get it? He lied! We all Indians are emotional fools! Irresponsible citizens!Don't get so worked up. Calm down and be patient.Two more to go. - Please, deposit this amount.May I have your PAN card? - What is that for?That is a new guideline introduced by our bank. - I didn't know that before. - But, now you do.You guys are sick! I've waited in the line for hours.. - Be patient!You better shut up! How do I disolve my account with you guys? I'll disolve it right away!There is the queue for that.I've a soft copy of the PAN card. - I'd have prefered you spoke softly.How long do I still wait? - It is done!The episode is done? - No, the whole season is done.If I wait here a little longer, winter would actually come. - Yeah, winter is coming!That was a Game of Thrones reference.You are at the wrong counter. Move to the next counter.What? I wasn't informed. - No one informs no one. You should be informed.Sir, tell me what I can do now. - All you can do is stand in that queue.Next customer! Move away!I am a guy who tells every one to be patient and you test my patience?How am I know this isn't the right counter? There are not even any sign boards here!I work with the press! I'll ruin you guys! - Next customer!Sir, be patient.Excuse me. You remember me? I'm the guy who asked you to hold my place.I recollect. You left the queue many hours ago.Your money would be credited soon. - That was fast.Time for lunch. - Why did you close the counter?What!Hey, guys! I'm sure you met such people while standing in long queues.In case you did, give it a like and comment and let me know if I missed anything.And don't forget to subscribe! I'm dressed this way as I'm at a wedding.Bye for now! I'll see you next Wednesday. In our previous lesson, we introduced you toQueue data structure. We talked about Queue as Abstract Data Typeor ADT. As we know when we talk about data structure as Abstract Data Type,we define it as a mathematical or logical model.We define only the features or operations available with the datastructure,and do not go into implementation details.In this lesson, we are going to discuss possible implementation of a Queue.I will do a quick recap of what we have discussed so far.A Queue is a list of collection with thisrestriction with this constraint, that insertion can be performed atone end, that we call rear of Queueor tail of Queue and Deletioncan be performed at other end that we call the front of Queueor the head of Queue. An insertion  in Queue is called enqueue operation. A deletion is calleddequeue operation. I have defined Queue ADT with these Four operations that have written here,in an actual implementation all these operations will be functions, front operation should simply return the element at front of Queueshould not remove any element from the Queue,Isempty should simply check whether Queue is empty or notand all these operations must take constant time.Enqueue, dequeue or looking at element at front,the time taken for any of these operations must not dependupon a variable like number of elements in Queueor in other words, and complexity of all theseoperations must be O(1).Okay! So let's get started, we are saying thata Queue is a special kind of list, in whichelements can be inserted or removed one at a timeand insertion and removal happen atdifferent ends of the Queue. We can insert an element at one end and we can remove an element from the other end,just the way we did it for stack. We can add these constraints or extraproperties of Queueto some implementation of a list and createa Queue. They're two popular implementations of Queue,we can have an array based implementation and we can have linkedlist based implementation.Let's first discuss array-based implementation.Let's say we want to create a Queue of integers.What we can do is we can first create anarray of integers. I have created an array of 10 integers here. I have named this array A, now what I'm going to do is, I'm going to use thisarray to store my Queue, what I'm going to say is thatat any point, some part after array starting an indexmarked as front, till an indexmarked as rear will be my Queue.In this array I'm showing front of the Queue toward left andthe rear towards right. In earlier examples I was showingfront towards right and rear towards left.Doesn't really matter, any side can be front and any side can berear, it's just that an element must always beadded from rear side and must always be removedfrom front. So if at any stagea segment of the array from an index marked as fronttill an index marked as rear is my Queueand rest of the positions in the  array are free space,that can be used to expand the Queue.To insert an element to enqueue, we can increment rear,so we will add a new cell in the Queue towardsrear end and in this cell, we can write the new valueelement to be inserted can come to this position.I fill in some values here at these positions.So we have these integers in the Queue andlet's say we want to insert number 5. To insert we will increment rearofcourse there should be an available cell in the right,an available empty cell in the right and now we can writevalue 5 here. After insertion new rear index is 7, and value at index 7 is5. Now dequeue means we must remove an element from front of Queue.In this example, here a dequeue operation should remove number 2 from the Queueto dequeue, we can simply increment frontbecause at any point only the cells starting fronttill rear are part of my Queue. By incrementing front I have discardedindex 2 from the Queue and we do not care what value lies in a cell,that is not part of the Queue, when we will includecell in the Queue we will overwrite the value in that cellanyway. So just incrementing front is good enoughfor dequeue operation. Let's quickly write pseudocode forwhatever we have discussed so far. In my code I will have 2variables named front and rear, and initiallyI'll set them both as -1. Let's say forand empty Queue both front and rearwill be -1. To check whether Queue is empty or notwe can simply check the value of front and rearand if they're both -1 we can say that  Queue is empty.I just wrote isempty function here. -1 is nota valid index. For an empty Queue there will be no front andrear. In our implementation we are saying that we will representempty state of Queue by setting both frontand rear as -1.Now let's write the enqueue function. Enqueue will takeinteger x as argument, there will be a couple of conditions in enqueue.If rear is already equal to maximum indexavailable in array A, We cannot insert or enqueue an elementin such scenario we can return and exit.I would rather use a function named  isfull todetermine whether Queue is full or not. If Queue is already full, we can't do much weshould simply exit,else if Queue is empty we can addcell to the Queue, we can add cellat index 0 in the Queue, and now the we can set value at indexrear as x. In all other cases, we canfirst increment rear, andthen we can fill-in value X at index rear.I can get a statement a[rear] = X outside these two conditional statementsbecause it's common to them, so this is my enqueue function.In the example array that I'm showing here let's enqueue some integers.I'll make calls to enqueue function and show you the simulation.In the figure here, let's say first I want to insert number 2in the Queue, I'm making a call to enqueue function passingnumber 2 as argument. The Queue is empty, sowe will set both front and rear as 0.Now we will come to this statement, we will write value 2 at index 0.So this is Queue after one enqueue operation, front andrear of the Queue is same. Let's make another call to enqueue,this time I want to insert number 5. this time Queue is not empty,so rear will be incremented. We have addeda cell to the Queue by incrementing rear and now we will write the value5 at the new rear index.Let's enqueue 1 more number. I have  enqueued 7.Let's not write dequeue operation. There will be couple of cases in dequeue.If the Queue is already empty, we cannot remove an elementIn this case we can simply print or throw an error,and return or exit. There will be one more special case,if the Queue has only one element.  In this case,front and rear will not be -1 but they will both beequal, because we are already checking for -1 case inisempty function in the previous if. In this else if we can simplycheck whether front is equal to rear or not, if this is the casea dequeue will make the Queue empty, and to mark to  Queue asempty, we need to set both front and rearas -1. This is what we had said, that we willwould represent and empty Queue by marking bothfront and rear as -1. In default or normal scenario,we will simply increment front, we should really be carefulabout corner cases in any implementation,that's fair most of the Bugs come. Okay, so this finally is my dequeue function.In this example here at this stage, let's say be want to performa dequeue, Queue is not empty and we do not have only one element in the Queue.So people simply increment front, before incrementing we could set thevalue in this cellat index 0 as something, but the value in a cell that is not part of Queueanymoredoesn't really matter. At this stage it doesn't really matter what we have atindex 0 or index3 or any other index apart the segment between front and rear.When we will add a cell in the Queue, we will overwrite the value in that cell anyway.Let's now perform some more enqueues and dequeues.I'm enqueuing 3 and then I'm enqueuing1, with each enqueue we are incrementing rear.I just performed some more enqueue here. Now let's the perform a dequeue.If I'll perform one more enqueue here, rearwill be equal to the maximum index available in the array. Let'senqueue one more now at this stage, we cannotenqueue an element anymore because we cannot increment rear.Enqueue operation will fail now.  There are two unusedcells right now but with whatever logic we have written,we cannot use these two cells that are in the left of frontin fact this is a real problem. As we will dequeue more and more,all the cells left of front index will never be used again they will simply bewasted.Can we do something to use these cells? Well,we can use the concept of a Circular array. Circlular array is an idea that weuse in a lot of scenarios.The idea is very simple, as we traverse an arraywe can imagine that there is no end in the array, from 0 we can go to 1, from1, we can go to2, and finally then we will reach the last index in the array.Like in this example, when we are at index 9the next index for me is index 0. We can imagine this arraysomething like this, remember this is only a logical way of looking at thearray.An circular interpretation of array, if I'm pointing to a position and my currentposition isi then the next position or next index will not simply be i + 1,it will be i + 1 Modulo the number ofelements in array or the size of array. Let's say,N is the number of elements in array, then the next position will bei + 1 Modulo N. The modulo operation will get usthe remainder upon dividing by N forany i other than N - 1. This modulo operational will not have any effect,but for i = N - 1 next position will beN module N which will be equal to 0. When you divide the number byitself,the remainder is 0. Previous position in circular interpretation ofarray,will be I + (N - 1) modulo N.We could simply say I-1 modulo N, just to make sure this expression insidethe parenthesis is always positive,I'm adding N here. Give this some thought. You should be able to get why it shouldbe(i + (N - 1)) modulo N. Now with this interpretation of array,we canincrement rear in an enqueue operationas long as there is any unused cell in the array.I'm going to modify functions in my pseudo code now.Isempty will remain the same we are still saying that, for an empty Queuefront and rear will be -1.Let's scroll down and come to enqueue. Now, in circular interpretation I will call myQueue full, when the position next to rearin circular interpretation that we will calculate as(rear + 1) modulo N, will be equal tofront, so we will have a situation like this. Right now,the next position to rear in circular interpretationis front. So there is no unused cell. The completearray is exhausted. Nothing will change in this condition.If Queue is empty, we can simply set front and rear as 0.In the last else condition, we will increment rearlike this, we will say  rear = (rear+1) modulo Nwhere N is number of elements in the array. With this much change, my enqueue function isgood.Now let's make a call to enqueue and insert somethingin this array here, I want to insert number 15.We will come to this last else condition, Rear right now is 9, so thisexpressionwill be (9 + 1) modular N, N is 10 herethe size of this array A is 10 here.This will evaluate to 0, now my new rearis 0. I'll write number 15 here.Let's now see what we need to do in dequeue function.Nothing will change in the first two conditions, if Queue is already emptyor if there is only one element in the Queue, we will handle these casesin same manner in the final else when we are incrementing front,we need to increment it in a circular manner so we will say fornt = (front + 1) modulo Nwhere N is the number of elements in the array,  total number of elements in the array, or sizeof array.Now let's perform a dequeue, we will come to this condition front right nowis 2 so this will be (2 + 1) modulo 10,one more cell is available to us now.This much is the core of our implementation. Front operation will bereally straightforward, we simply need to return the element at front index.Here also, we first need to check whether the Queue isempty or not, we should return a[front] only whenfront is not equal to -1. All these operations all these functions that havewritten here will take constanttime, there complexity will be O(1). We are performing simple arithmetic andassignments in the functions,and not doing anything costly like running the loop,so time taken will  not depend upon size of Queue or some other variable.I leave this here it should not be very difficult converting this pseudo codeto arunning program in a language of your choice, If you want to see my codeyou can check the description of this video for a link. Thanks for watching. [Music]please go where there's no place spaceis there what space just please go[Music]so can I just go to the toilet and comeback you're all mismatched Thanks hellohello hello hello receive my slow lanelay it on me[Music]you honor me for nice TVs dead[Music]what was just amada-kunthat's just moon and I'll be back ohyeah I'm just trying to keep chivalrylab the best I canmaybe you could give me a number putyour number of my phone maybe I call youon your cell phone I mean I think yougot shades on I got a song[Music]he's coming the line so say better Ihave arthritiswe've been waiting from morning if Itake you please come in the length yes[Music]the mark with a single it's quite windyup thereit is conditions not ideal but at leastwe're playing it's cold there's a coupleof Eskimos polar bears you name itthey're out there as well they couldthese two got a good understanding RohitSharma chika Darwin now they run prettywell as tight Joe root is pumped up Idon't want him alone up in the final itsintensity that's been the key to Indy[Music] hi guys welcome back today I am going todiscuss with here with you how torepresent a graph in computer I'm goingto discuss with you the most popular twomethods for representing a graph incomputer ok the two methods are firstone is at the sensing matrix and secondone is at the senseilist first one yields this matrix andsecond one is at this NC list these arethe most popular two methods okayalthough we have more method that is Iguess multi list is also there but I amgoing to discuss with you these twomethods adjacency matrix and Addison Clist now how to represent a graph incomputer see this is the pictorial viewyou can easily draw a graph on thiswhiteboard like this but when you aregoing to represent a graph in computerthen you have to use something okay youhave to use some methods to representthis graph in computer so these are twomethods then one is matrix and one islist first one is I am going to discusswith you this this methodEdison C matrix so matrix is simply inmathematics you know matrix is what Mcross n where m is the number of rowsand n is number of column something likethis number of rows and number ofcolumns so in this case let us take thisexample this one is our graph and youare supposed to represent this graphusing this adjacency matrix then how youwill represent it this adjacency matrixwould be n cross n matrix and where n iswhat number of vertices in the graphokay now how you will represent it thisone is our matrix there should be ncross n matrix where n is what number ofvertices how many number of vertices 1 23 4 5 then 1 2 3 4 5 number of rowswould be there andfive number of columns would be therethis one should be 5 cross 5 matrix nowwe are supposed to fill out theseentries now see 1 2 1 is there any loopis there any loop in this graph loopmeans the edge would start from the samenode and would add end on the same nodelike this this would be a loop if youhave say check out you have any loop inthis graph no you don't have any loopthat's why the diagonal elements wouldbe 0 3 2 2 3 4 2 4 there is no edge and5 2 5 no edge okay now check out 1 2 2 12 2obviously it is undirected graph ok sothis edge would be considered as 1 to 2also and 2 to 1 also okay one two - yeswe have edge between 1 to 2 then you canwrite down 1 1 2 3 no we don't have anyedge direct edges between 1 2 3 that waythat's why it is 0 1 2 4 yes we have 1 24 we have an edge 1 2 5no we don't have now 2 2 1 2 2 and yeswe have because this edge is whatundirected edge so this is alsoconsidered from 1 to 2 and 2 to 1 by 2 23 2 2 3 yes we have 2 to 4 yes we have 2to 5 no we don't have any direct or anyedge between 2 to 5 3 2 1 you have 3 2 1no we don't ow 3 to 2 yes we have 3 2 tosee this one three to three no three tofour yes we have three to five yes nowfour to oneyes for two - yes this one for two threeyes four to five yes five to one no fiveto two no five to threeyes we have and five to four yes we havefineso you can simply write down like thisokay now yousimply write down the definition of thisaddition C matrix is what it is a matrixyou can say a n cross n we arerepresenting the matrix with a and nwhere n is the number of vertices nwould be the number of rows and n willbe the number of columns and how youwill fill these entries a of I J thisone is J is equal to 1 if I and J are atthis end ok see suppose this one is Iand this one is J let us take this oneis I we are taking and this one is J soyou write down a of IJ 1 if I and J areat the st. 1 and 2 are adjacent to eachother that is why we are taking 1 2 2 is1 a of IJ that is a of I 1 and J issuppose to this one is 1 and I 2 and Jis equal to 1 this one is also 1 okayotherwise you we would write here 0 allright now next we'll discuss what isadjacent see list seenow this would be as the name suggestswe will have we are going to have linkedlists fineand how many linked list would be therefor each what takes one linked listwould be maintained like this in thiscase we are having how many verticesfive I guess 1 2 3 4 5 1 2 3 4 5 numberof vertices are there fine for each whattakes one linked list would be there inthat linked list will have will containthe adjacent node to this node fine likethis seenow suppose will be a first one is whatis number of node is one how many at thecenter node are there two one one is twoand one is four then one linked listwould be maintained containing two andfour now come to the second note thisone second how many addition node arethere one three and four this would beone three and four now for three alsoone linked list would be there and itwould contain how many number ofadjacent to node are there two three oneis to one is four and one is five one isto one is four and one is five four fouralso we have one now we have what two wehave what three and five see one twothree and five and four five we havewhat three and four only three and thisone is for how many linked lists wouldwe maintain one two three and four andfive how many number of vertices 1 2 3andor four and five the number of verticestotal number of vertices in the graphwith Linea po maintain Kenyan number oflinked list for each node fine now thisis the adjacency list using this listyou can a present this graph and this ishow you can represent this graph usingaddition C matrix now when you'resupposed to calculate the timecomplexitynow when you represent a graph usingthis method adjacency matrix then whatwould be the time complexity orderyou're sorry you can say the spacecomplexity space complexity would betheta n square in this case rightbecause mat this is matrix n number ofrows and n number of columns the spacecomplexity is what n square here it isthere C five into five matrix v squarefive is what number of vertices that isand where n is what number of verticesand for representing a graph using thisa distance a list the space complexitywould be theta n plus 2 e C and 1 2 3 45 these are number of what what s is whywe have written this plus 2 e becausethe one you happy there Co see this oneis one edge from one to two fine but youhave written this edge two times in thislist two times went from 1 2 to one edgeyou have written and from two to onealso from two to one also so two timeswe have written this edge in this listsame you can say with you can say takeone to four this one is one edge but youhave written this two times one to fourfine because 4 is adjacent to one so wehave written in this linked list alsoplus 4 to 1 also four to one like thisso every Edge has been written two timesthat's why we have written here n plus 2we the space complexthat is this one for Addison see a nestand this one is theta n square forAddison when you represent this graphany graph using a distance e matrix sosee it would be better to use thisadjacency matrix to represent a graphwhen the graph is dense graph sometimesthey can ask you this type of questionin case of dense graph it's better touse adjacency matrix to represent thatgraph and when the graph is sparsesparse graph then it would be better touse this what adjacency list because seewhen a dense graph means almost or youcan say each node is connected with eachother node you can say you can takeexample of a complete graph like thissuppose we have four nodes and everynode is connected with every node andfive nodes every node is connected withevery other node like this then in thatcase it is better to use this matrixokay and when something like this one avery few number of edges are therebetween these vertices then better touse this adjacency list and this is thespace complexity for representing thesegraph ok so that's all about you knowsome you can say the basics of how torepresent a graph in computer these arethe most popular methods I am NOT sayingthat these are the only two methods torepresent a graph but I am just I havejust discussed the most popular methodsto represent this graph okay so I'll seeyou in the next video till then bye-byetake care see this is what this is a snapshot ofmemory memory is what I have told youalready in many videos that it's a longtape of bytes and each byte see theseare bytes and each by it is having itsown address suppose I am taking thissegment of memory memories or this sideall extended in this side in this sidealso extended so I'm taking open-endedand I'm taking the address started fromhundred so the next byte address is 1 0man 1/4 next byte it is 1 0 2 like thissee this memory is very crucial datasource in our system we don't haveunlimited memory in a computer systemfine so it is a responsibility of amemory manager to manage this resourceto manage the memory to which processmemory is to be located how much memoryis to be allocated to which memory isfree which memory is allocated now likethis fine so memory manager is going totake care of this thing finenow suppose a programmer want somememory in this case a programmer iswriting a program and he is going todeclare a variable like this in supposevariable name is X fine now when afterdeclaring this variable what happens thememory manager will look at how manybytes four bytes for this integer intypical compilers fine so let us supposememory manager are located 4 bytes tothis X and started from which locationstarted from let us suppose thislocation from 1 1 to these 4 bytesthese four bytes has been allocated tothis X and memory manager will tell theprogrammer that I have allocated to thememory which has started from one onetwo one two three four bytes fine andsuppose he has entered sum here isinitialized at runtime this X and he canenter some integer value like 7 so nowthe programmer suppose we want to storethree integers fine so we we have wehave read the concept of airings so howhe will declare int suppose array nameis a and size is 3 so see array is whataction of data items which are of samedata-type fine so for three integers forthree venues the memory manager willallocate how many bytes 3 into 4 that is2 any bytesfine and then that 12 bytes would be inconsecutive continuous location thatinteger the values of the areas arealways stored in continuous locations solet us suppose one complete block of 12bytes has been allocated suppose from102 from hundred to this one one onethis is free and memory manager hasallocated the hello has allocated thisblock to this a so now programmer hasentered three values here now theprogrammer wants to store one extrainteger value an extra value and hewants to extend this array size now hewill last through the many memorymanager that I want to store one extravalue can I extend can you extend thesize and I want to extend the same blockI want to extend the size of there I amNOT going to declare another variable Iam going to extend the size of that Iwant size of array for now now what thememory manager will do see because inadvance the programmer told that I wantsize for only three integers so he hasallocated 12 bytes now what a memorymanager will say he'll say I cannotextend the size of your area because Ihave already allocated that thatconsecutive block to some other variablebecause at starting I didn't know thatyou are going to extend your array sizeso now programmers will ask what can Ido now I won't add a size 4 so nowmemory manager will say I can allocateyou a fresh block of 16 bytes becausefor for size of the array how many byteswould be required 4 into 4 that is 16but I cannot extend this block now whatprogrammer will think programmer willthink that maybe in future I need tostore 10 values fine so it's startingonly I asked the memory manager toallocate me the size 450 values for 50elements that I want my array size 50now hint en 50 maximum limit now whatmemory manager will do my many - littlebit locate how many bytes 15 - for thatis 200 bytes a fresh block of 200 bytesof consecutive locations so these 200bytes block is from maybe you can sayfrom 122 this 3 109 addresses 3 1 9these blocks would be allocated to thisone but now suppose the programmer onlyneeds to store maximum 10 elements sothis space is wasted now because he isgoing to use only how many bytes 10 into4 that is 40 bytes he is going to usestarting 40 bytes right and remainingmemory is what that memory has alreadybeen allocated to this arena so memoryis not free the memory manager cannotallocate this free memory to anothervariable but this programmer is notusing that memory so this is what thewastage of memory so this is a maindrawback of n because of the fixed sizebecause the programmer has to give fixedsize of the array in advance at compiletime only because of this vestige ofmemory is there in case of arrays finenow what is the solution of this problemso now the solution of this problem iswhat length list and here here see ifthe memory manager has allocated thesefresh block then these values would becopied here only so that would be a verytedious work to do and again supposeafter some time thus thus the programmerwants the size programmer wants to store52 elements then again programmer maybeis not able to extend the memory in somecases then fresh a block of 452 452elements how many bytes 52 into 4 so 2 08 bytes would be allocated a new blockof to 0 8 byte would be allocated andall the that elements of this previousarray would be copied there sovery tedious work to ruin Harry's mindthe solution is what linked lists solinked lists is also a collection ofelements the arrays were also acollection of elements right it is acollection of more than one date itemsfine link list is also a collection ofmore than one date items but the onlydifference is what in linked liststhus this data items are not storingconsecutive locations because this inarea these are stored in consecutivelocation continuous location finenow how see if the programmer make arequest for one element he wants tostore one element fine now the memorymanager suppose are located and forinteger value for bytes so supposememory manager has allocated these fourbytes right for the request of integervariable and suppose he has stored somevalue that is for here after thissuppose he has made another separaterequest for one variable that is forstoring an integer value so again fourbytes would be allocated but it is notcompulsory that that four bytes would beallocated consecutive to to this becausethat is a separate request that is not arequesting form of Eric so suppose nowfor next request memory manager hasallocated from here four bytes right onetwo three and four and he has storedhere suppose three fine now again he hasrequested two more requests for untilfor storing integer values so now thisis how for the four separate request offour integer values the memory managerhas allocated these four blocks to theprogrammer so see here these four valuesare also a collection find that is alinked list because here I'm notdiscussing that he has he has declaredlike this in text and into I into Z orin Thai something like this not variableseparate variables this is also acollection file this is also a list nowsuppose if this these four are in acollection in array that is fine becausethese are consecutive locations so ifyou know this thing the base address ofthis one you can easily the compiler caneasycompute this address of the next one buthere we cannot say if this we are atthis value in this collection we are atthis and visa then we cannot say atwhere where the next integer is fine inthat collection so some extrainformation has to be stored that iswhat if with the this thing with thisthing with this value if we storeaddress of that next value then we caneasily reach to here fine and from herein the list with this second value if westore the address of the next value thenext integer value then back we caneasily go from here to here and here wecan store with this value the address ofthe next value fine so this is what thisis also a collection of four integervalues but here the these values are notstoring contiguous location we haveremoved that drawback fine now see sosome extra space is to be located withthis one for storing address of the nextvalue and address of the next valuewhich variable can store address of anyanother value that is a pointer variablecan store address of some anothervariable fineso here four bytes would be allocatedagain because in typical compilers itthere for storing the value for showingthe address it takes four bytes so seehere again four bytes would be locatedwith this one two three and four finefor storing the address of this oneright here four bytes would be locatedfor storing address of this one herewith this four bytes would be allocatedfirst story this one so total how manybytes would be allocated eight bytes forfor this value and four bytes forstoring the pointer to the next wellright so this is the memoryrepresentation logically how we willrepresent this linked list see fourthree four nodes one is this one thisthen in this in this with this foraddress of next would be stored seesuppose address of this is 1 0 2for three addresses we have started fromone one three four eight we have startedfrom one two three and address of thisis 132 so here with this four one onethree would be stored so this will pointto the next node here 123 would bestored so this will point to this nodeand here 132 will be stored this willpoint to this node and suppose this isthe last node in the list so here nullwould be stored so in the linked listthis complete is known as a node so hereyou can say this is drawback of linkedlist with the with this well knew youhow to store pointer also so some extraspaces to be located the pointer to thenext node here pointer to next node thiscomplete is known as a node here fineso this removes the drawback of arraynow suppose I want to extend the size oflinked list I want to insert one extraelement here I want to insert 10 in thein my linked list right now suppose Iwant to insert 10 here so here can weinsert this 10 directly here or thememory manager will allocate space forall the five variables some fresh blockwould be allocated no why so becausethese values are not not in contiguouslocations so if anywhere space isavailable for 8 bytes then memorymanager can allocate space they are onlyfine and we can provide link to linkinto this node for that new nodeinserted but in array we cannot do thisbecause in array drobik is what all thevalue should be in consecutive locationsfine so maybe sometimes if it is notpossible to extend this size in case ofarrays now if you want to insert thisthingso simply somewhere in memory somewherein memory suppose address is 200 andNord is to be allocated memory size of 8bytes has to be allocated that is knownas node and here this 200 would bestored in the link in the pointer partof this previous node fine and here thevalue is 10 andthis is the last one so here you canstore none so this is how you can seethat insertion in a linked list is veryeasy so here we can say we have removedthat fixed size drawback that was inarray no need to specify the size thatin the linked list I want ten elements20 elements are like this you can insertanytime an element from in the linkedlist so when you write a program inlinked list then how we will declare thesnowed-inarray if I want to declare simply youwill write data type array name and sizethat is very easy but in case of linkedlist cygnus here this particular node iscontaining two values and type of twovalues so is different one is integervalue and this one is what address sothis is what a pointer not a simplevariable this is a simple variable thisis what a pointer to types in one nodefine so you have to define your own datatype fine so that user-defined datatypes you are going to use that isstructure so you are going to writestrap so after this struct keyword youare going to give the name of yourdatatype you want to three it fine hereI'm taking the name node struct node sowithin this you will write C one typewant to value the type of one is emptycell so here you will write int supposeof a name of variable is a but this iswhat for this I will declare this as apointer because only pointer can storeaddress of another variable and thispoint there is going to store address ofthis node right not address of any othervariable or any other integer variablethis pointer is going to store addressof another node fine so here you willwrite whatstrap node pointer and name of the pointthat you can say next so this is how weare going to define our new data typethat is struct node the name of the datatype is complete this one structno not only not only known that isstruct node and these are members ofthis structure here you write structkeyword then tag and within this you'llwrite members man two members are thereone is this one one is this one now whyI am writing here struct node as youknow if you want to declare a pointerwhich is going to store address of someanother integer variable then how youwill declare int star P this P is goingto store address of integer variablefine if I write float history P it meansthis P is going to store address of afloat variable it means it is pointer tofloat pointer to in so here this is datatype this data type is what this datatype is for the variable whose addressthis pointer is going to store fine nowhere this is the pointer the pointer isgoing to store address off this one thisone this is what node and data type ofthis node is what this complete structnode name of data type see this is datatype struct node so that is why here Iam writing data type that in struct nodethis is same s Turek and this is pointername you can write next you can writeyour hair link it's up to youfine now next thing is this is thelinked list now another pointer is thereyou can say head pointer start pointerit it's up to you this pointer is goingto store address of the first node inthe linked list address so first node is1 0 2 so this head is going to point tothe first node in the linked list rightif you know this this address 1 0 2 ifyou know the value of this head thispointer they can then you can easilyreverse this linked list fine but hererandom access is not possible in airwhat is there you can directly if youwant to access this three you candirectly access this tree compiler candirectly compute the address of thisthree if the compiler know the baseaddress but here if you know the baseaddress that is the address of thisfirstly the first node that is one zerotwo and if you want to access this onethis node this data you want to accessbut you cannot directly go here compilercannot directly compute this addressfinethat is drawback of this thing becausehere that data is not in consecutivelocations it is in scattered locationsfine so if you know this value of thishead was 0-2 so here you can go fromthis node you can go where check out thelink part see this is what data part andthis is link part of the node fine socheck out the link part here the addressaddress of which node one one three itmeans address of this node so you can goto this node now check out the link part1 2 3 here address is this one you cango to here 1 2 3 so now you can reachhere fineso in link list only sequential accessis possible you cannot directly accessyou cannot randomly access any data fineif you want to access this last datathen also you have to traverse thecomplete list first of all this thenthis then this after 1 3 2 and afterthat you can go here fine so this is youcan say drawback off this thing so thistraversal need or you can say thissearching will need the time complexitythe time is order of n accessing of anyelements need order of N in worst caseif you want to access the first elementthen obviously it is 1 only order of 1if last means in worst case it is andyou have to traverse the unending sinthe list so it is order of n but inarray it was accessing of any elementswill take order of 1 only constant timefinehere insertion is easy and deletion isalso easy why so because see if sortedair is there like this see let us takean area of size six only four elementswe have in there air and I want toinsert five here this is sorted area nowwhere you can insert five here you caninsert five only fine so you have to dowhat you have to shift this 40 here hereyou have to shift 30 here you have toshift 20 here you have to shift 10 andhere now you can insert five right so itwill take how many shifting of all theelements so order of n if you want todelete if suppose I want to believe this10 I want to delete this 10 then alsoyou have to shift 20 here 30 here and 40here then also it is approximately I amgoing to take order of n fine what itdepends the position from where you wantto delete and at which position you wantto insert the data right if you want toinsert suppose between these elementsright here one node I want to insertthen what you have to update just youhave to updatesee it suppose address this this memorylocation has been allocated here supposethat the 300 at 300 fine so what youhave to do this 300 should be here andthis 1 1 3 should be here so this linkwould be something like this as simpleas thatright so insertion and deletion is easyin this case rather than array sobriefly you can say a linked list iswhat is it it is a linear data structureit is a collection of data elementswhich are stored in known consecutivelocations next point is some extra spacewould be required to store the pointerswith each value next point you can sayinsertion and deletion is easier thenarray next point you can say accessingof any element is going to take order ofn time complexity and in array it isorder of 1 only next point you can saybinary search is not possible in linkedlist in this fundamental this structureof linked list because binary search inthat case we areto find out middle element so here wecannot go directly to middle element soyou can say binary search is notpossible next point you can say it is ofdynamic size so in next video I am goingto discuss the basic operations of thislinked list traversal insertion deletionsomething like this with the help oftheir code as well as we are going todiscuss types of linked lists fine soI'll see in the next video till then byebye hi guys in this video I'm going todiscuss with you graph traversaltechniques two types of graph traversaltechniques are there BFS andBFS BFS means breadth-first search orsometimes it is also known as levelorder traversal and the DFS sdepth-first search fine so we'll takethis example and with the help of thisexample I am going to discuss with youthe BFS traversal fine in BFS traversalwhen you will start then you can takeany node as a root node you can starttraversing this graph from any nodesuppose we can take a zero you can takeone you can take six as a root node andyou can start your driver self fine butsometimes intuition if it is given thatBFS Traverse will find out can I havethis graph and considering two as a rootnode then what you have to do is you'resupposed to start from this two toapprove not consider curve and you willstart traversing this graph from thisnode only generally suppose in thisexample nothing is given then we willconsider zero as a root node I am justconsidering zero as a root node you canconsider one Phi for any node okay sofor BFS traversal what a data structureis used that is q queue data structurewould be used fine and here you'll writewill print the result and this is ourdata structure that is Q I hopeeverybody knows you work in what fashionthat is FIFO first-in first-out okay soin this traversal suppose we have taken0 as a root node okayall the adjacent vertices of this 0 willbe traversed first multiply to traverseall the vertices as close as possible tothe root vertex C is K close the eyescared this into put no vertices give mehere 1 and 3 to 0 is it or how about 1or 3 or either 3 orone in any fashion a visit only afterthat you would move forwardSN you're working zero key about onevisit can you yeah then you would visitfive okay first of all it may be whatourselves only as close as possible tothis zero those who are what it sayswould be visited fine okay now seesuppose we have taken zero as a rootnode so 0 would be inserted in thisqueue fine okay now in the result wehave suppose we have deleted in this 0and we have printed this zero in theresult fine now as soon as the zero isprinted means zero has been visitedright now next thing what you have to dois zero purchasing has a delete overokay it may be adjacent what this assumeis you're okay that would be inserted inthis queue now adjacent what this isover the zero is 1 and 3 fine and oneentry would be inserted in this cube 1or 3 it's not like if one would beinserted and after that 3 you can insertthree or one in any order you can insertfine ok now one and three ok now next isnext element in queue is one now onewould be deleted and what one would beprinted means one go how many deletekill the edit one has all has alreadybeen visited the say print format lovedone has already been visited now nextthing what you have to do is one get itmaybe at the same to what this is allthe dis in tortoises of one adjacentvertices plus unvisited vertices fineadjacent unvisited vertices of onewouldn't be inserted in this queue seehow many i descend vertices of one arethere 0 3 2 5 and 6 the medic death you0 3 2 5 and 6 but up go insert is makansay can hear only thevisited what this's zero has alreadybeen visited fine zero has already beenin visitor to zero copies mini insertkaroge and three three has already beeninserted finethe yeah be a boys main certain heColonel Khan say is main certain gate tofive and six to five and six you caninsert two five six in any order that isyou can insert five two and six you caninsert two six five you can insert sixfive and two it is not compulsory thatyou'll insert two five and six only okaynow next is three fine three you gohominid I said delete here and threewould be printed and what are theadjacent vertices of this three find outthose see this go home find out Koreaall the adjacent vertices of any nodescore both exploration of that node youare going to explore that node finenow find out that at this into verticesof this three adjacent to vertices ofthis three rc3 company print Korea meansthat has already been printed or you cansay that it already been raised it readya fine home we have now three threecages into what s is gone constantupkeep as c0 hey you have one you havefour you have two for adjacent verticesare there but inside a pecan say carnehere to visit and I knew a sc0 hasalready been visited one has alreadybeen visited and two is already there inthis queue though you would not insertto again repeat Nanaia for the onlyelement left is that is for now for willbe inserted in this queue fine now checknext element that is to to be deletedand two would be printed means 2 hasalready been visited now find out at thest. element of this two adjacent elementof this to r1 this 3 this 4 and this 5for element we have one is alreadyvisited three is already visitedfour is already there in this queue onlyleft is five no sorry five is alreadythere in this queue so there is nothingto insert in this queue okay now move tothe next part next element that is fivefive first is deleted from this queueand five would be printed means fivehusband visited now find out adjacentvertices of five one we have what wehave - but these are already visiteddon't know what this is there to beinserted in this queue okay now checkthe next six six would be deleted andprinted fine 6 min already visited atthe same vertices of six are one we arenot supposed to insert this one becausethis is already visited and one is fourbut four is also there through here wehave this means hurt and he care of itnext up coca political my four and fourwould be printed fine so this is the BFStraversal of this graph see I'm this isnot the only BFS traversal of this graphthere are numerous valid BFS traversalson this graph how see suppose you haveinserted in this two five six in thisfashionfive six and two two zero one three kibaat karta happy - octopus take care soit depends how you are going to insertthese numbers into this queue so I'm notsaying so this is the only welded DFStraversal you can find out numerousvalue DFS traversal of this graph usingthis method fine now we will discuss theDFS traversal of this graph now we wouldfind out the DFS traversal of this graphDFS means depth first search traversalof this graph okay in BFS queue datastructure is used and as in DFS whatdata structure will be used that isstuck and it works only for minute lastin first out okay so we'll have onestackfine and here we'll write down theresult of this trevor self-same in thatBFS we have taken any node as root nodeso in DFS also you can take any node asroot node and you can start traversingfrom that node okayin case if it is given that consider oneas a root node in that case of 100 rootnode Elaina he pareja but then he giveand HECO you can take any notice rootnode suppose we are taking zero as rootnode okay now see zero would be insertedin this stack fine and zero would beprinted okay now check how many additionwhat this is of zero are there 1 and 3so BFS may have any idea how all theadjacent vertices of that node Dominicyou say delete here just go print yeahokay sorry adjacent what this iscommonly katha we have inserted into Qbut DFS make a alga only one any one ofthat node would be inserted into stackdepth-first search belly hump depthmeasure Angus suppose zero common a keyafter that we have chosen this threefine then we would go three two next isscared the sentiment it may be only forhoga suppose six who or something likethat at some points we read suppose wehave reached at six fine and SK our gatesuppose I'm panicking a couch near thisthis 1 to 6 is not there let us considerthose 6 k bar the panini's are set theyafter that you'll backtrack you will goto 4 busca path for K at this end imageof the in case our pockets newmultitudinous then you will backtrackfine but depth-first search MATLAByou'll go deeper and deeper until a deadend dead end min soos car a descentunvisited adjacent which many over andyou have to backtrack fine so any one ofthis vertex 0 has 0 is printed to anyoneof this zero would be taken anyoneadjacent vertices of the zero will betaken and pushed into this stack supposewe have one we have one and three twoadjacent vertices of zero we have so youcan take either one or you can takethree suppose we are taking one onewould be printed and one would be pushedinto the stack 0k by thumb camp againhere this one after that you wouldexplore this one explore any exploremeans you explore now they kept sorrywhat this is co-op Explorer ovo Explorerfrom Calcutta BFS maker thing now onecar you would take any vertex unvisitedvertex get my adjacent vertex 1 Kaddition vertex given vertex con-consame they pass 3 to 6 and 5 fine so youcan take any one of these four BFS viiiaCharaka insert name karna you take anyone of these four three to five or sixsuppose we have taken this three finethree we have taken or three pop kneecap insert cardia high in the pushkartheir head stack may up let's go pushKorea fine so you are now it at thisthree now find out adjacent vertices ofthis three this for this to this one andzero but obviously zero and one arealready visited finezero and one see hero's ultimate equalzero and one already visited sounrelated vertex up go find out Carnahanand visited vertex Kahn same they passto and this for so you would take anyone of this were the these are descentwith the unbusy two vertices and youwould push that vertex into this stackup to village therefore be less activesuppose you have taken two to go up in aprint here to go up in a push kardiainto this stack three Chabad aapke heyhodo fine now you are at this - now findout at the st. vitus's of this - fineyou scared this invert this is gone sameone but you cannot push one at this onebecause one is already visited youcannot push three three is alreadyvisited now but you have give us adecent what this is five five cop is nopush cars are still fine and one is thisfor adjacent vertex fine this five andfour so you can take either five foreither for anyone take a pulsar in ahill a name a bar wise we focus car doany one up quark tools come and that isunvisited vertex or scared this end bitnotchy so you can take either four orfive suppose we have taken four forcommon a push cardia and for co-op nikkahop a spec print bigger than take a talkabout topic I am for now find outadjacent vertices of this for fine threehere but three is already visited twotwo is already visited and one is sixyeah you can push 6 because 6 is 2 andvisited the for Capcom bad kappa goingup six three six print table and sixwould be pushed in this stay now findout after six is there any unvisitedadjacent to vertices of six he scaredthis and what this is for but for isalready visited adjacent verses of 6 1is 1 1 is already visited and we haveonly 1 and 4 so no unvisited adjacentvertices is there fineyeah happy cuyahoga now you cannot moveyou know further from the six deep me up6k 1 these are certificates you do nothave any unvisited at the central dosesof six charges of to do you have a yogabacktracking a backtracking case yogabacktracking me Jonica except attachalegre from this step again I seesituation at the Ava hop a key out hereone can one that stop is there thetopmost element is deleted popped out oryou can say popped out thensix would be pumped out six poo powderShugar fine now say the next top elementis for a visa package elegantly from sixyou would go to which element this fourelement then backtrack to four fine I amnow check this for has any unvisited atthe center what takes still HECO isforça three to six all are visited norTexas there then four would be poppedout from the Staten F next element istwo now we would go to to backtrack toto now find out is there any adjacentvertices of two that is still unvisitedyes we have what is thatthis fine this 5 is still invested andit is adjacent of this too though youwould go to this five five would beprinted and five would be pushed intothe step finenow check five is there any adjacentvertices of five which is stillundecidedno one already visited two alreadyvisited what the next step is we cannotgo further from five top of backtrack ona backtrack aha corner first step isfive would be popped out from the stackticket the top element would be poppedout now check the next top element thatis two then five say backtrack can't behanging to the two now a is there anyanimated vortex of two that is adjacentof two and still unvisitedno one is there okay then pop out thistwo now next s 3 so to say backtrack AHApay only three now check out is thereany animated vertex adjacent vertex ofthree zero two four one all are visitedthen pop out this three from the stackand next is next top of the steak isone so from three we would go to oneJoby's kostik Kotoko gram happy I'mdying it see is there any animals itadjacent what this is a one that is youcan push into the stack no all verticesare visited you scared the center thoughpop out this one from the stack and findout the top that is zero now from oneway would go to zero find out zero Kakuhere descent water says that is stilldone visited no then pop out the zerofrom the step now see stack is empty sothis is the indication where you have tostop thisBFS algorithm fine and this is the DFStraversal of our graph now in this casealso this is the only you know this isnot the only DFS traversalthere are numerous value to DFStraversal of this graph how you can findout C suppose you are starting from zeroHermia has a zero say start Karangahapele to one but from zero you can go tothis vertex 3 also take a whiskey by thevisit karoge so this would be anotherDFS traversal fine so I say broughtsorry is my DFS traversal okay Oh such athe BFS many up go but are they a BFSmake alga all try to explore all thenodes as close as possible to the rootnode means level order is scared yes andit may be homie paleo sorry explored meafter that you will go further finebut DFS make alga any one node would bevisited from that root node loose Chabadwhose notes a further up visit kirovskabout further further and further youwill go deeper and when you will reachthat dead endJos a aapko you know you don't have anyunbudgeted adjacent vertices then youwould backtrack or backtrack a poke asabotage it occur from this stuckthey say I'm dead end pay poncho V thattop of the stack would be popped outfinenext dope I got perhaps emo happenschool backtrack appear google fineso this is the DFS traversal DFS oneanother difference is the DFS may upcoke out the stack data structure usergo DFS sorry BFS macaca kyu-ho call TFSMakabe Stanley the structure won't beused ok then bye see you in the nextvideo hello students welcome to hisengineering classes today we will seeconcept about circular queue which theclassroom gonna take as a qk o ta innormal cube we delete and insert itemsfrom different ends of the listinsertion takes place at rear anddeletion takes place at front end butnormal queue make disadvantage of the kijo space Kali Rosetta after removing ofelements whose conf in legal placerelief without to initializing thevariables again to overcome this atdisadvantage a new type of queue is usedwhich is known as circular queue incircular queue front and rear pointerscan't meet each other that means in thisthe rear pointer can point to thebeginning of the queue when it reachesend of the queue clockwise like circularmanner may ask you come implementcontain discuss observer advantage carethat empty location left due to deletionof elements using friend can again befilled using rear pointer it meansempty space can be filled again usingrear pointerbill collects similar normal QQ 30 camvariables is a difference ka-ki rearpointer can point to the beginning ofthe queue normal is come clockwiseimplementing here same a base from the akey circular queue complement againmaking a what are the differentinitialization code and how we insertand delete in a circular queue toinitialize you need to set front equalsto 0 and R er equals to 0 initiallyafter front and rear the local 0% kernelthen to insert we have to use Q rearequals to itemJovie item you insert an app rearposition prints at getting a of they Knormal Kim M dagger today we are equalstwo rear plus one but here we what wewill do is we are equals two rear plus 1mod n where n is the total number ofspace in this circular queue they say iscumec etna locations america's n isequal to 12in this case so after filling of oneposition you have to increment the rearpointer using this formula rear plus 1mod n similarly to delete set itemequals to q front and increment thefront pointer with the same formulafront plus 1 mod n recycle rubbishmosaic tablethis case if after entering of thisposition this six I have to incrementthe rear pointer to make a karoonga sixplus 1 mod n which is 7 mod 12 7 mod 12ax7 the mihrab rear pointer 7 go pointGarriga similarly after deletion of thisparticular item to front is equals tofront plus 1 mod n so front is now 2 2plus 1 mod 12 so it will come out to be3 above quispel agraja key this is muchvery much similar to incrementingnormally a gamma 6 plus 1 gamma 2 p7agha 2 plus 1 gamma 2 b 3 Aghadifference comes when it reaches the endof the queue this is suppose aboutcareer 11 back on chica then whatcircular queue says is after reachingend of the queue or beginning of thequeue it after reaching end of the queueit points to the beginning yesterday 11the conjugate okay ring m xi plus 1 mod12 which is 12 more 12 which is 0 thatmeans now rear is pointing to the firstlocation after reaching end so this isthe whole concept of using mod and incircular queue thank you for watchingthe video please subscribe to theYouTube channel for more tutorials ondata structure and other computerscience related courses hi everyone welcome to nourishtechnologies this is cinemas so in thissession we are going to discuss about astack data structure what is a stockmeans this is an algorithm right sonothing but this is one abstract datatype or set of rules so what is the useof stack means just to store theinformation in some of the situations ifyou follow the rules of a stack so wecan access the information effectivelyso what are the applications and wherewe are using stack exactly so that wewill see later so first here now we willdiscuss so what is the stack and how toimplement a stack and finally we willdiscuss applications of a stack okay sofirst one so what is a stack means asimple and algorithm that works based ona rule called last in first out we cancall it as a leaf oh so based on a lastin first out rule a stack works so whatyou inserted last into the memory thatwill come out firstit is a simple rule so one best examplewhere we are placing the series sadistand so we are inserting right the seedis right so then the CD will move likethis and here it is this is a CD andthis is a next CD and this is a thirdstate see you inserted first secondthird so this is inserting so if youwant to pick out one CD from the CDstand then the third one will come firstit will come first so this is justdeleting or collecting the informationand this is inserting the information soa stack algorithm so we'll run a basedon the rule last in first out right howthe insertions and how the deletionsright every data structure right orright every stack should have aparticular amount of memory blockinitially so we can call it as acapacity of stack so what is thecapacities and how we will decide rightso either using dynamic memoryallocation we can decide or we can use astatic memory allocation also so firstwe will see a static memory allocationis nothing but a constant memoryallocation so what we will use in astatic memory allocation simply we areusing the concept of array we are usingthe concept of array so how see forexample how we are declaring an arraymeans in a our are the size is a 5 5 sowhenever we declare variable like thisit gets a memory allocation a block tostore five elements at some locationsuppose two zero four six two zero foureight five zero five two and five fourso this is memory allocation so now Iwant to implement a stack and of coursewrite a stack implementation also withthe help of arrays only arrays conceptjust rotate this memory allocation so byminus 90 degrees minus 90 observeinteger type elements we are storingwrite the name is a stack and of courseit is array only but the approach isdifferent stacked here it is thecapacity capacity suppose initialcapacity we are giving like this thesame memory allocation we are writing indifferent ways so this is now one twothree four five this is a base addressto zero four six two zero four eight twozero five zero two zero five two twozero five four here base address of theblock who will hold the array variableARR holds the base address of the blockto collect the information of the memoryblock in the same waya stack variable is an array variable isholding the base address of the block 20 4 6 2 0 4 6 this is what we calledstatic memory allocation how we canallocate the memory right to a stack isa fixed memory fixed memory so forexample if you want to implement a stackdynamically then we should use theconcept of we should use the concept ofwrite a malloc functionCal log function real log function andfree function we already discussed thedynamic memory allocation concept in a Clanguage right so now here it is forarrays so what are the functions we areusing in a steady Li B dot H means acatalog function and next one real logfunction so what is the use of a catalogfunction we can allocate the memorydynamically of course but with a fixedsize we cannot change if you want toincrease or decrease the size of arrayor size of memory block we should go fora real log function we should go forreal log function very simple how toallocate the memory observeso how to allocate the memorydynamically to stack so first we aredeclaring integer pointer variable butthe variable name is a stack stack in astatic memory allocation we are usingarray with of exercise but now here itis a pointer so only a stack get memoryallocation at some location at somelocation now it is ready to accept oneinteger array nothing but a memory blockaddress it is ready to hold how we areallocating the memory to this one how sothat is using a catalog function so whatis the size nothing but what is thecapacity capacity we have to pass seefor example the capacity is a 5 capacityequals to 5 capacity we are passing andnext one what is the size of eachelement that we are going to store inthe stack sizeof integer so that we arecollecting what catalog function will doa capacity into sizeof integercapacity is a 5 sizeof integer is a 2 isnothing but 10 bytes memory it willallocate a block 10 bytes memory it willallocate and the base address suppose 20 4 6 we should collect into stacks sothat it start pointing to this 1 here itis a stack we are collecting thatinformation into variable stack butstack is of type 1 is an integer pointertype but catalog function return type isa wide pointer we know that catalogfunction returns wide pointer this iswhat we called generic pointer this isalready we discussed clearly what is theprototype of a catalog function rightwhy it is returning wide pointer how totypecast a pointer all these thingsalready we discussed in a dynamic memoryallocation conexcept of a C language right so once gothrough that how memory will beallocated using a catalog function thisis just allocating a memory to thisstack with a fixed size here initialcapacity is a 5 so if I want to storethe sixth element then what will happenthen we should go for a real logfunction for that we have to write thelogic how to write the logic and allwe'll see okay so for simply this ismemory allocation dynamically to thestack right so we can implement a stackdata structure algorithm in two wayseither by using a static memoryallocation concept or by using dynamicmemory allocation concept static memoryallocation concept means we are usingarrays dynamic memory allocation conceptmeans we are using write the CL logfunction and real log function of coursewith the help of a pointers concept okayso this is just only creation answerwhat are the operations we can performright on a stack so once a stack isready once stack has been created sowhat are the operations we can performon a stack data what are the stackoperations what are the stack operationsso first one first one so creation of astack creation either dynamically orwith the static memory allocation secondone we can push the elements into thestack right we can push the elementsright so what is that pushing theelement a right nothing but insertion ofelements according to that algorithm soright as some of the words a terminologywe should understand but here it iswhenever we are calling push functionso whatever the element you want toinsert that we are passing suppose astack is an integer stackthat element we should pass what elementyou want to push and next one third onepop third one is popper but herewhenever we are calling a pop functionno need to pass anything any argument sowhy what is the reason because right inthis from the stack if you want to popany element it is always try to access alast element right so what you insert atthe element last so that will come outfirst the last element what is the topof the stack that will be collected thatwill be collected and next one fourthone Traverse function so what is aTraverse function just displaying allthe elements of the stack displaying allthe elements of the stack is nothing butTraverse function so these are the mainfunctions we are using in theimplementation of a stack so some morefunctions these are optional and anywaywe are implementing at the time of astack implementation is empty or not ifstack is empty or it contains elementsor not and next one sixth one is full ornot is full and next sixth onesohow seventh one how many elements arethere so what is the length of the stackI think but simply we can call it as asize also more clearly so what is thesize of the stack how many elements arepresent how many elements are present inthe stack so these many things so we areimplementing these many types right soimplementation of all these functionsjust writing logic for all thesefunctions is nothing but a stackimplementation once you implement allthese things then a stack is ready withthe help of that stack then we can storethe informationeffectively into every program intoevery programming application so that wecan process the information effectivelyso first for example so we are creatingthe stack with a size 5 we are creatingthe stack creating either if you want topush the elements or if you want to popthe elements that is possible only fromthe top of the stack any operation youcan perform with the help of element topelement only from the top only either weare inserting or deleting the elementsnothing but we will push or we will popso first of all for example here so weare calling push of element 10 so thenthe stack will be like this right itwill go like this from the top it willstay here and next if you want to push20 20 then this is the stack 10 nextelement here 20 and remaining nothingand next for example here so we justwant to pop pop means so which elementwill be popular the last in first out isa 20 will be deleted so then in thestack only 10 will be present 20 willpop willpower next for example here itis we are pushing 30just push 40 push 50 50 then a stackwill be like this 10 30 40 50 and nextfor example if you want to perform a popoperation so thenthen here it is at ten thirty forty hereit is fifty will come out it will pop sowhat you inserted last so that will comeout first so if you insert a fiveelements we cannot insert the sixthelement right in a static memoryallocation of course in a dynamic memoryallocations we will increase with thehelp of real log function and we areinserting anyway so these are justoperations on a stack how we areinserting the elements how we aredeleting the elements just we areperforming push operations and popoperations all these operations we canperform with the help of a variablecalled top because we should perform allthe operations on the stack from the toponly either you want to push or you wantto pop the elements okay soimplementation how to write the logic ofall these things all these functionsright so we will see in the next sessionright so for more videos so please login to nourish idea channel thank you hi everyone welcome to nourishtechnologies this is fin wash in thelast session we discussed the basicpoints of stack so in this session weare going to discuss how to implement astack using static erase so nothing butwith the constant size how can weperform all the stack operations like acreation write storing the informationremoving the information printing theinformation all these things okay soalready we discussed in the stackabstract type so many specificationsthey have given read all thesespecifications now we are implementingwith logics using C language syntax okayfirst so first of all creation of astack creation of stack so stackcreation is very easy stack relation soinitially suppose we are declaringcapacity one variable capacity anycapacity you can give so that is 5 thatis 5 so in the main method eitherlocally you can declare or globally wecan declare mostly write of variables weare declaring globally only the reasonwe are accessing the stack fromdifferent functions in the program sothis is a global variable capacity andnext one so one more variable is ainteger stack integer stack and what isthe size what is the size means supposeI am giving the capacity I am givingcapacity sir here doubt in C languagewhenever you declare a variable likethis it is impossible to pass anothervariable in the form of square bracketsright in a size you cannot specifyordinary variableimpossible case sir then when it ispossible when it is possible meansinstead of declaring ordinary variableswe have to declare a macro so macro isnothing but a constant so how can wedefine constants using a preprocessordirectivesso using preprocessor directives how canwe declare a constant means hash definehash define capacity constant variablesmostly we are using we are representingwith the help of capital letters onlycapacity v there is no space there is nosemicolon there is no equals to symbolthis is identity and this is the valueright and here so now we need to writeall our capital letters because Clanguage is a case sensitive languagecapacity capacity right here so hashdefine is a preprocessor directive sowhich is used to create a constantnothing but a macro this is a macro nameand this is the macro value macro nameand macro value right only macros we canpass whenever we are declaring ordinaryvariables we can pass macro wiser whatis the reason here right in place of acapacity the five will be substitute atthe time of pre-processing phasepre-processing phase pre-processingphase means that is before compilationbefore compilation of application seeapplication pre-processing phase will bepresent right in a pre-processing phasethe value of this macro will besubstituted here then by the time rightat the time of execution memory will beallocated to this stack ok so this ishow to declare a stack variable rightwith the help of a constant sizeconstant is nothing but a writepreprocessor macro preprocessor macrothen how the memory will be allocatedjust we are writing in the form of astack we are writing in the form ofstack right so what is the size size isa5 size is a5 right 0 1 2 3 4 andremember two things first one is thecapacity over capital letters sorrycapacity is a5 capacity is a5 so index 0to 4 and next array variable alwaysholds a base address the base addresssuppose two zero four six two zero foureight two zero five zero two zero fivetwo two zero five four so here it isstack is holding the base address thebase address is a two zero four six ispointing to this stack and one more wediscussed one more we discussed in theintroduction of a stack right in thestack so whatever the operation you wantto perform write either insertion ofelements if you want to push any elementdeletion of elements if you want to popany element all the operations youshould perform from the top of the stacksir physically nothing but generally sowe can say that so we are performingmeans what we are inserting the elementsfrom the top we are deleting theelements from the top is okay physicallywe can show like this sirprogrammatically how can you perform allthese things very simple you have todeclare one more variable in teaser onemore variable you have to declare sowhat is that variable name top sir whatis the value initialvalue equals to minus one initial valueequals to minus 1 so here op equals totop equals to minus 1so remember variables capacity is a fivetop variable value is a minus oneservice or minus one because if it is azero it is pointing to the firstlocation index as of now top variable isnot pointing to any index so the valueis a minus one so this is just acreation of a stack simply declarationof an array with the name stack with aconstant capacity constant capacity isonce again preprocessor directive it isa macro this is creation okay next wewill see how to insert elements into thestack nothing but how to push theelements into the stack how to insertthe elements see for example method is apush method push method it is notreturning anything to anyone but whatelement you want to push that it istaking as an argument if you want topush an element into the stack whatelement you want to push that you haveto pass but remember so whatever theelement they are passing that we cannotstore directly into the stack reasonbecause here stack is a fixed size rightit is a static memory allocation and ofcourse it is a dynamic memory memoryallocation also so first we have tocheck whether there is a chance ofinserting an element into stack or notif stack is a full right or so indynamic memory allocation there is nomemory right to store the next elementinto the stack so that will fail is afailed case so first we are checking ififa stack is full sir how can we check sirstack is full for that logic we arewriting in another function sir what isthat function function is a is fullfunction is full inside the if block weare calling one function is fullfunction so logic for useful functionwill see so what it will do means usefulfunction return type is the integer ifstack is a full it will return one rightif stack is not full it will return zerookay on success it returns a one onfailure it returns a zero so like thatyou have to write logic I will show youvery clearly okay so here how is fullmethod will be method is a is fullmethod is full written type is a integerif a stack is full the condition fullcondition I will show you right if thestack is a full it returns one ifcondition is a true or else it willreturn false it will return zero theconditions will discuss becauseaccording to operations if I explain youwill get more clarity on this as of nowwhat is the condition put aside nowobserve so first of all stack is notfull stack is empty only stack is emptyso whenever you call is full it returnsa 0 so if block fails if block failselse block executes else block in theelse block what we have to write in theelse block we are writing insertionlogic so what is that insertion elementwe are inserting element where we haveto insert in the first location so howto insert elements insertion is possiblewith the help of top elementonly but top is not pointing to zeroactually we have to insert element intozeroth rotation but the top is what is aminus one so first increase the topvalue here first what you have toperform top less plus increase the topvalue observe here the top value becomezero top value become zero now it ispointing top so now we are storingelement element we are storing intowhich location into the zeroth locationof a stack array right so here intostack of 0 is nothing but top into thelocation sir element is what supposeconsider element is at 10 10 will beinserted 10 will be inserted so next oneso clearly we are printing one messageprintf printf element inserted orelement pushed into the stack right hereit is so percentage D means what elementthis message will print clearly on thescreen so that end user can understandokay so whatever the elementI just want to insert so that will bepushed to successfully pushed onto thestack successfully so that is insertionof element insertion and next one rightthis is a first element insertion nextthey are calling this push method onceagain second time they want to insertone more element 20 so same story againelse block will execute because usefulcondition fail because the stack isstill having some of the locations toinsert the elements chances are there sohere it is a topless place so top valuebecome 1 element will be stored into 20next I want to insert one more elementfor example write 30 top value 2 elementis a thirdnext top value three-element is a 40 topvalue for element is a 50 so now nochance of inserting the elements nochance so so by this time whenever theyare trying to call push function onceagain now useful method should returnthe value 1 what is the condition basedon which condition very simple so topvalue is a for whenever top equals tocapacity minus one top equals tocapacity minus one reason capacity is afive five minus one is a four top valueequals to four whenever a top valuereaches four so then automatically stackis full yes now top is a four fourequals to four condition true then itwill return one so by this time it isrunning full then we are printing themessage printf printf stack is fullmessage we are passing clearly stack isfull messageokay so this is the logic that how toinsert the element into the stack how toinsert the element into the stack sofirst whenever we are inserting theelement first you have to pass thatelement directly we cannot insert firstwe have to check whether the stack isfull or not directly we cannot write thelogic here so we need to take the helpof another function so what is thefunction is full function usefulfunction will return the write the stackis a full or not if stack is full itwritten one if stack is empty nothingbut the sum of the locations are thereto insert the elements it returns zerothat we are collecting in the else blockhere it is a topless placeyes we are increasing the top valueevery time after increasing the topvalue element we are inserting intostack of top sir wiser we are using topmeans so this is the thing that we areperforming all the operations into thestack with the help of top here also tocheck whether the stack is a full or notwe are taking the help of top this isrepresenting we are performing all thestack operations with the help of topfrom the top so that is why so mostly wehave to concentrate on a top variableevery logic you should write with thehelp of a top variable okay so this ishow to insert elements into the stack sonow we will see how to pop the elementsnothing but how to delete the elementsfrom the stack so as we are writingstack with some elements with someelements suppose elements are 10 20 3040 50 so we know that capacity capacityis a 5 and top is pointing to 4 soinitially top is pointing to 0 next 1 23 4now top is pointing to 4 and next hereit is a base address two zero four sixtwo zero four eight two zero five zerotwo zero five two two zero five four twozero five four here it is the baseaddresses and the base address of ablock will be stored in two variablestack so that stack is pointing to thatarray variable so we can call it as astack okay so these are the thingsalready we discussed now how to pop theelement from the stack so method we arewriting method name is a popso this method should return in inteaser this method should return aninteger here it is so return type isinteger and it is not taking anythingsir wiser why pop method is not takingany element means so whenever you callthe pop method always it will delete thetop element of the stack we cannotdelete a particular element from thestack because always a last in first outwhat you inserted last so that will comeout first simple thing so so that wehave to pop so first we are declaringone element eld sir can I pop theelement directly impossible right reasonfirst elements are present or not in thestack we have to check suppose if astack is empty then we cannot doanything so if if we have to call amethod is empty is empty right so whatis empty method will do is empty methodwill return one if there is no elementin the stack right if it returns a zerothat means a stack contains some of theelements if there are no elements in thestack it is returning one if elementsare there in the stack it returns zeroso for example if elements are notpresent then it returns one if onecondition true and it will execute butas of now according to our Strackelements are there right alreadyelements are there five elements arethen right and here it is a top value isa four top is pointing to this fourthlocation so here we have to pop nothingbut we have to remove the top elementonly so top element is atea okay so here else block execute elseblock sir can you write the logic fir isempty function yes parallely I willexplain is empty function also is emptyfunction is empty and here alsocondition on some condition if else wewill write if else is empty method isreturning 1 or 0 so 1 or 0 that isinteger just consider suppose if it isempty if this condition is a true itwill return 1 if this condition is thefalse it will return 0 sir what is thiscondition we will see whenever itreaches okay now as of now szostakalready having some elements so wheneveryou call is empty method else blockexecute it will return 0 so 0 will becollected here if 0 condition false cometo this else block and here we need todelete the element so stack of top topelement we have to collect stack of topelement we are collecting into LGelement and next after removing this oneafter removing this one top should pointinto the next location top shouldpointing to next location after deletingthis element so here right afterdeleting this one the top - - we have todo OP - - and finally we have to returntop we have to return top element that'sit either if block execute or else blockxq here it is a return function returnstatement will returntop element right for example if topelement is not there top element rightelement is not present then if blockwill execute it will return it willreturn zero this consider so nothing butelement equals to zero you can assign ordirectly you can return zero directlyokay so here it is a pop element meansalways returns the top element so secondtime we are calling second time alsoelements are present so we are deletingthis 140 will written and top will cometo here next to 30 we written top cometo here 20 we written top here 10 willreturn top become -1 top value becomeminus 1 so whenever top value is equalsto minus 1 so what is the meaning noelements in the stack see that meanswhenever top equals to minus 1 in thebeginning also at the Declaration of topvalue also by the time top value isequals to minus 1 top value is equals tominus 1 so by the time right so it isreturning at a value is empty functionreturning the value 1 because is emptymeans yes it is empty so whenever youare calling is empty if top is equals tominus 1 it is returning 1 1 come to hereif one condition true come inside rightdirectly it is returning this 0 so 0where you are collecting 0 we arecollecting right in the calling methodfrom where a pop method has called therewe collected suppose if it is returningthe top value there we are printing thetop value suppose if it is printing 0 sothere if the return value is a 0 sothere we are printing the messagestack is empty messes or else the returnvalue we will print so this is rightdeleting the element from the stacknothing but pop the element from thestack two methods we are using one is apop method and next method we are usingis empty method we are using is emptyokay and the next method we'll see sowhat is the peak method so what is thepeak method means right it will returnthe top element but it will not removethe top element simple peak method sowhat is a peak method means it willreturn it will return the top elementbut the element will not be removed forexample here on the stack on the stacksuppose elements are 10 20 30 40 onlypresent so top is pointing to 3 top ispointing to 3 because 4 elements are thecapacity as usual 5 5 and the stack ispointing to this one now so peak methodmeans so as usual first we are checkingif stack is empty or notso same story if stack is the Mt it willreturn 0 it will return 0 return type isa in teaser is empty means what samefunction just now we discussed write ifthere are no elements in the stack itwill return 1 right if already elementsare there it will return 0 if stack isempty it will be 1 if 1 condition trueit will return 0 nothing but peak methodis not returning any element because ifreturn value 0 in the calling functionwe will write there are no elements inthe stack to print or else or else sodirectly it will return the top elementstack of top but remember one more thinghere in the last program nothing but inthe pop after returning a stack of topwe are doing stop - - I think but it ispointing to the next locationso here no need to write this top - -because after returning the top elementpeak element after returning returningstill the control pointing to the samelocation it is not pointing to the nextlocation understand the differencebetween peek and pop peek means it willreturn the top element but not removespop element means what it will returnthe top element but removes so here itis one more thing that we are notgetting is what so you are saying thedata is deleting sir where you aredeleting the data how the data will bedeleted and one more thing in anyprogramming language you are deletingthe information from the memory meansyou are just make the pointer which isnot pointing to the location that is itexcept that except that it is impossibleeat the data which is inside the memorylocation impossible case there is nosuch type of function to delete theinformation which is inside a memorylocation the people saying that deletingdeleting deleting there is no questionof deleting only just a pointer which isnot pointing to location if you write atop - - top - - means what top is startpointing to this location sir then whatabout this location it is there stilldata will be there that is working likea garbage value next time suppose if youare inserting one more element then bythe time the element will be over rightso that will be rewrite with anothervalue only rewriting possibility istherethere it is impossible to delete thememory location but it is impossible todelete the data which is inside thememory location only you can replacethat information that is only possibleokay right so here just we are not doingtop - - here in a pop method top - -operation peek method means what it isreturning stack top of the stack but itis still pointing to the same locationonly okay so this is the peak method nowthe last method lost functionality of astacked abstract data type so what isthat how to traverse the elements sirwhat is traversing how to print all theelements of the stack is nothing but atraversal how to traverse all theelements of the stack so function namewe are writing while traverse it isprinting directly traversing means forjust displaying the elements displayingso first as usual we are checking ifstack is empty or not same storyif stack is empty directly we areprinting messes no elements in the stackno elements in the stackfor example stack is having some of theelements for example here it is a topvalue is a 3 stack and denser fourelements so then you have to traverseall the elements two options either youcan traverse from 10 to 40 or 42 10 thatis your interest simply using for loopprintf stack elements are for loopI value starts with a 0 to I is lessthan or equals to top i plus plus i plusplus and we are printing printfpercentage D slash in simply stack of Ibecause I value is iterating from 0 toup to top locationtop location is a 40 okay so here it isI valued zero all rightso zero is less than or equals to topvalues what 3 so 0 2 3 that we arecollecting 10 20 30 40 all the elementshere just declare the variable I I weare declaring there or here also you candeclare no problem okay so this is socompletely about all the operations of astack in the next session we will seehow to implement practically I will showyou the program how to implement a stacknothing but just all these logics so weare writing into a single program thenyou will understand right how to performstack operations and how to combine allthese functions into one place okay sothank you for one so thank you forwatching for more videos please log into nourish id channel thank you Hello everyone ! We have been talking about data structures for some time now.As we know, data structures are ways to store and organize data in computers.So far in this series, we have discussed some of the data structures like arrays, linkedlists and in last couple of lessons, we have talked about stack.In this lesson, we are going to introduce you to Queues.We are going to talk about Queue ADT.Just the way we did it for stack, first we are going to talk about queue as abstractdata type or ADT.As we know, when we talk about a data structure as abstract data type, we define only thefeatures or operations available with the data structure and do not go into implementationdetails.We will see possible implementations in later lessons.In this lesson, we are only going to discuss logical view of queue data structure.Ok ! so let's get started.Queue data structure is exactly what we mean when we say queue in real world.A queue is a structure in which whatever goes in first, comes out first.In short, we call Queue a FIFO structure.Earlier, we had seen stack which is a last-in-first-out structure which is called a last in firstout structure or in short LIFO.A stack is a collection in which both insertion and removal happen from the same end thatwe call the top of stack.In queue however, an insertion must happen from one end that we call rear or tail ofthe queue and any removal must happen from the other end that we can call front or headof the queue.If i have to define queue formally, as an abstract data type, then a queue is a listor collection with the restriction or the constraint that insertion can be and mustbe performed at one end that we call the rear of queue or the tail of queue and deletioncan be performed at other end that we can call the front of queue or head of queue.Lets now define the interface or operations available with queue.Just like stack, we have two fundamental operations here.An insertion is called Enqueue operation.Some people also like to name this operation push.Enqueue operation should insert an element at tail or rear end of queue.Deletion is called Dequeue operation.In some implementation, people call this operation pop also.Push and pop are more famous in context of stack.Enqueue and Dequeue are more famous in context of Queues.While implementing, you can choose any of these names in your interface.Dequeue should remove an element from front or head of the queue.And Dequeue typically also returns this element that it removes from the head.The signatures of Enqueue and Dequeue for a queue of integers can be something likethis.Enqueue is returning void here while Dequeue is returning an integer.This integer should be the removed element from the queue.You can design Dequeue also to return void.Typically a third operation front or Peek is kept just to look at the element at thehead.Just like the top operation that we had kept in stack.This operation should just return the element at front and should not delete anything.Ok, we can have few more operations.We can have one operation to check whether queue is empty or not.If queue has a limited size, then we can have one operation to check whether queue is fullor not.Why I am calling out these alternate names for operations is also because most of thetime, we do not write our own implementation of a data structure.We use in-built implementations available with language libraries.Interface can be different in different libraries.For example, if you would use the in-built queue in C++, the function to insert in pushwhich in C# its Enqueue.So, we should not confuse.I'll just keep more famous names here.OK ! so these are the operations that i have defined with queue ADT - Enqueue, Dequeue,Front and IsEmpty.We can insert or remove one element at a time from the queue using Enqueue and Dequeue.front() is only to look at the element at head.InEmpty is only to verify whether Queue is empty or not.All these operations that i have written here must take constant time or in other words,their time complexity should be big-oh of one.Logically, a queue can be shown as a figure or container open from two sides.So, an element can be inserted or Enqueued from one side and and an element can be removedor de-queued from other side.If you remember stack, we show a stack as a container open from one side.So, an insertion or what we call push in context of stack and removal or pop, both must happenfrom the same side.In queue, insertion and removal should happen from different sides.Let's say I want to create a queue of integers, lets say initially we have an empty queue.I will first write down one of the operations and then show you the simulation in logicalview.Lets say i first want to enqueue number 2.This figure that I'm showing here right now, is an empty queue of integers and I am sayingthat I'm performing and Enqueue operation here.In a program, I would be calling an Enqueue function passing it number 2 as argument.After this Enqueue, we have one element in the queue, we have one integer in the queue.Because we have only one element in the queue right now, front and rear of the queue aresame.Lets Enqueue one more integer.Now, i want to insert number 5.5 will be inserted at rear or tail of the queue.Let's Enqueue one more.And now, I want to call Dequeue operation.So, we will pick 2 from head of the queue and it will go out.If Dequeue is supposed to return this removed integer, then we will get integer 2 as return.Enqueue and Dequeue are the fundamental operations available with Queue.In our design, we can have some more for our convenience.Like we have front and IsEmpty here.A call to front at this stage will get us number 5, integer 5 as return.No integer will be removed from the queue.Calling IsEmpty at this stage can return us a boolean false or a zero fro false and 1for true.So, this pretty much is Queue works.Now, one obvious question can be, what are the real scenarios where we can use Queue,what are the use cases of Queue data structure.Queue is most often used in a scenario where there is a shared resource that's supposedto serve some request, but the resource can handle only one request at a time.It can serve only one request at a time.In such a scenario, it makes most sense to Queue up the requests.The request that comes first, gets served first.Lets say we have a printer shared in a network.Any machine in the network can send a print request to this printer.Printer can serve only one request at a time, it can print only one document at a time.So, if a request comes when its busy, it can't be like - I'm busy, request later.That will be really rude of the printer.What really happens is that the program that really manages the printer, puts the printrequest in a queue.As long as there is something in the Queue, printer keeps picking up a request from thefront of the queue and serves it.Processor on your computer is also a shared resource.A lot of running programs or processes need time of the processor and the processor canattend to only one process at a time.Processor is the guy who has to execute all the instructions , who has to perform allthe arithmetic and logical operations.So, the processes are put in a queue.Queue in general can be used to simulate wait in a number of scenarios.We will discuss some of these applications of queue in detail while solving some problemsin later lessons.This is good for an introduction.In next lesson, we will see how we can implement Queue.This is it for this lesson.Thanks for watching ! [Music]hello friends welcome back to ourchannel so in the previous session wehave seen the implementation of a stackwhich is a linear data structure and theimplementation of a stack can be done intwo ways one is by using the air isanother one by using the link list so inthe previous session we have seen theimplementation of the stack using arraysnow in this session we'll go with theanother linear data structure that iscalled Q's Q so this is also a lineardata structure similar to the stack witha little bit difference and here alsothere are two operations to be verifiedthat is insertion and deletion so in thestack we have seen the insertion iscalled as push and the deletion iscalled as pop here the insertion will becalled as NQ and deletion will be calledas DQ and see this is also a linear datastructure similar to the stack so it isa linear data structure the first pointright so that means all the elementswill be arranged in sequential manner soit remains in sequential manner this isthird point so in the stack it followsthe lastin first-out mechanism thatmeans the recently added element orrecently inserted element will beremoved firstso here the Q is it follows the FIFOmechanism so it followsfearful if I fo that means first infirst out so that means whatever theelement inserted first that can beremoved first right so best example forthis cue is standing on a line forticket reservation this is the bestexample for this cue okay standing online for ticket resolution so the personwho comes first if you will get theticket first it first come for sirsimilar to the first come first serve sohere all in the stack there will be atop position and both the insertion anddeletion will be done at the topposition right so here the insertion anddeletion will be performed on differentpositions see here two operations willbe therefirst one and Q and Q and did you sothank you is inserting an element intothe Q DQ means deleting an element fromthe queue so and Q is inserting anelementDQ is deleting energy and also there aretwo conditions to be checked whileimplementing these enqueue and dequeueoperations to two conditions a waterflow condition under flow condition morefor a laminar flow say these two we haveseen in stack implementation so thedefinition is same so our view meansinsertion intoyou which is full which is full enoughamines deletion from and big queue sothat is called a waterphone this iscalled enough room so overflow conditionmust be checked in MQ operation andunder flow condition to be checked inand take your operation right then so inthe stack we have seen another thingthat is called a top tup which is at topof this tab so go to him in I mean thepush operation is top operation will beperformed on the same thing that is fromhere the mq will be performed on oneposition and think you will be performedon another position right let us go withthat and then we will directly go withthe implementation here there will betwo ends friend ray find points tostarting in with whereas arrange pointsto mastiff and here also we need tospecify the size okay so that we willsee laterso friend end grain so mq operation NQincrements in sessionwe'll be done at rare and raresimilarly DQ will be done at friendthere's only difference and now therepresentation representation of theCurie's in this wayso this is the friend this one will bethe rain right so okay Frank Andrea herewe will perform beat you here will beperform thank youso if you want to insert an element intothe queue that will be inserted here ifyou want to delete an element from thequeueit must be deleted from here because thefirst element entering into the queuewhich will be the first element to beremoved right so this way we have torepresent a queue so this is a queuethis is a queue Frank and Ray okay so ifyou are right so initially the front endrail will be initialized to minus oneinitially friend is equal to where isequal to minus one so if you want toinsert an element first we need to buildthe rail and then we have to insert anelement if you want to delete an elementfirst we want to reduce the tellementwhich we want to remove and we need toupdate the friend right hope youunderstood this one right now like we'llgo with the implementation pathsimplementation how the queue can beimplemented here also queue can beimplemented in two ways so first one byusing Alice another oneby using linked list in two ways we canimplement this true now in this sessionwe'll go with implementation of queue byusing as in the later video we will seethe implementation of Q using lincolnísright Q using antsimplementation of queue using Alice nosee initially the front end rail will beminus one and if you are inserting anelement that first aware should beabraded right so let us see this firstone we need to fix the size of an areabecause it is a static allocation beforestarting the queue itself we need tospecify the size fix the size so laterwe can't update the addresses there is amain project of implementing the queuesusing arrays the same car back we haveseen in stacks also so that's why wewill move on to the linked list now letus take the size as some 10 right nextfriend is equal to red is equal to minus1 so both are equal front and drain bothare equal and both are initialized tominus 1 now after every enqueueoperation we need to update this 1fafter every dequeue operation we need tohave data friend now let us go with themso I also declare a stackI mean Q and Q are a with a size n nowwe will go with the enqueue function andQ function so in the n cube first we aresupposed to check whether the stack isfull of not if the stack is full thenthe insertion operation needs not bedone right so we can't insert theelement out of the size so we have tocheck the cheerful so if there is equalto is equal to size minus 1 so afterevery enqueue operation we are updatingthe mayor right so rare pointsthe last statement of the queue so whichwe have discussed just now so that's whyif R is equal to zero size minus one sohere the size is 10 so the size of thequeue is from 0 to 9that will size minus one so if rain ispointing to the size minus 1automatically that is a queue is full sowe can't inside the add elementary tothe queue so that's why if RL is equalto is equal to size minus 1 simply readf war flow condition Oh similarly canbring the queue is full yes so if it isnot size minus 1 then we can insert anelement into the queue so fast rearelement scanf % HD ampersand in hereagain we need to check one morecondition that if rent is also minus 1so because we have to update the frontalsoso initially this is a queue this is thequeue so friend and then minus 1 so ifyou insert an element here let it be 10rain will be updated so rail will bepointing here but still the front isequal to minus 1 so Fred should point atthe top elementI mean first element so if we have tocheck that condition if friend is equalto is equal to minus 1 what we have todo just SNe to 0 thenfriend is equal to 0 right so if it isminus 1 is equal to 0 then aftercompletion of this condition beforeinserting what we have to do see so herean element temp is taken from thekeyboard and now friend is equal toequal toalso friend is equal to zero so this isthe zero position one two three and fournow fans day is pointing to here Frankis pointing towards here this positionright yes is now rate is equal to minusone so in order to insert an element weneed to update that name rightso open the place through the breeze sojust to avoid the confusion here we weneed to update the rave so where isupdated so rave minus one so where wewere updated so the rail value will behere so that means pointing towards zeroso at the zero we have to insertarrangement so Q of L is equal to n sonow the N will be here now the 10 willbe here that's all close close onesection if you call this enqueueoperation see this is equal to sizeminus one now ray is pointing towardszero zero is equal to nine funds itcomes here it reads the element if itreads the twenty then if friend is equalto minus one that is not equal to minus1 because friend is already initializedto zero that we see is pointing towardsthe first element that is why it wishinis passed this is simple if conditionright then recklessness zero now arraywill be pointing to one right then q o3r where q of Ray is equal to Q of 0 so33 of 1 is equal to 20 so party will beinserted here so this is a greatposition and again if you again you wantto insert another element then again youcall the NQ operation so rate is equalto size minus 1is equal to is equal to size minus oneso condition falseyes condition it reads another elementso 30 so friend is equal to minus onethreat is our but is not equal to minus1 so condition fails and out from theconditional statement read plus plusnow then will be pointing towards to Qof red is equal to elementso here the 30 will be printingsimilarly for me in the next all rightin the next one the party will forgetuntil this condition becomes false sorrythis condition becomes true if it istrue we can't insert an element into theQ so this is how we can insert anelement into the cube so insertionalways done after a rain okay that's weshould remember so here there will betwo positions front and rain and all theinstructions will be done at the veryend so first we have to update the rainand we need to insert the element intothe rain now let us move with dequeueoperation that is how to delete anelement from the queue so this insertionoperationso very simple thing DQ so this sort offunction let us write the functionitself right so DQ means deleting anelement from the queue so we we have todo it from where we have to delete sothat all the elements will be deletedfrom the fronton right friend thing sobefore deletion we need to check thecondition that is under flow conditionif rain is equal to is equal to minus 1if rain is equal to is equal to minus 1simply that impliesour queue is an empty cube because ifyou want to insert an element firstcompass re we have to increment thisrare so if rain is equal to is equal tominus 1 that implies our queue is emptythat means lower elements available inthe work you so simply we can write prethem on the flow or simply we can writeempty queue empty queue yes so if it isnot an empty queue then what you have todo it the first element should bedeleted so element is equal to Q offriend so M will be assigned to elementso we can write the printer percentage Dis delete table percentage is what isthe person density anybody then we needto obtain the friend because we havedeleted M so 20 is the first statementso we have deleted the 10 so deletionmeans just we are pointing towardsanother one right so the memory will besamewe are not freeing the memory right so20 is now the first element of the queueis 20 so we need to build a friend sofriendplus plus friendplushness so friend will be moved tohere right ok thenclosehope your muscle every time the mentoris deleted from the front end and we areincrementing the friend and here we canalso check the condition there is equalto zero to minus one or friend isgreater than 3 this is also oneconditionso friend if friend is greater than redso deleting one by one element the findwill be pointing towards here so 4 isgreater than 3 that means no moreelements are there in evening in queueso that is why we can take thiscondition also friend greater than arrayFrank go to them so if anyone'scondition is true automatically thatindicates this is under flow that willsecure is empty so this is how we candelete an element from the queue seerange is equal to minus 1 false soinitially let us let us see here underso else element is equal to your friendso 10 will be removed and fine plus thisnow friend will be pointing towards 20again if you again apply this DQoperation array is equal to minus 1pulse so 1 is greater than 4 falseso total false yes what will be executedso if it is equal to your friend so 20will be deleted and find restless sofriend will be now here itself rightthere is equal to minus 1 false findingbetter than 2 greater than 3 falseso element is equal to cure friend thatit will be deleted in here and friendplus place now friend is pointingtowards the same thing rate is equal tominus 1 false try to greater than 3 so 3rather than 3 Foxso under flow again false so the elsepart will be executed that 40 will bedeleted and fretless place so no friendis pointing towards 4 now again if youagain if your applying this I mean ifyou are deleting this DTO operationyou are applying this dequeue operationand that is equal to minus one Falls andfinds greater than theyso for greater than three condition istrue so under flow that means our Q isand D so this is how we can apply thedeletion operation on Q's right so hopeyou understood this insertion anddeletion and Q and EQ now we'll go withthe third one that is a display how todisplay the elements of a cube that'salso very simple T so this is the Raythis is the friend right now displayoperation so we need to display all theelements of a cube first let us checkwhether it is an empty cure so for thatwe need to check if Ray is equal to isequal to minus 1 or friend rather thanRay so this is also condition if any oneof these condition is true automaticallywe can say it is in empty queue emptyqueue right yes so if it is false thenwe need to pray all the elements fromfront to where so we need to use theintroduced segments for I is equal tofriend simple for me I less than orequal to V I plus plus here we can printpercentage D Q of Isimple display function all right so isequal to friend so I is equal to 0 0less than or equal to 3 so Q of I so Qof 0 that means my repeated next I willbe limited to 1 so 1 less than or equalto 3 so Q of 1 and this 20 next isincrement K so I is equal to 2 2 lessthan or equal to 3 so again to 0 of 2 isequal to 30 so I is equal to 3 the thirdnext condition next increment so 3 sorry3 less than or equal to 3 condition 2 Qof 3 is equal to 40 so I is equal to 4so 4 less than or equal to 3 things soit comes out from the loop it comes outfrom the loop and the display functionwill be stopped here so these are theelements which are presented in thequeue so 10 20 30 and 40 which are hereso hope you understood this one displayfunction write a very simple logic whileimplementing these cues using headingsso here we draw a case we need tospecify the size of the queue beforestarting the operations itself so laterwe can't change the size of the queueright so that's a worried or back inthis queue implementing theimplementation of queue using arrays sohere the mq & DQ are the operations forinsertion and deletion and Q will bedone at rain DQ will be done at frontend so in this session we have seen theNQ operation the king of Christmasdisplay how to display the elements ofvacuum and right so hope you understoodthis session so let us stop here if youare having any doubts regarding thissession so feel free to post your notesin the comment sectionso that definitelyclarify all your don'ts and if youreally understood my sessions like mysessions shave my sessions with yourfriends and don't forget to subscribe toour channel keep following thanks forlistening thank you hello students welcome to hisengineering classes today we are goingto study about Q in the previous classwe studied about stacks which is whichis a last in first out data structurewhere the last item inserted is removedfirst today we will see what is Q J sayapp could be taking me after because helinebacker courier thingTokyo ta Joe in San subset Bella linecan the rent rigger them both of Sabellabarnacle time toys comma Club Kiowa Q isfirst in first out or we called it asFIFO data structure Joseph super eligayawas of sapele barriofirst in first out if we define Q thenit is a linear data structure whereinsertion and deletion are performed atseparate ends just mistake Malaika - tagmaker insertion and deletion areperformed at a common end known as topbut Q may insertion with a rear end Cand deletion is performed at front endthis is simple circuit example if therea cake you have suppose this is acounter and this is a Q a movie ticketbook or Nazario TOEIC a counter boga andthis is a Q so you have a joseph's if Ienter Careca suppose this of 11 andrakia squared - 9 trachea sketch threemain trachea so entry has area p qkrear-end shape each essay or uniquelyagasa VAR q k friend say so subsequentlyis nikki t1 from rear end or sub-saharaconical a house a ticket like a one fromfront end so q is a linear datastructure where insertion takes place atrear endand deletion takes place at front-endnow there are two different operationsof queue first is insertion of elementand second is deletion of element youcan note down that algorithms I willexplain it now after make way data itemcucumber insert Colonel Tom case agetting a verdict then first you need toinitialize the variables front and rearinitialize front to zero and rear tominus one then you need to checkoverflow condition either in a passiveteen lorry Corona ki jagah here thumbfourth way at knickers at them playing afourth coke a vq full app weight edge asimilarly we need to check the overflowcondition above our flow condition CasaThea if F is zero and the R is max sizethat is F occur bilko starting may frontcoby's mr. Bahari Nikola ethics commaClub or rear apke QK max I spare or F isequals to R plus 1 then you need towrite overflow and exit if friend isequals to nullIBM setting up a condition set Karen Igot front where analetto friend took upset can be J 0 and r KO p 0 or other areMiramax sizeThe r comma 0 set karna avicious condition setting up aof the Chiappa insertion Carnegie sayduring insertion you need to rememberyou need to increment the rear counterincrement rear counter just say aexample 8m this is a queueinitially I'm a front or rear dono co0set AI front is zero and rear is alsozero hum zero Israel I think I amnormally just be empanada quiet afterstructure a coy VA very well declare canobtain those cazzo initial Joe locationof theone zero lithium slave friend 0 R0 minus a taqueria now you need a paellapan trigger me a bak c2v point niggarain though set R is equals to ourperson a bar Crisco point Gregory a 1 23 4 5 & 6 M then our should point tolocation 1 so R is equals to R plus 1and Q R equals to item that means q1equals 2 items suppose and triggermethey for key table q1 mega 4 similarlyJ Vodka ad litem agus suppose 5 topwhere Arielle ko gear 1 becomingcritical to case a oppose the warringincrement of each oscillator 2 to 5aapke Yap and trigger Agha similarly youcan enter all the elements in queue byincreasing the rear pointer clear now wewill see how to delete from Q deletionhas over Q may friend say OmegaKarnataka front America pay v-0 payhomage friend said deletion cannot thatmeans if I have to remove F before Ihave to increment the value of frontpointer kikyo french of Vanko point wegotta be amiss co remembering a thenfriend should point to 2 then 3 4 and soonso subsidized MJ caring is make underflow condition that means k turquoiseelement hyena kuma table Britneyreceptive so if F is less than 0 thenright under flow else set item equals toQ F discovery front wind up point whereI was co-op deleting it item isequals to Q F's initially Moroscosuppose one item que Haga q1 which isequals to four then if F is equals toour other mobility card I got a rearpointer back Wan Jia then I have toagain initialize the Q then set F isequals to R equals to null else if F isis equals to max size then set s equalsto zero this is all for setting thevariables up neighbor item K Lu saidKathy and then you remove the item albumjai-alai tempo remove the net then Ihave to point my friend pointer to thenext itemso increment the friend pointer set F isequals to F plus 1 and then exit this isclear Aquos mkhaya drag negligee duringinsertion rear should increment R plus 1during the deletion front shouldincrement s plus 1 thank you forwatching the video please subscribe tothe YouTube channel for more tutorialson diaper structure and other computerscience related courses hi everyone welcome to nourishtechnologies this is famous in the lastsession we discussed so completely atheoretical approach of a queueimplementation now in this session we'llsee how to perform operations on a queueoperations means how to insert anelement into queue how to delete anelement from the queue and how totraverse all the elements okay see herehere it is queue implementation queueimplementation using static arraysheading is queue implementation usingstatic arrays static arrays means whatthe fixed in size queue size is a fixedsize will not change so that is what wecalled a static array right how toimplement first declaration of a queueis very very important declaration ofqueue size is a fixed size suppose herehere it is I am declaring 1 queue intint queue the size is a five or moreclearly if you want to write with thehelp of preprocessor directive hashdefine has defined the capacity capacityis a 5 that capacity we are writing herecapacity that is this is declaration soglobally you have to declare a variableso then it will get memory allocationwith the size is a 5 so we can insertfive elements so maximum because here itis a size is a fixed size and next onetwo more variables we have to declare sowhat are the variables means if you wantto insert or if you want to deletemostly queue operations we need toperformq operations we need to perform with thehelp of two variables friend and railbecause insertion of elements into thequeue is possible through rail an x1deletion is possible through friendright physically we can say that rightfrom the rear we are inserting theelements into the queue and from thefront we are deleting the elements fromthe cube but programmatically how can weshow by declaring variables only so herewe are declaring two variables one is aint friend equals to 0 and x1 int rareequals to 0 in front equals to 0 andentry equals 0 initially front and rearboth are pointing to the first location0 and 0 ok and remember whenever frontand rear is equals to 0 so that is whatwe called queue is empty we are notinserting any elements at so initiallyhere it is it is pointing 0 and the redis also pointing to 0th row tation okayso based on these variables thesevariables how to perform insertionoperation a deletion operation and nextone display operation observe heresuppose this is a queue the size is a 51 2 3 4 5 and index index initially thefront value front value is 0 and rarevalue is a 0 now all the 3 functions Iam writing side by side here it is firstone is a insert function how do weinsert an element into the queue insertfunction second one is a how to deletean element from the queuedelete and next one how to traverseelements traverse is nothing butdisplaying the elements so total threefunctions all the three will discuss sofirst of all if you want to insert theelements insert and delete both of yourwriting suppose if you want to insertelements into the queue we need to checkQ is full or not for insertion becauseif Q is already full you cannot insertthe elements in the same way suppose ifyou want to delete the elements then weneed to checkq is empty or not because if q is emptywe cannot delete the elements from the qokay see here it is we are checking ifif on some condition to declare localvariables leave some space if based onsome conditionwe do not know condition as of now hereit is a printf printf q is full thesituation will come but when it willcome we do not know that we will see butwe are writing the condition else we areinserting the elements in the same wayin case of deletion also if if now onsome condition we need to check printf Qis empty so you cannot perform adeletion operation on the q we cannotperform deletion operation because Q isempty no element is there to deleteservants are very clear observe herewhenever front value is equals to rarebecause front T equals to zero and thereequals to zero right so then simply herewe are writing Q is empty whenever frontequals to rare Q is Mtq is Mt and next one in case of atraverse also I want to display theelements same story first you need tocheck right q contains elements or notif suppose no elements simply we areprinting queue is empty queue is emptythis is right insert delete a traversebut here sir what is the condition thatyou will understand slowly in the elsepart else part suppose if space is thereinitially front is pointing to thezeroth location and there is alsopointing to zero zero location front andrear now I want to insert the elementsso we are asking here it is suppose weare declaring one variable element justread that element directly I am writingactually here we have to write a printfand scanf right we are reading thatelement after reading that element weneed to insert we need to insert thatelement into this location sir whichvariable we have to use sir front isalso pointing to the first location rareis also pointing to the first locationnow which variable we can use can I usea friend no because in algorithmstrictly specified that right all theinsertion operations from rare only sovariable rare variable only you have touse so here that element whatever theelement you read that will be storedinto queue of rail that will be storedinto queue of rare because Q is pointingto this array element suppose 10consider that will be stored into rarerare value is a girona yes so that willbe stored here after that we should movethe rare position to insert the nextelement here simply rare value isincreased by one rare plus place this issimply insertion next suppose they wantto insert one more element they want toinsert one more element then what willhappen so very simple again insertfunction will call if condition laterbecause some more elements are there andrare value is a1 increased now rare ispointing to second location nothing butfirst index number second location nowwe are reading the element using printfand scanf functions next element will becollected into queue of rare queue ofrare means what now this is the locationnext rare value will be increased rarevalue become 2 next rare is pointing tothis location location third elementinsertion and here it is a it will store30 next rare value become 3 next rarepointing to fourth location next elementinsertion 40 rare value become 4 next5th element insertion rare is pointingto next location 5th element and therare become 5 rare become 5 so wheneverrare is of 5 rare is pointing to thenext location which is not present rarevalues of 5 so q is full whenever rarevalue is equals to 5 5 is nothing but acapacity whenever rare is equals tocapacity capacity of your q of the queueso then we can say that Q is full we cansay that Q is full this is simplyinsertion condition we can keep oninserting so finally write the rarevalue is equals to the capacity by thattime if block will execute not elseblock because so there is no place toinsert the next element 6th elementinsertion there is no space okay so thisis inserting an element into the queueso finally rare value is a 5 rare valueis a 5now there is no option to insert so weare deleting just consider we aredeleting or we can display also so firstwe will see a Traverse Traverse verysimple if you want to display all theelements first we have to check elementsare present or not elements are presentor not we have to check suppose here itisif front is equals to rare we alreadydiscussed that if both are equal rightin the initial stage whenever you startwhenever you declare the variables bythe time front value and rare value bothare same so by the time no elementsinside the queue that we can say that Qis empty now in the else block we aredisplaying all the elements displayingand here it is we are just giving themessage printf Q elements are Q elementsso many elements will be present thenhow can we print just use the for loopI value starts with a 0 from the firstlocation or more clearly from the frontlocation because front is alwayspointing to the zeroth location friend Iis less than rare not less than orequals to sir why see suppose here it iselements up to fourth location rare ispointing to fifth location so we cannotaccess the element which is inside therare location so less than rare up tohere so less than rare and I plus plus Iplus plus we are printing the elementsprintf percentage D slash in and here itis simply Q of I the value here printingsimple we should move right so we shouldtraverse or simply we should iteratefrom first location to nothing but fromfront location to less than rarelocation how many elements are there allthe elements we are displaying simplething so this is how to display theelements directly you can tell first youhave to check right the queue is emptyor not if Q is empty you cannot performany operation okay maywe cannot display the elements which areinside the cube now the last operationis a deletion operation deletion sodeletionfor example if front is equals to rearqueue is empty so by the time you cannotdelete or else or else so what we haveto perform is first directly we aredeleting this element we are deletingten we are printing directly printfdeleted item is percentage D that is qof friend that is Q of friend so what isthat q of friend Q value Q is pointingto this location next Q of friend meansfront is a girona front is a zero frontalways pointing to zero only we cannotdisturb the location right frontvariable no need to disturb fromstarting to ending it is always pointingto zeroth location only so zerothlocation so here it is a ten will bedeleted deletion it is impossible todelete the information we have tooverwrite the information that is soafter saying that deleted that value 10next what we have to do means we need toshift all the elements we need to shiftall the elements how to shift same storyusing for loop using for loop we shouldstart from the first location firstlocation means what from front plus onelocation here it is here it isI value starts from one I is less thanhow many locations simply less than rareless than rare I plus plus I plus plusthen how can we shift simply Q of Q of Ivalue will be stored into Q of I minus 1or more clearly sir I will start with a0 only then no problemthen Q of I plus 1 valuewe'll be stored into q of i q-- of i sothat means this is Q that means supposeinitially I valued 0 Q of 0 plus 1 meanswhat 1 the 1 value will be stored into Qof 0 that is a 20shifted to here 20 next I value willincreaseI will you become 1 here it is 1 is lessthan rare rare value is a 5 and next oneQ of I plus 1 I plus 1 value means what1 plus 1 is a 2 to value will be storedinto Q of 140 will come to here 30 rightnext I will you become 2 so 3 value willcome to here 40 next I value 450 come tohere 50 so come to here next I value 5sorry I value 4 but here it is a 4 isless than rare value 5 so whenever weare writing like this this location willcome to here this value because already50 is shifted no need to shift this oneup to 4 only less than rare right hereit is a rare value 5 so this is lessthan rare minus one rare minus 1 now 4is less than 4 condition false becauseno need to shift the element 50 simplething so then what we have to do verysimple finally rare values of 5 1element deleted means rare value shouldbe decreased by 1 rare is not pointingto the fifth location rare should pointinto the fourth location simply what wehave to write rare - - simple afterinsertion rare plus plus after deletionrare - - and very very important conceptthis for loop shifting of elements veryvery important generally the peoplesaying that after deleting the elementfrom the front they will move the frontvalue impossible we should not supposeto move the frontyou they should not suppose to move thefront value then what we have to do whatwe have to do means always we have toshift the elements from first locationto rare location all the elements wehave to shift by one location towards aforward direction right words forwarddirection this is how to performinsertion operation deletion operationand a traverse operation in a queue okayso this is all about a queue abstractdata type or queue data structureabstract data type or queue datastructure okay so all the operations howto perform the complete explanationabout queue data structure okay so thankyou thank you for watchingfor more videos please subscribe tonourish 80 channel thank you in this session we were going to discussanother data structure q and q isnothing but a sequence list where listof data or set of data will getrepresented but here unlike the stackhere the insertion and deletion will bedone from two separate ends of the Q theQ will have to end marker one is thefront another one is the rear any kindof insertion operation will be carriedout at the rear end and any kind ofdivision of data will be carried outfrom the front end q is a data structurewhich is known as first-in first-outor lasting last out data structure so weknow that in in front of any ticketcounter or any kind of service counterwe usually find ourself in a queueso the person who has joined that queueearliest will get the service from thecounter earliest and we leave the queueat first so that means first in firstout so to have a proper idea regardingthis particular queue let us come tothis particular diagram so as I told youthat in case of queue data structure wewill be having two variables one will befront from where deletion will takeplace and another will be the rear atwhich end the insertion will take placeq can be represented either using anarray or using one linked list where twopointers will be kept at front and rearand insertion and deletion will takeplace accordingly okay now let usconsider the ad implementation of thequeue this is one array which is havingfive locations and initially the queueis empty so that ad is also empty whenthe queue is empty mean means the arrayis empty then front and rear will beequal to 0 because 0 is not a validsubscript so that means that q front isequal to 0 and rear is equal to 0indicates queue is empty now insert athen Bthen see in that order so at first youwill be inserted at this particularplace so front will become one and rearwill become onewhenever front is equal to rear is equalto 0 that means the queue is emptywhenever front is equal to rear is notequal to 0 that means only one data isexisting in the queue in this particularcase after insertion of a the front willbe one and the rear will be one becausethat is only one data it is having butif I if I insert B the B will be cominghere so rear will become 2 if I insert Cthen she'll be coming here then at theend there will be 3 front is equal to 1and reared is equal to 3 in this way itwill work now we are going for delete adelete a means the first data a will getdeleted so I shall be demeaning with Band C so front will be 2 and Riaan willbe 3 because I have deleted a deleteoperation can only be carried out fromthe front end here the front is equal to1 so that's what delete operation hascarried out from the front end nowinsert D and E so B and C will surviveand D and E will get inserted so frontwill still remain with two and rear willbecome 5 then it is asking to delete Band C so D will remain and you willremain so front will become 4 and rearwill become 5 now it is asking for theinsertion of F so f will be inserted atthe rear end as insertion can only bedone at the rear end but after D thereis no free space but there are somepriestesses beforehand so insertion canbe done in two ways either I should haveto shift D and E towards the left sothat I can get a blank space ofChristmas at the end there I can insertthis F otherwise I can go for thecircular logicI shall insert F here I think the firstone is involving lateral movement ofphysical data so it is time consumingand it is having a very costly Affairsso it is better not to shift my data butit is better to go for the circularqueue because in that case that is noneed to have any lateral movement ofphysical data but I can utilize myinsertion operation and in a circularway so D and E will survive here and ifwill get inserted at the front at thisparticular front of the queue front ofthis array but it is actually the rearend because the rear end can at the rearend we can perform the insertionoperation only so what about D D is atthe fourth place and Reid is at the oneplaceso whenever front is greater than rearthat indicates that it is in thecircular logic it is in a circular waywhen front is greater than rear itindicates that the circular logic isthere in the cube now it is asking forinsertion of G and H so front D then ethen rear end D safe so G and H will beinserted at the rear end so they will becoming here G and H will be coming hereso frond will still remain with four andrear D is equal to three so in front isgreater than rear that means the Q ishaving data in the circular logicnow delete D&E so D and E will getdeleted so I shall remain with F G and Hso here my rear end will remain as threebecause we are doing that deletiondeletion will be done at the front sonow front has become one so here thefront is not greater than rear thatmeans I am in the linear logic insert Iso ifG and H will survive I will be coming atthe last so rear will get changed frondwill still remain with one now delete fthat means I shall be remaining with GHIand here front will be two and reallybefore in this way I have given you theidea how this insert and deleteoperations are getting carried out on acircular queue implemented through anarray and how the front and rearaddresses are getting updated on a queuewhere basically you usually get twooperations one is the insert and anotherone is the deal it in the next videos weare going to discuss the algorithm forinsert operation and the deleteoperation and those videos will be inthe continuation of this current videothree please watch all of them and we'llbe solving some problems on queue andstacks and other topics also and thanksfor watching this video hi everyone welcome to nourishtechnologiesthis is shinhwa's so in this session sowe are going to discuss about a circularqueue concept in a data structures andalgorithms concept is a circular queuecircular queue so why they introducedthe concept of a circular queue so meansthe only disadvantage of queue iswhenever we are deleting one elementfrom the front all the remainingelements will be shifted in a forwarddirection for example so take 1 queueand we know that all the elements weneed to insert from the location rare sothis is for insertion and from the frontwe are deleting from the front so we aredeleting we know this some of theelements already present in a queue in acube suppose if you want to delete thiselement so front is always pointing tothe zeroth location is nothing but astarting location friend always zerothis we cannot changewe should not suppose to disturb friendequals to zero suppose if they call adelete function so we need to delete theelement with the help of a friendbecause a deletion from the front afterdeletion we need to shift all theseelements nothing but as ten is replacedwith a 20 20 is replaced with a 30 allthese elements we need to shift likethis so like this we need to shiftso then rail will move from by onelocation so this is generally what ishappening in a queue so already wediscussed very clearly in a queueoperationsbut here it is for shifting the elementsshifting the elements so it will occupyright or it will consume so much time soto avoid this problem they introducedthe concept of a circular Q so in acircular Q the Q will be represented inthe form of a circle and no need toshift all the elements then how theelements arrangement will be okay let'ssee so here it is the size of a circularQ is a six index number so zero to fivebut here also all the operations if youwant to insert write the operation weshould perform with the help of rarevariable because insertion from the railand deletion from the front but sir hereit is in a circular Q how you willspecify the front end rail initiallyinitially the front equals to minus oneand rare equals to minus one frontequals to minus one and rare equals tominus one means what the queue is emptyif front equals to minus one and rareequals to minus one in the sense Q is aempty whenever we are inserting only oneelement the first element we areinserting of course we need to insertwith the help of so rare only but by thetime here it isfront and rear should be zero and zerofront and rear is pointing to zero andzero and here sir how to insert usingfront variable or rare variables areboth are pointing to same location yesbut we should follow the rules accordingto algorithm queue data structureinsertions will be done with the help ofrail so the element any element suppose10 so that will be stored into Q of R aand of course circular Q sowe are writing CQ circular q suppose 10will be stored here sir remainingoperations again first rare plus plus sorare value become 1 nothing but rare ispointing to 1 and here it is the nextelement 20 next if you are insertingthird one rare equals to 2 is a 30 nextrare equals to 3 is a 40 next rareequals to 4 is a 50 next rare equals to5 is a 60 so now Q is a full so based onthis another condition is there so whatis that condition if rare value equalsto size minus 1 because size is a 6 6minus 1 is a 5 if size equals rareequals to size minus 1 that is Q is full2 things remember if front equals tominus 1 rare equals to minus 1 in thatcase Q is empty because based on allthese conditions only finally we willimplement the logic what is that logichere i am writing if friend equals tominus 1 and where equals to minus 1 isnothing but q is empty queue is empty sothat is one condition next here it iswhat if rare equals to size minus 1 sothat is Q is full sir if Q is full sothen what we can do simply we have toperform a deletion operations so how canwe perform deletion operations is thereany shifting of elements no suppose ifyou want to delete sir how to deletewith the help of front deletion elementis nothing but C Q of a friendso whatever the element which is insidethe front here it is a CQ of front frontvalue is a girona right thatgrowth element will come - here it iselement and we are printing the messagedeleted item easy 10 after deletion ofcourse it is not possible to deletelater we can override that I will showyou right here it is front will movefront plus plus nothing but friend cometo here no shifting of elements it isdeleted next once again if they want tocall a delete again CQ of a friend 20will be deleted next front will move tohere so now two elements deleted nothingbut two locations empty consider now ifyou want to insert one more element nowhow to insert one more element in theprevious cases just simply we arewriting rare plus plus rare plus plusbut now rare plus plus is not allowedwhy because where value is a 5 not rareplus plus means what rare value becomes6 is there any sixth location here no sonow if you want to insert very simple ifrare value equals to size minus 1 andyou want to insert again a rare value isstarts with a 0 and then insertion sonow rare come to here inserting suppose70 value is a 70 next one I want toinsert one more now this condition failbecause rare equals to sighs - onecondition fail again rare plus plus onlyso what is that rare plus plus valuerare value so become one and here it is80 again Q useful Q is full but see hereit is in a queue is full case rareequals to sighs - one condition failedin this situation because rare value isa 1 and here it is a front value is a 2so then what we have to do what we haveto do means here it is so we need to gofor another condition that is alsorepresents Q is full here it is based onthese two so what is the condition thatrepresents Q is fullif friend equals to rare plus 1 becauserare value is 1 1 plus 1 is ato front is a two in this case also soyou can write a Q is a full so like thatwe will perform operations insertionoperation deletion operation and displayoperations we will perform so this ishow a circular q execute and so what isthe importance of a circular q what arethe advantages of circular q over as ageneral q is only one advantage that isa shifting of elements so all theoperations on a circular queue so thatwill perform okay how to perform it atall so that we will see in a nextsession for more videos please subscribeto nourish id channel thank youyou Yeah right we have discussed few datastructures like array and Ling lists howdata is stored in array what are thedifferent operations on array what islinked list or what are the differentoperations on linked list how data isstored in linked list right and now wewill see what is the stack datastructure so you can see it is a lineardata structure fine and seen array whatis their random access as possible youcan directly access any data in aconstant time in linked list what onlysequential access is possible rightwhat about stuck in stack only you cansay limited access is possible right oryou can say it is a ordered list what isthat it is an ordered list or you cansay it is a collection or you can say itis a container which is going to followa rule for insertion and deletion of thedata right and what is that rule or whatis that restriction you can say or whatis that principle right which that stackdata structure follow so that rule isinsertion and deletion is possible onlyfrom one end right this is applied onboth insertion and deletion insertionand deletion is possible from only oneend like you can take a real lifeexample suppose you have a CD standright like this you are going to put CDshere first CD then second third fourthfifth obviously like this you are goingto put suppose you want to insertanother CD in that case you have onlyone way to insert CD from the top onlyyou cannot insert CD here from thebottom you cannot insert from the leftor right the only way is from the toponly you can insert that CD right secondK says if you want to take out a CD fromthis series stand then what you will doonly one option you can take out fromthe top right suppose you want to takeoutin this city the first CD right so youdon't have any option the only option isfirst of all you will have to take outall the CDs which are placed above thisCD after that only you can take out thisCD right that is the restrictions oninsertion and deletion in stock fine soin this video we will see how logicallyyou are going to represent a stack whatare the introduction introductory partof stack some basic operations on stackwhat what are the meaning of thoseoperations as well as some applicationsof stack in next video we will see howto implement a stack right using arraysas well as using link inst so now likethis if you map this real-life stackobviously this is what a stack only oryou can say a stack of plates right oneplate is you have put one plate here ifyou want to play a place another platethen you will put on this plate thenthird and fourth and fifth like this youare going to place if you want to removea plate then first plate you will takeout first right so the principle is whatlast in first out you can say right thisis the last plate or you can say this isthe last CD you have put in the CD standand the last CD would be the first onethat you can take out so last in firstout leaf oh so the rule on which thisstack data structure works is what leavefor last in first out or you can sayfirst in last out this CD was first inbut if you want to take out this CD thenthis would be the last one you can takeout because for for taking out this CDoutside of the series 10 you how to takeout all the above CDs first of all rightso first any last out and if you willmap this real-life example of stack inthis with this stack then you can saythe logical representdatian of the stack is what we representstack something like this like this thisis what a stack you will represent thisit is a container which has only oneopen end you can insert data from hereyou can delete a data from here rightthere is no other way this is what astack logical representation of stuffthis is not actual representation ofstack right that we will discuss inlater we use rightand in stab insertion operation when youwill insert some data understand thatoperation is known as push right anddeletion operation is known as pop sotwo fundamental operations are there onthe stack one is push one is pop pushmeans inserting or putting a data intothe strap pop means taking out ordeleting the topmost data from the stackright two fundamental operations manymore operations are also there that ifyou are we will also discuss now seethis is the only and from where you aregoing to push and pop the data right sothis is known as top top of the steprightyou can insert a data and you can deletedata from top of the stack that end isknown as top from where you can insertyou can push and pop data right so nowwe will see some operations that areperformed on star data structure seefirst is push and in bracket you willwrite down that a data you want toinsert into stack C stack is what it isa collection of similar data type onlyit's not like that this is stack andhere the first data is suppose integerand after that I'm inserting a characterafter that again I am inserting to knowyou can only insert the data of similardata type either in teaser all the datashould be integer or character or floatsomething like this right see pushsecond operation is pop operationright here they don't pass any argumenthere why so because pop means always thetopmost element would be popped out fromthe step right so no need to passanything in this function these are twofundamental operation third operationmay be peak operation or somewhere it isalso known as top operation it meanswhat it is going to return the topmostelement of the stack without removingthat element from the stack see Bob willreturn the topmost element from thestack as well as it will remove thatelement from the stack see suppose thisis what I have stack and in this I havedata type 1 I have data 1 2 & 3 if youwrite down pop it means it will remove 3from the stack now this is the stepright and if on this stack you willperform peak operation or top operationit means it will return 3 but it willnot remove this from the step this isthe difference right fourth operationmay be is empty means it will true ifthe stack is empty there is known datain the list just in the stack rightotherwise it will return false sakeanother may be is full so this functionwill return true if this stack is fullotherwise it will return false see theseare not the only operation you canperform there are many more operationyou can perform on stack like you cannotperform search operation reverseoperation you can find out that minimumelement from the stack maximum valueelement from the stack right bad thingalso we will discuss in a later videosright these are some fundamentaloperations you can perform one stackfine now we will see the logicalrepresentation of stack as well as weare going to perform these operationsright so this is how we logicallyrepresent the step right not actually inthe memory this is just a logicalrepresentation right for yourunderstanding purpose nowobviously you want do you want to pushsome data in the stack right so you needto know the capacity of the stack or youcan say the size of the stack so youneed to allocate some memory to thestack right and how to fix that size howyou will get to know the size of thestack you can allocate the memory eitherusing static memory allocation ordynamic memory allocation there are twoways to implement stack static memoryallocation and dynamically you canimplement step static means using arraysyou can implement stack write dynamicmeans using linked lists you canimplement stack so these implementationswe will see in the next video with theproper with the help of an example pluscode right so now suppose I have takenthe size of the stack as 5 means thestack can store only five elementseither using by static memory locationor dynamic memory allocation right thatthing in detail we will discuss in nextvideo see suppose the capacity is here 5so you can insert here 5 elements onlyfineat starting at starting top is what topis equal to minus 1 fine 5 means you cansay you can insert 5 elements the indexwould be 0 first of all then 1 then 2then 3 then 4 from 0 to 4 right so here5 elements I can store this is thecapacity of the stack at starting top isminus 1 right minus 1 means somewherehere minus 1 hypothetically we assumethat here we have minus 1 index rightnow suppose in the empty stack you callthis pop operation what would happen popmeans the topmost element would beremoved but here we don't have anythingstack is empty in this case it is whatunder flow condition it will return whatthe stack is empty so this is what anunder flow condition you can say rightandnow suppose I'm calling push to writeactually implementation or loose also wewill see how to write down the code forpush and pop right here I am just givingyou the brief introduction push 2 minshere from the top one you will insertthis 2 right we have only one end sofirst of all what would happen top is -1so we will increment this top first ofall top plus plus it means top becomes 0now now here we have top and now youwill insert this to write again if youwill call push 3 again first of all topplus plusright now table becomes this one top ispointing to this one 1 and now you willinsert 3 here in the stack fine if youcall pop no need to pass any argumenthere why so because only the topmostelement would be removed from the stackyou cannot write here pop 2 means if youwant to remove this 2 you cannot see pop2 and this 2 would be removed no alwaysthis element would be removed right sopop 3 pop means the 3 would be removedfrom the stack and now see right now wewill do top minus minus means now againtop is 0Oh second again if you do pop in thatcase again though would be removed fromthe list or simply you can do top minusminus means top is now minus 1 right andif you will not remove this if you willnot take out this from the stack that isalso fine because this is now a garbagewe do not care what garbage value isthere in the stack because after that ifyou will again call push for then firstof all top plus plus means now topbecomes 0 minus 1 to 0here we will this too would beoverwritten and herefor would be storedright this thing also will discuss howto code push and pop operation fine nowsuppose I am going to push four timesone five six and seven one five six andseven again I am calling push eight nowthe stack is full Vegas capacity is onlyfive right so now it should return whatit is what an overflow condition we havediscussed what is under flow conditionnow here this is what overflow conditionif this dope is pointing to this maximumsize minus one the index is for maximumsize is five in that case it wouldreturn overflow condition you cannotinsert any data in the stack becausestack is full so this is what overflowcondition and now here if you will callis full function means it will returntrue if the stack is full and now thecondition is status full so it wouldreturn at this time is full functionwould return true right and when thereis nothing in the stack suppose we havepopped out all the data and after thatwe call is empty in that case it wouldreturn true because stack is empty howyou are going to code these function wewill see what so now what are theapplications of stack see the very basicapplication is if you want to reverse astring or in reverse a word then we willuse stack that is very simple suppose Iwant to reverse I have a string ABC andD so I want to reverse this I want toprint a DC B and a so simply what I cando I can push this into stack first ofall ABC and D and then pop out first ofall D would be popped out then C then Bthen e this is what we have reversed tothe string second application is forundo mechanism in text editor I guesseverybody have used this undo mechanismsuppose you have written something Ihave written ABCDE right in the texteditor in text editor andyou press ctrl-z the shortcut key forundo then you would be deleted then Dwould be deleted then C then B then athis mechanism is performed using stepin your text editors right thirdapplication maybe you can use it inrecursion or you can say in functioncall when you are going to call afunction then obviously something wouldbe returned some value would be returnlike and recursion means it is you cansay a chain or function call a functionis calling itself again and again rightso whenever that function would returnsomething then that values would bestored in stack how actually recursionwill work that also we will discuss whenwe will discuss recursion fourth may beto check the balance of the parenthesesparentheses means like this the compileruse stab for verifying the balance ofthe parentheses means for each openingparenthesis there is proper closingparenthesis at right place right supposehere is opening again here I have openedagain here I hope open so it means thereshould be three closing brackets rightso this balance would be checked usingstep this thing also we will discuss indetail right fourth application may bein fix to postfix or prefix conversionwhen you are going to convert theseexpressions from infix to postfix or infix to prefix in that case also startingto be used that thing also will discussentity right and as well as in manyalgorithm stack data structure is usedyou can say in topological sorting inDFS we are using staff in Tower of Hanoiproblem also we are going to use staffin tray traverser also we will use stepright so there are many applications ofstaff and sixth you can say for theevaluation of postfix expression we willuse step right that is also we'lldiscuss all the application we willdiscuss in detail this is just anintroductory video of this tag to getyou familiar with stack the logicalrepresentation of star how actually weare going to implement stack how we areactually going to code these operationswe will discuss in nextyou fine so I'll see in the next videotill then bye-bye take 